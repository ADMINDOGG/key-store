--[[
    ╔══════════════════════════════════════════════════╗
    ║                    DOGHUB                        ║
    ║            Advanced 3D UI Library               ║
    ║                                                  ║
    ║  Creator: Advanced UI Systems                    ║
    ║  Version: 2.0 ULTRA                            ║
    ║  Features: 3D Floating UI, Neon Effects        ║
    ╚══════════════════════════════════════════════════╝
]]

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera

-- DOGHUB Main System
getgenv().DOGHUB = getgenv().DOGHUB or {}
local DOGHUB = getgenv().DOGHUB

-- Protection
if type(ProtectInstance) == "function" then
    pcall(ProtectInstance, script)
end

-- Create Main Part
local MainPart = Instance.new("Part")
MainPart.Name = "DOGHUB_" .. HttpService:GenerateGUID()
MainPart.Anchored = true
MainPart.CanCollide = false
MainPart.Locked = true
MainPart.Transparency = 1
MainPart.Size = Vector3.new(25, 15, 3)
MainPart.CFrame = Camera.CFrame * CFrame.new(0, 0, -12)

if type(ProtectInstance) == "function" then
    ProtectInstance(MainPart)
end

MainPart.Parent = workspace

-- Storage System
local Storage = {
    Data = {},
    Connections = {},
    Objects = {}
}

function Storage:Save(key, value)
    self.Data[key] = value
end

function Storage:Load(key, default)
    return self.Data[key] or default
end

function Storage:AddConnection(connection)
    table.insert(self.Connections, connection)
    return connection
end

function Storage:AddObject(object)
    table.insert(self.Objects, object)
    return object
end

function Storage:Cleanup()
    for _, connection in pairs(self.Connections) do
        if connection and connection.Disconnect then
            connection:Disconnect()
        end
    end
    for _, object in pairs(self.Objects) do
        if object and object.Destroy then
            object:Destroy()
        end
    end
    self.Connections = {}
    self.Objects = {}
end

-- UI Creation
local ScreenGui = Instance.new("SurfaceGui")
ScreenGui.Name = "DOGHUB_Interface"
ScreenGui.Face = Enum.NormalId.Back
ScreenGui.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud
ScreenGui.Adornee = MainPart
ScreenGui.AlwaysOnTop = true
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Parent = MainPart

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(1, 0, 1, 0)
MainFrame.Position = UDim2.new(0, 0, 0, 0)
MainFrame.BackgroundTransparency = 1
MainFrame.Parent = ScreenGui

-- Background with Gradient
local Background = Instance.new("Frame")
Background.Name = "Background"
Background.Size = UDim2.new(0.95, 0, 0.9, 0)
Background.Position = UDim2.new(0.025, 0, 0.05, 0)
Background.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
Background.BorderSizePixel = 0
Background.Parent = MainFrame

local BackgroundCorner = Instance.new("UICorner")
BackgroundCorner.CornerRadius = UDim.new(0, 15)
BackgroundCorner.Parent = Background

local BackgroundGradient = Instance.new("UIGradient")
BackgroundGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 35)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(15, 15, 25)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 15))
}
BackgroundGradient.Rotation = 45
BackgroundGradient.Parent = Background

-- Neon Border Effect
local NeonBorder = Instance.new("Frame")
NeonBorder.Name = "NeonBorder"
NeonBorder.Size = UDim2.new(1, 4, 1, 4)
NeonBorder.Position = UDim2.new(0, -2, 0, -2)
NeonBorder.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
NeonBorder.BackgroundTransparency = 0.3
NeonBorder.BorderSizePixel = 0
NeonBorder.ZIndex = Background.ZIndex - 1
NeonBorder.Parent = Background

local NeonCorner = Instance.new("UICorner")
NeonCorner.CornerRadius = UDim.new(0, 17)
NeonCorner.Parent = NeonBorder

-- Animated Neon Effect
local function AnimateNeon()
    local colors = {
        Color3.fromRGB(0, 255, 255),    -- Cyan
        Color3.fromRGB(255, 0, 255),    -- Magenta
        Color3.fromRGB(255, 255, 0),    -- Yellow
        Color3.fromRGB(0, 255, 0),      -- Green
        Color3.fromRGB(255, 100, 0),    -- Orange
        Color3.fromRGB(100, 0, 255)     -- Purple
    }
    
    local currentIndex = 1
    Storage:AddConnection(RunService.Heartbeat:Connect(function()
        if NeonBorder and NeonBorder.Parent then
            local nextIndex = currentIndex % #colors + 1
            local tween = TweenService:Create(NeonBorder, 
                TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {BackgroundColor3 = colors[nextIndex]}
            )
            tween:Play()
            currentIndex = nextIndex
            wait(2)
        end
    end))
end

AnimateNeon()

-- Header
local Header = Instance.new("Frame")
Header.Name = "Header"
Header.Size = UDim2.new(1, 0, 0.15, 0)
Header.Position = UDim2.new(0, 0, 0, 0)
Header.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
Header.BackgroundTransparency = 0.1
Header.BorderSizePixel = 0
Header.Parent = Background

local HeaderCorner = Instance.new("UICorner")
HeaderCorner.CornerRadius = UDim.new(0, 15)
HeaderCorner.Parent = Header

-- DOGHUB Title
local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(0.6, 0, 1, 0)
Title.Position = UDim2.new(0.05, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "🐕 DOGHUB"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextScaled = true
Title.Font = Enum.Font.GothamBold
Title.Parent = Header

-- Title Gradient
local TitleGradient = Instance.new("UIGradient")
TitleGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 255)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 0, 255)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 0))
}
TitleGradient.Parent = Title

-- Animated Title Effect
Storage:AddConnection(RunService.Heartbeat:Connect(function()
    if TitleGradient and TitleGradient.Parent then
        TitleGradient.Rotation = TitleGradient.Rotation + 1
        if TitleGradient.Rotation >= 360 then
            TitleGradient.Rotation = 0
        end
    end
end))

-- Control Buttons
local ControlsFrame = Instance.new("Frame")
ControlsFrame.Name = "Controls"
ControlsFrame.Size = UDim2.new(0.3, 0, 1, 0)
ControlsFrame.Position = UDim2.new(0.7, 0, 0, 0)
ControlsFrame.BackgroundTransparency = 1
ControlsFrame.Parent = Header

-- Minimize Button
local MinimizeBtn = Instance.new("TextButton")
MinimizeBtn.Name = "MinimizeBtn"
MinimizeBtn.Size = UDim2.new(0.3, 0, 0.6, 0)
MinimizeBtn.Position = UDim2.new(0.1, 0, 0.2, 0)
MinimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 200, 0)
MinimizeBtn.Text = "−"
MinimizeBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
MinimizeBtn.TextScaled = true
MinimizeBtn.Font = Enum.Font.GothamBold
MinimizeBtn.BorderSizePixel = 0
MinimizeBtn.Parent = ControlsFrame

local MinimizeCorner = Instance.new("UICorner")
MinimizeCorner.CornerRadius = UDim.new(1, 0)
MinimizeCorner.Parent = MinimizeBtn

-- Close Button
local CloseBtn = Instance.new("TextButton")
CloseBtn.Name = "CloseBtn"
CloseBtn.Size = UDim2.new(0.3, 0, 0.6, 0)
CloseBtn.Position = UDim2.new(0.6, 0, 0.2, 0)
CloseBtn.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
CloseBtn.Text = "✕"
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextScaled = true
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.BorderSizePixel = 0
CloseBtn.Parent = ControlsFrame

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(1, 0)
CloseCorner.Parent = CloseBtn

-- Content Area
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "Content"
ContentFrame.Size = UDim2.new(1, 0, 0.85, 0)
ContentFrame.Position = UDim2.new(0, 0, 0.15, 0)
ContentFrame.BackgroundTransparency = 1
ContentFrame.Parent = Background

-- Left Panel (Tabs)
local LeftPanel = Instance.new("ScrollingFrame")
LeftPanel.Name = "LeftPanel"
LeftPanel.Size = UDim2.new(0.25, 0, 1, 0)
LeftPanel.Position = UDim2.new(0, 0, 0, 0)
LeftPanel.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
LeftPanel.BackgroundTransparency = 0.2
LeftPanel.BorderSizePixel = 0
LeftPanel.ScrollBarThickness = 0
LeftPanel.CanvasSize = UDim2.new(0, 0, 0, 0)
LeftPanel.AutomaticCanvasSize = Enum.AutomaticSize.Y
LeftPanel.Parent = ContentFrame

local LeftCorner = Instance.new("UICorner")
LeftCorner.CornerRadius = UDim.new(0, 10)
LeftCorner.Parent = LeftPanel

local LeftLayout = Instance.new("UIListLayout")
LeftLayout.Padding = UDim.new(0, 5)
LeftLayout.SortOrder = Enum.SortOrder.LayoutOrder
LeftLayout.Parent = LeftPanel

-- Right Panel (Controls)
local RightPanel = Instance.new("ScrollingFrame")
RightPanel.Name = "RightPanel"
RightPanel.Size = UDim2.new(0.73, 0, 1, 0)
RightPanel.Position = UDim2.new(0.27, 0, 0, 0)
RightPanel.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
RightPanel.BackgroundTransparency = 0.3
RightPanel.BorderSizePixel = 0
RightPanel.ScrollBarThickness = 6
RightPanel.ScrollBarImageColor3 = Color3.fromRGB(0, 255, 255)
RightPanel.CanvasSize = UDim2.new(0, 0, 0, 0)
RightPanel.AutomaticCanvasSize = Enum.AutomaticSize.Y
RightPanel.Parent = ContentFrame

local RightCorner = Instance.new("UICorner")
RightCorner.CornerRadius = UDim.new(0, 10)
RightCorner.Parent = RightPanel

local RightLayout = Instance.new("UIListLayout")
RightLayout.Padding = UDim.new(0, 8)
RightLayout.SortOrder = Enum.SortOrder.LayoutOrder
RightLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
RightLayout.Parent = RightPanel

-- DOGHUB Library
local Library = {}
Library.CurrentTab = nil
Library.Tabs = {}

-- 3D Movement System
local SCALE = 0.015
local ViewOffset = Vector3.new(0, 0, -12)
local BreathingEnabled = true

Storage:AddConnection(RunService.RenderStepped:Connect(function(deltaTime)
    if MainPart and MainPart.Parent then
        local mouseX = (Mouse.X - Mouse.ViewSizeX/2) * SCALE
        local mouseY = (Mouse.Y - Mouse.ViewSizeY/2) * SCALE
        
        local targetCFrame = Camera.CFrame * 
            CFrame.new(ViewOffset.X, ViewOffset.Y, ViewOffset.Z) * 
            CFrame.Angles(0, math.rad(mouseX), 0) * 
            CFrame.Angles(math.rad(mouseY), 0, 0)
        
        TweenService:Create(MainPart, 
            TweenInfo.new(deltaTime * 2, Enum.EasingStyle.Quart),
            {CFrame = targetCFrame}
        ):Play()
        
        -- Breathing effect
        if BreathingEnabled then
            local breathScale = 1 + math.sin(tick() * 2) * 0.02
            local targetSize = Vector3.new(25, 15, 3) * breathScale
            MainPart.Size = MainPart.Size:Lerp(targetSize, deltaTime * 3)
        end
    end
end))

-- Tab System
function Library:CreateTab(name, icon)
    icon = icon or "📁"
    
    local Tab = {}
    Tab.Name = name
    Tab.Frame = Instance.new("Frame")
    Tab.Button = Instance.new("TextButton")
    Tab.Elements = {}
    
    -- Tab Button
    Tab.Button.Name = name .. "_Button"
    Tab.Button.Size = UDim2.new(0.95, 0, 0, 45)
    Tab.Button.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
    Tab.Button.Text = icon .. " " .. name
    Tab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
    Tab.Button.TextScaled = true
    Tab.Button.Font = Enum.Font.Gotham
    Tab.Button.BorderSizePixel = 0
    Tab.Button.Parent = LeftPanel
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = Tab.Button
    
    -- Tab Frame
    Tab.Frame.Name = name .. "_Frame"
    Tab.Frame.Size = UDim2.new(1, 0, 1, 0)
    Tab.Frame.BackgroundTransparency = 1
    Tab.Frame.Visible = false
    Tab.Frame.Parent = RightPanel
    
    local FrameLayout = Instance.new("UIListLayout")
    FrameLayout.Padding = UDim.new(0, 8)
    FrameLayout.SortOrder = Enum.SortOrder.LayoutOrder
    FrameLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    FrameLayout.Parent = Tab.Frame
    
    -- Tab Selection
    Storage:AddConnection(Tab.Button.MouseButton1Click:Connect(function()
        -- Hide all tabs
        for _, tab in pairs(Library.Tabs) do
            tab.Frame.Visible = false
            tab.Button.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
            tab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        
        -- Show selected tab
        Tab.Frame.Visible = true
        Tab.Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
        Tab.Button.TextColor3 = Color3.fromRGB(0, 0, 0)
        Library.CurrentTab = Tab
        
        -- Animate selection
        TweenService:Create(Tab.Button, 
            TweenInfo.new(0.3, Enum.EasingStyle.Back),
            {Size = UDim2.new(1, 0, 0, 45)}
        ):Play()
    end))
    
    -- Hover effects
    Storage:AddConnection(Tab.Button.MouseEnter:Connect(function()
        if Library.CurrentTab ~= Tab then
            TweenService:Create(Tab.Button, 
                TweenInfo.new(0.2),
                {BackgroundColor3 = Color3.fromRGB(50, 50, 60)}
            ):Play()
        end
    end))
    
    Storage:AddConnection(Tab.Button.MouseLeave:Connect(function()
        if Library.CurrentTab ~= Tab then
            TweenService:Create(Tab.Button, 
                TweenInfo.new(0.2),
                {BackgroundColor3 = Color3.fromRGB(30, 30, 40)}
            ):Play()
        end
    end))
    
    Library.Tabs[name] = Tab
    
    -- Auto-select first tab
    if not Library.CurrentTab then
        Tab.Button.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
        Tab.Button.TextColor3 = Color3.fromRGB(0, 0, 0)
        Tab.Frame.Visible = true
        Library.CurrentTab = Tab
    end
    
    return Tab
end

-- Button Element
function Library:CreateButton(tab, text, callback)
    local Button = {}
    
    local ButtonFrame = Instance.new("TextButton")
    ButtonFrame.Name = text .. "_Button"
    ButtonFrame.Size = UDim2.new(0.95, 0, 0, 40)
    ButtonFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    ButtonFrame.Text = text
    ButtonFrame.TextColor3 = Color3.fromRGB(255, 255, 255)
    ButtonFrame.TextScaled = true
    ButtonFrame.Font = Enum.Font.Gotham
    ButtonFrame.BorderSizePixel = 0
    ButtonFrame.Parent = tab.Frame
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = ButtonFrame
    
    local ButtonGradient = Instance.new("UIGradient")
    ButtonGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 70)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 50))
    }
    ButtonGradient.Rotation = 90
    ButtonGradient.Parent = ButtonFrame
    
    -- Click effect
    Storage:AddConnection(ButtonFrame.MouseButton1Click:Connect(function()
        -- Visual feedback
        TweenService:Create(ButtonFrame, 
            TweenInfo.new(0.1),
            {Size = UDim2.new(0.93, 0, 0, 38)}
        ):Play()
        
        wait(0.1)
        
        TweenService:Create(ButtonFrame, 
            TweenInfo.new(0.1),
            {Size = UDim2.new(0.95, 0, 0, 40)}
        ):Play()
        
        -- Execute callback
        if callback then
            pcall(callback)
        end
    end))
    
    -- Hover effects
    Storage:AddConnection(ButtonFrame.MouseEnter:Connect(function()
        TweenService:Create(ButtonGradient, 
            TweenInfo.new(0.2),
            {Rotation = 45}
        ):Play()
    end))
    
    Storage:AddConnection(ButtonFrame.MouseLeave:Connect(function()
        TweenService:Create(ButtonGradient, 
            TweenInfo.new(0.2),
            {Rotation = 90}
        ):Play()
    end))
    
    function Button:SetText(newText)
        ButtonFrame.Text = newText
    end
    
    function Button:SetCallback(newCallback)
        callback = newCallback
    end
    
    return Button
end

-- Toggle Element
function Library:CreateToggle(tab, text, default, callback)
    local Toggle = {}
    Toggle.Value = default or false
    
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = text .. "_Toggle"
    ToggleFrame.Size = UDim2.new(0.95, 0, 0, 40)
    ToggleFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    ToggleFrame.BorderSizePixel = 0
    ToggleFrame.Parent = tab.Frame
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 8)
    ToggleCorner.Parent = ToggleFrame
    
    local ToggleLabel = Instance.new("TextLabel")
    ToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
    ToggleLabel.Position = UDim2.new(0.05, 0, 0, 0)
    ToggleLabel.BackgroundTransparency = 1
    ToggleLabel.Text = text
    ToggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleLabel.TextScaled = true
    ToggleLabel.Font = Enum.Font.Gotham
    ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    ToggleLabel.Parent = ToggleFrame
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0.2, 0, 0.7, 0)
    ToggleButton.Position = UDim2.new(0.75, 0, 0.15, 0)
    ToggleButton.BackgroundColor3 = Toggle.Value and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
    ToggleButton.Text = Toggle.Value and "ON" or "OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextScaled = true
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Parent = ToggleFrame
    
    local ToggleButtonCorner = Instance.new("UICorner")
    ToggleButtonCorner.CornerRadius = UDim.new(0, 5)
    ToggleButtonCorner.Parent = ToggleButton
    
    function Toggle:Update()
        local targetColor = self.Value and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(100, 100, 100)
        local targetText = self.Value and "ON" or "OFF"
        
        TweenService:Create(ToggleButton, 
            TweenInfo.new(0.3, Enum.EasingStyle.Quart),
            {BackgroundColor3 = targetColor}
        ):Play()
        
        ToggleButton.Text = targetText
        
        if callback then
            pcall(callback, self.Value)
        end
    end
    
    Storage:AddConnection(ToggleButton.MouseButton1Click:Connect(function()
        Toggle.Value = not Toggle.Value
        Toggle:Update()
    end))
    
    function Toggle:SetValue(value)
        self.Value = value
        self:Update()
    end
    
    function Toggle:GetValue()
        return self.Value
    end
    
    -- Initialize
    Toggle:Update()
    
    return Toggle
end

-- Slider Element
function Library:CreateSlider(tab, text, min, max, default, callback)
    local Slider = {}
    Slider.Min = min or 0
    Slider.Max = max or 100
    Slider.Value = default or min or 0
    
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = text .. "_Slider"
    SliderFrame.Size = UDim2.new(0.95, 0, 0, 60)
    SliderFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    SliderFrame.BorderSizePixel = 0
    SliderFrame.Parent = tab.Frame
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(0, 8)
    SliderCorner.Parent = SliderFrame
    
    local SliderLabel = Instance.new("TextLabel")
    SliderLabel.Size = UDim2.new(0.6, 0, 0.4, 0)
    SliderLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
    SliderLabel.BackgroundTransparency = 1
    SliderLabel.Text = text
    SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.TextScaled = true
    SliderLabel.Font = Enum.Font.Gotham
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    SliderLabel.Parent = SliderFrame
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Size = UDim2.new(0.3, 0, 0.4, 0)
    ValueLabel.Position = UDim2.new(0.65, 0, 0.1, 0)
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Text = tostring(Slider.Value)
    ValueLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
    ValueLabel.TextScaled = true
    ValueLabel.Font = Enum.Font.GothamBold
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = SliderFrame
    
    local SliderTrack = Instance.new("Frame")
    SliderTrack.Size = UDim2.new(0.9, 0, 0.15, 0)
    SliderTrack.Position = UDim2.new(0.05, 0, 0.7, 0)
    SliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    SliderTrack.BorderSizePixel = 0
    SliderTrack.Parent = SliderFrame
    
    local TrackCorner = Instance.new("UICorner")
    TrackCorner.CornerRadius = UDim.new(1, 0)
    TrackCorner.Parent = SliderTrack
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new(0, 0, 1, 0)
    SliderFill.Position = UDim2.new(0, 0, 0, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderTrack
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(1, 0)
    FillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(0, 20, 0, 20)
    SliderButton.Position = UDim2.new(0, -10, 0, -5)
    SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SliderButton.Text = ""
    SliderButton.BorderSizePixel = 0
    SliderButton.Parent = SliderFill
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(1, 0)
    ButtonCorner.Parent = SliderButton
    
    local dragging = false
    
    function Slider:Update()
        local percent = (self.Value - self.Min) / (self.Max - self.Min)
        percent = math.clamp(percent, 0, 1)
        
        TweenService:Create(SliderFill, 
            TweenInfo.new(0.2, Enum.EasingStyle.Quart),
            {Size = UDim2.new(percent, 0, 1, 0)}
        ):Play()
        
        ValueLabel.Text = tostring(math.floor(self.Value))
        
        if callback then
            pcall(callback, self.Value)
        end
    end
    
    local function updateSlider(input)
        local percent = math.clamp((input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X, 0, 1)
        Slider.Value = Slider.Min + (Slider.Max - Slider.Min) * percent
        Slider:Update()
    end
    
    Storage:AddConnection(SliderButton.MouseButton1Down:Connect(function()
        dragging = true
    end))
    
    Storage:AddConnection(UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end))
    
    Storage:AddConnection(UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end))
    
    Storage:AddConnection(SliderTrack.MouseButton1Down:Connect(function()
        updateSlider(UserInputService:GetMouseLocation())
    end))
    
    function Slider:SetValue(value)
        self.Value = math.clamp(value, self.Min, self.Max)
        self:Update()
    end
    
    function Slider:GetValue()
        return self.Value
    end
    
    -- Initialize
    Slider:Update()
    
    return Slider
end

-- Dropdown Element
function Library:CreateDropdown(tab, text, options, default, callback)
    local Dropdown = {}
    Dropdown.Options = options or {}
    Dropdown.Selected = default or (options and options[1]) or ""
    Dropdown.Open = false
    
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Name = text .. "_Dropdown"
    DropdownFrame.Size = UDim2.new(0.95, 0, 0, 40)
    DropdownFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    DropdownFrame.BorderSizePixel = 0
    DropdownFrame.Parent = tab.Frame
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 8)
    DropdownCorner.Parent = DropdownFrame
    
    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Size = UDim2.new(1, 0, 1, 0)
    DropdownButton.BackgroundTransparency = 1
    DropdownButton.Text = text .. ": " .. Dropdown.Selected
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.TextScaled = true
    DropdownButton.Font = Enum.Font.Gotham
    DropdownButton.Parent = DropdownFrame
    
    local DropdownArrow = Instance.new("TextLabel")
    DropdownArrow.Size = UDim2.new(0.1, 0, 0.6, 0)
    DropdownArrow.Position = UDim2.new(0.85, 0, 0.2, 0)
    DropdownArrow.BackgroundTransparency = 1
    DropdownArrow.Text = "▼"
    DropdownArrow.TextColor3 = Color3.fromRGB(0, 255, 255)
    DropdownArrow.TextScaled = true
    DropdownArrow.Font = Enum.Font.Gotham
    DropdownArrow.Parent = DropdownFrame
    
    local OptionsFrame = Instance.new("Frame")
    OptionsFrame.Name = "Options"
    OptionsFrame.Size = UDim2.new(1, 0, 0, 0)
    OptionsFrame.Position = UDim2.new(0, 0, 1, 2)
    OptionsFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    OptionsFrame.BorderSizePixel = 0
    OptionsFrame.Visible = false
    OptionsFrame.ZIndex = 10
    OptionsFrame.Parent = DropdownFrame
    
    local OptionsCorner = Instance.new("UICorner")
    OptionsCorner.CornerRadius = UDim.new(0, 8)
    OptionsCorner.Parent = OptionsFrame
    
    local OptionsLayout = Instance.new("UIListLayout")
    OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    OptionsLayout.Parent = OptionsFrame
    
    function Dropdown:UpdateOptions()
        -- Clear existing options
        for _, child in pairs(OptionsFrame:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
        
        -- Create new options
        for i, option in pairs(self.Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 30)
            OptionButton.BackgroundColor3 = Color3.fromRGB(30, 30, 40)
            OptionButton.Text = option
            OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            OptionButton.TextScaled = true
            OptionButton.Font = Enum.Font.Gotham
            OptionButton.BorderSizePixel = 0
            OptionButton.Parent = OptionsFrame
            
            Storage:AddConnection(OptionButton.MouseButton1Click:Connect(function()
                self.Selected = option
                DropdownButton.Text = text .. ": " .. self.Selected
                self:Close()
                
                if callback then
                    pcall(callback, option)
                end
            end))
            
            Storage:AddConnection(OptionButton.MouseEnter:Connect(function()
                TweenService:Create(OptionButton, 
                    TweenInfo.new(0.2),
                    {BackgroundColor3 = Color3.fromRGB(0, 255, 255)}
                ):Play()
                OptionButton.TextColor3 = Color3.fromRGB(0, 0, 0)
            end))
            
            Storage:AddConnection(OptionButton.MouseLeave:Connect(function()
                TweenService:Create(OptionButton, 
                    TweenInfo.new(0.2),
                    {BackgroundColor3 = Color3.fromRGB(30, 30, 40)}
                ):Play()
                OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            end))
        end
        
        OptionsFrame.Size = UDim2.new(1, 0, 0, #self.Options * 30)
    end
    
    function Dropdown:Open()
        self.Open = true
        OptionsFrame.Visible = true
        
        TweenService:Create(DropdownArrow, 
            TweenInfo.new(0.3),
            {Rotation = 180}
        ):Play()
        
        TweenService:Create(OptionsFrame, 
            TweenInfo.new(0.3, Enum.EasingStyle.Back),
            {Size = UDim2.new(1, 0, 0, #self.Options * 30)}
        ):Play()
    end
    
    function Dropdown:Close()
        self.Open = false
        
        TweenService:Create(DropdownArrow, 
            TweenInfo.new(0.3),
            {Rotation = 0}
        ):Play()
        
        TweenService:Create(OptionsFrame, 
            TweenInfo.new(0.3, Enum.EasingStyle.Back),
            {Size = UDim2.new(1, 0, 0, 0)}
        ):Play()
        
        wait(0.3)
        OptionsFrame.Visible = false
    end
    
    Storage:AddConnection(DropdownButton.MouseButton1Click:Connect(function()
        if self.Open then
            self:Close()
        else
            self:Open()
        end
    end))
    
    function Dropdown:SetOptions(newOptions)
        self.Options = newOptions
        self:UpdateOptions()
    end
    
    function Dropdown:SetSelected(option)
        self.Selected = option
        DropdownButton.Text = text .. ": " .. self.Selected
    end
    
    function Dropdown:GetSelected()
        return self.Selected
    end
    
    -- Initialize
    Dropdown:UpdateOptions()
    
    return Dropdown
end

-- Color Picker Element
function Library:CreateColorPicker(tab, text, default, callback)
    local ColorPicker = {}
    ColorPicker.Color = default or Color3.fromRGB(255, 255, 255)
    
    local ColorFrame = Instance.new("Frame")
    ColorFrame.Name = text .. "_ColorPicker"
    ColorFrame.Size = UDim2.new(0.95, 0, 0, 40)
    ColorFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    ColorFrame.BorderSizePixel = 0
    ColorFrame.Parent = tab.Frame
    
    local ColorCorner = Instance.new("UICorner")
    ColorCorner.CornerRadius = UDim.new(0, 8)
    ColorCorner.Parent = ColorFrame
    
    local ColorLabel = Instance.new("TextLabel")
    ColorLabel.Size = UDim2.new(0.7, 0, 1, 0)
    ColorLabel.Position = UDim2.new(0.05, 0, 0, 0)
    ColorLabel.BackgroundTransparency = 1
    ColorLabel.Text = text
    ColorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ColorLabel.TextScaled = true
    ColorLabel.Font = Enum.Font.Gotham
    ColorLabel.TextXAlignment = Enum.TextXAlignment.Left
    ColorLabel.Parent = ColorFrame
    
    local ColorPreview = Instance.new("Frame")
    ColorPreview.Size = UDim2.new(0.2, 0, 0.7, 0)
    ColorPreview.Position = UDim2.new(0.75, 0, 0.15, 0)
    ColorPreview.BackgroundColor3 = ColorPicker.Color
    ColorPreview.BorderSizePixel = 0
    ColorPreview.Parent = ColorFrame
    
    local PreviewCorner = Instance.new("UICorner")
    PreviewCorner.CornerRadius = UDim.new(0, 5)
    PreviewCorner.Parent = ColorPreview
    
    local ColorButton = Instance.new("TextButton")
    ColorButton.Size = UDim2.new(1, 0, 1, 0)
    ColorButton.BackgroundTransparency = 1
    ColorButton.Text = ""
    ColorButton.Parent = ColorPreview
    
    -- Simple color picker (cycles through preset colors)
    local presetColors = {
        Color3.fromRGB(255, 0, 0),    -- Red
        Color3.fromRGB(0, 255, 0),    -- Green
        Color3.fromRGB(0, 0, 255),    -- Blue
        Color3.fromRGB(255, 255, 0),  -- Yellow
        Color3.fromRGB(255, 0, 255),  -- Magenta
        Color3.fromRGB(0, 255, 255),  -- Cyan
        Color3.fromRGB(255, 255, 255), -- White
        Color3.fromRGB(0, 0, 0),      -- Black
        Color3.fromRGB(255, 165, 0),  -- Orange
        Color3.fromRGB(128, 0, 128)   -- Purple
    }
    
    local currentIndex = 1
    
    Storage:AddConnection(ColorButton.MouseButton1Click:Connect(function()
        currentIndex = currentIndex % #presetColors + 1
        ColorPicker.Color = presetColors[currentIndex]
        
        TweenService:Create(ColorPreview, 
            TweenInfo.new(0.3),
            {BackgroundColor3 = ColorPicker.Color}
        ):Play()
        
        if callback then
            pcall(callback, ColorPicker.Color)
        end
    end))
    
    function ColorPicker:SetColor(color)
        self.Color = color
        ColorPreview.BackgroundColor3 = color
    end
    
    function ColorPicker:GetColor()
        return self.Color
    end
    
    return ColorPicker
end

-- Textbox Element
function Library:CreateTextbox(tab, text, placeholder, callback)
    local Textbox = {}
    Textbox.Value = ""
    
    local TextboxFrame = Instance.new("Frame")
    TextboxFrame.Name = text .. "_Textbox"
    TextboxFrame.Size = UDim2.new(0.95, 0, 0, 40)
    TextboxFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    TextboxFrame.BorderSizePixel = 0
    TextboxFrame.Parent = tab.Frame
    
    local TextboxCorner = Instance.new("UICorner")
    TextboxCorner.CornerRadius = UDim.new(0, 8)
    TextboxCorner.Parent = TextboxFrame
    
    local TextboxLabel = Instance.new("TextLabel")
    TextboxLabel.Size = UDim2.new(0.3, 0, 1, 0)
    TextboxLabel.Position = UDim2.new(0.05, 0, 0, 0)
    TextboxLabel.BackgroundTransparency = 1
    TextboxLabel.Text = text
    TextboxLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextboxLabel.TextScaled = true
    TextboxLabel.Font = Enum.Font.Gotham
    TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextboxLabel.Parent = TextboxFrame
    
    local TextboxInput = Instance.new("TextBox")
    TextboxInput.Size = UDim2.new(0.6, 0, 0.8, 0)
    TextboxInput.Position = UDim2.new(0.35, 0, 0.1, 0)
    TextboxInput.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    TextboxInput.Text = ""
    TextboxInput.PlaceholderText = placeholder or "Enter text..."
    TextboxInput.TextColor3 = Color3.fromRGB(255, 255, 255)
    TextboxInput.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    TextboxInput.TextScaled = true
    TextboxInput.Font = Enum.Font.Gotham
    TextboxInput.BorderSizePixel = 0
    TextboxInput.Parent = TextboxFrame
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 5)
    InputCorner.Parent = TextboxInput
    
    Storage:AddConnection(TextboxInput.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            Textbox.Value = TextboxInput.Text
            if callback then
                pcall(callback, Textbox.Value)
            end
        end
    end))
    
    function Textbox:SetText(text)
        self.Value = text
        TextboxInput.Text = text
    end
    
    function Textbox:GetText()
        return self.Value
    end
    
    return Textbox
end

-- Keybind Element
function Library:CreateKeybind(tab, text, defaultKey, callback)
    local Keybind = {}
    Keybind.Key = defaultKey or Enum.KeyCode.F
    Keybind.Listening = false
    
    local KeybindFrame = Instance.new("Frame")
    KeybindFrame.Name = text .. "_Keybind"
    KeybindFrame.Size = UDim2.new(0.95, 0, 0, 40)
    KeybindFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    KeybindFrame.BorderSizePixel = 0
    KeybindFrame.Parent = tab.Frame
    
    local KeybindCorner = Instance.new("UICorner")
    KeybindCorner.CornerRadius = UDim.new(0, 8)
    KeybindCorner.Parent = KeybindFrame
    
    local KeybindLabel = Instance.new("TextLabel")
    KeybindLabel.Size = UDim2.new(0.6, 0, 1, 0)
    KeybindLabel.Position = UDim2.new(0.05, 0, 0, 0)
    KeybindLabel.BackgroundTransparency = 1
    KeybindLabel.Text = text
    KeybindLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeybindLabel.TextScaled = true
    KeybindLabel.Font = Enum.Font.Gotham
    KeybindLabel.TextXAlignment = Enum.TextXAlignment.Left
    KeybindLabel.Parent = KeybindFrame
    
    local KeybindButton = Instance.new("TextButton")
    KeybindButton.Size = UDim2.new(0.3, 0, 0.7, 0)
    KeybindButton.Position = UDim2.new(0.65, 0, 0.15, 0)
    KeybindButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    KeybindButton.Text = Keybind.Key.Name
    KeybindButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    KeybindButton.TextScaled = true
    KeybindButton.Font = Enum.Font.GothamBold
    KeybindButton.BorderSizePixel = 0
    KeybindButton.Parent = KeybindFrame
    
    local KeyButtonCorner = Instance.new("UICorner")
    KeyButtonCorner.CornerRadius = UDim.new(0, 5)
    KeyButtonCorner.Parent = KeybindButton
    
    Storage:AddConnection(KeybindButton.MouseButton1Click:Connect(function()
        if not Keybind.Listening then
            Keybind.Listening = true
            KeybindButton.Text = "..."
            KeybindButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
        end
    end))
    
    Storage:AddConnection(UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if Keybind.Listening then
            if input.UserInputType == Enum.UserInputType.Keyboard then
                Keybind.Key = input.KeyCode
                KeybindButton.Text = Keybind.Key.Name
                KeybindButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
                Keybind.Listening = false
            end
        else
            if input.KeyCode == Keybind.Key then
                if callback then
                    pcall(callback)
                end
            end
        end
    end))
    
    function Keybind:SetKey(key)
        self.Key = key
        KeybindButton.Text = key.Name
    end
    
    function Keybind:GetKey()
        return self.Key
    end
    
    return Keybind
end

-- Control Functions
Storage:AddConnection(CloseBtn.MouseButton1Click:Connect(function()
    -- Close animation
    TweenService:Create(MainFrame, 
        TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In),
        {Size = UDim2.new(0, 0, 0, 0)}
    ):Play()
    
    wait(0.5)
    Storage:Cleanup()
    if MainPart then
        MainPart:Destroy()
    end
end))

Storage:AddConnection(MinimizeBtn.MouseButton1Click:Connect(function()
    local isMinimized = ContentFrame.Visible
    ContentFrame.Visible = not isMinimized
    
    local targetSize = isMinimized and UDim2.new(0.95, 0, 0.15, 0) or UDim2.new(0.95, 0, 0.9, 0)
    
    TweenService:Create(Background, 
        TweenInfo.new(0.3, Enum.EasingStyle.Quart),
        {Size = targetSize}
    ):Play()
    
    MinimizeBtn.Text = isMinimized and "□" or "−"
end))

-- Notification System
function Library:Notify(title, text, duration)
    duration = duration or 3
    
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Size = UDim2.new(0, 300, 0, 80)
    NotificationFrame.Position = UDim2.new(1, 10, 0, 50)
    NotificationFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.Parent = Player.PlayerGui
    
    local NotifCorner = Instance.new("UICorner")
    NotifCorner.CornerRadius = UDim.new(0, 10)
    NotifCorner.Parent = NotificationFrame
    
    local NotifTitle = Instance.new("TextLabel")
    NotifTitle.Size = UDim2.new(1, -20, 0.4, 0)
    NotifTitle.Position = UDim2.new(0, 10, 0, 5)
    NotifTitle.BackgroundTransparency = 1
    NotifTitle.Text = title
    NotifTitle.TextColor3 = Color3.fromRGB(0, 255, 255)
    NotifTitle.TextScaled = true
    NotifTitle.Font = Enum.Font.GothamBold
    NotifTitle.TextXAlignment = Enum.TextXAlignment.Left
    NotifTitle.Parent = NotificationFrame
    
    local NotifText = Instance.new("TextLabel")
    NotifText.Size = UDim2.new(1, -20, 0.5, 0)
    NotifText.Position = UDim2.new(0, 10, 0.4, 0)
    NotifText.BackgroundTransparency = 1
    NotifText.Text = text
    NotifText.TextColor3 = Color3.fromRGB(255, 255, 255)
    NotifText.TextScaled = true
    NotifText.Font = Enum.Font.Gotham
    NotifText.TextXAlignment = Enum.TextXAlignment.Left
    NotifText.TextWrapped = true
    NotifText.Parent = NotificationFrame
    
    -- Slide in
    TweenService:Create(NotificationFrame, 
        TweenInfo.new(0.5, Enum.EasingStyle.Back),
        {Position = UDim2.new(1, -310, 0, 50)}
    ):Play()
    
    -- Slide out after duration
    wait(duration)
    TweenService:Create(NotificationFrame, 
        TweenInfo.new(0.5, Enum.EasingStyle.Back),
        {Position = UDim2.new(1, 10, 0, 50)}
    ):Play()
    
    wait(0.5)
    NotificationFrame:Destroy()
end

-- Initialize with welcome message
spawn(function()
    wait(1)
    Library:Notify("🐕 DOGHUB", "Successfully loaded! Welcome to the future of UI.", 4)
end)

-- Return the library
DOGHUB.Library = Library
return Library
