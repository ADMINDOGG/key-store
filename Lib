-- Roblox GUI Library
local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Library Functions
function Library:CreateWindow(config)
    config = config or {}
    local window = {
        Title = config.Title or "Game Menu",
        Size = config.Size or {600, 400},
        Position = config.Position or {0.5, 0.5},
        ToggleKey = config.ToggleKey or Enum.KeyCode.Insert,
        Tabs = {},
        Elements = {},
        Callbacks = {}
    }
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "LibraryGUI_" .. math.random(1000, 9999)
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, window.Size[1], 0, window.Size[2])
    mainFrame.Position = UDim2.new(window.Position[1], -window.Size[1]/2, window.Position[2], -window.Size[2]/2)
    mainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = mainFrame
    
    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 30)
    titleBar.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = titleBar
    
    local titleText = Instance.new("TextLabel")
    titleText.Size = UDim2.new(1, -60, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = window.Title
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.TextSize = 14
    titleText.Font = Enum.Font.GothamBold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.Position = UDim2.new(1, -30, 0, 2.5)
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 65, 65)
    closeButton.BorderSizePixel = 0
    closeButton.Text = "X"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextSize = 12
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 4)
    closeCorner.Parent = closeButton
    
    -- Tab Frame
    local tabFrame = Instance.new("Frame")
    tabFrame.Size = UDim2.new(0, 120, 1, -35)
    tabFrame.Position = UDim2.new(0, 5, 0, 35)
    tabFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabFrame.BorderSizePixel = 0
    tabFrame.Parent = mainFrame
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tabFrame
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.Parent = tabFrame
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingTop = UDim.new(0, 10)
    tabPadding.PaddingLeft = UDim.new(0, 10)
    tabPadding.PaddingRight = UDim.new(0, 10)
    tabPadding.Parent = tabFrame
    
    -- Content Frame
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -135, 1, -35)
    contentFrame.Position = UDim2.new(0, 130, 0, 35)
    contentFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame
    
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 6)
    contentCorner.Parent = contentFrame
    
    -- Store references
    window.ScreenGui = screenGui
    window.MainFrame = mainFrame
    window.TabFrame = tabFrame
    window.ContentFrame = contentFrame
    window.CurrentTab = nil
    
    -- Close functionality
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    -- Toggle functionality
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == window.ToggleKey then
            screenGui.Enabled = not screenGui.Enabled
        end
    end)
    
    -- Window methods
    function window:CreateTab(config)
        config = config or {}
        local tab = {
            Name = config.Name or "Tab",
            Icon = config.Icon or nil,
            Elements = {},
            Window = self
        }
        
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tab.Name .. "Tab"
        tabButton.Size = UDim2.new(1, 0, 0, 30)
        tabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        tabButton.BorderSizePixel = 0
        tabButton.Text = tab.Name
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.TextSize = 12
        tabButton.Font = Enum.Font.Gotham
        tabButton.LayoutOrder = #self.Tabs + 1
        tabButton.Parent = self.TabFrame
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 4)
        tabCorner.Parent = tabButton
        
        -- Content scroll for this tab
        local contentScroll = Instance.new("ScrollingFrame")
        contentScroll.Name = tab.Name .. "Content"
        contentScroll.Size = UDim2.new(1, -20, 1, -20)
        contentScroll.Position = UDim2.new(0, 10, 0, 10)
        contentScroll.BackgroundTransparency = 1
        contentScroll.BorderSizePixel = 0
        contentScroll.ScrollBarThickness = 6
        contentScroll.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
        contentScroll.Visible = false
        contentScroll.Parent = self.ContentFrame
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 10)
        contentLayout.Parent = contentScroll
        
        tab.TabButton = tabButton
        tab.ContentScroll = contentScroll
        tab.ContentLayout = contentLayout
        
        -- Tab selection
        tabButton.MouseButton1Click:Connect(function()
            self:SelectTab(tab)
        end)
        
        -- Tab methods
        function tab:CreateSection(name)
            local section = Instance.new("TextLabel")
            section.Name = name .. "Section"
            section.Size = UDim2.new(1, 0, 0, 25)
            section.BackgroundTransparency = 1
            section.Text = name
            section.TextColor3 = Color3.fromRGB(255, 255, 255)
            section.TextSize = 16
            section.Font = Enum.Font.GothamBold
            section.TextXAlignment = Enum.TextXAlignment.Left
            section.LayoutOrder = #self.Elements + 1
            section.Parent = self.ContentScroll
            
            table.insert(self.Elements, section)
            self:UpdateCanvasSize()
            return section
        end
        
        function tab:CreateToggle(config)
            config = config or {}
            local toggle = {
                Name = config.Name or "Toggle",
                Default = config.Default or false,
                Callback = config.Callback or function() end
            }
            
            local container = Instance.new("Frame")
            container.Name = toggle.Name .. "Container"
            container.Size = UDim2.new(1, 0, 0, 25)
            container.BackgroundTransparency = 1
            container.LayoutOrder = #self.Elements + 1
            container.Parent = self.ContentScroll
            
            local checkbox = Instance.new("TextButton")
            checkbox.Size = UDim2.new(0, 20, 0, 20)
            checkbox.Position = UDim2.new(0, 0, 0, 2.5)
            checkbox.BackgroundColor3 = toggle.Default and Color3.fromRGB(0, 180, 120) or Color3.fromRGB(60, 60, 60)
            checkbox.BorderSizePixel = 0
            checkbox.Text = toggle.Default and "✓" or ""
            checkbox.TextColor3 = Color3.fromRGB(255, 255, 255)
            checkbox.TextSize = 14
            checkbox.Font = Enum.Font.GothamBold
            checkbox.Parent = container
            
            local checkboxCorner = Instance.new("UICorner")
            checkboxCorner.CornerRadius = UDim.new(0, 3)
            checkboxCorner.Parent = checkbox
            
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, -30, 1, 0)
            label.Position = UDim2.new(0, 30, 0, 0)
            label.BackgroundTransparency = 1
            label.Text = toggle.Name
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextSize = 12
            label.Font = Enum.Font.Gotham
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container
            
            toggle.Value = toggle.Default
            
            checkbox.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                checkbox.BackgroundColor3 = toggle.Value and Color3.fromRGB(0, 180, 120) or Color3.fromRGB(60, 60, 60)
                checkbox.Text = toggle.Value and "✓" or ""
                toggle.Callback(toggle.Value)
            end)
            
            table.insert(self.Elements, container)
            self:UpdateCanvasSize()
            return toggle
        end
        
        function tab:CreateSlider(config)
            config = config or {}
            local slider = {
                Name = config.Name or "Slider",
                Min = config.Min or 0,
                Max = config.Max or 100,
                Default = config.Default or 50,
                Callback = config.Callback or function() end
            }
            
            local container = Instance.new("Frame")
            container.Name = slider.Name .. "Container"
            container.Size = UDim2.new(1, 0, 0, 45)
            container.BackgroundTransparency = 1
            container.LayoutOrder = #self.Elements + 1
            container.Parent = self.ContentScroll
            
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.6, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.Text = slider.Name
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextSize = 12
            label.Font = Enum.Font.Gotham
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = container
            
            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0.4, 0, 0, 20)
            valueLabel.Position = UDim2.new(0.6, 0, 0, 0)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(slider.Default)
            valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            valueLabel.TextSize = 12
            valueLabel.Font = Enum.Font.Gotham
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right
            valueLabel.Parent = container
            
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(1, 0, 0, 20)
            sliderFrame.Position = UDim2.new(0, 0, 0, 25)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            sliderFrame.BorderSizePixel = 0
            sliderFrame.Parent = container
            
            local sliderCorner = Instance.new("UICorner")
            sliderCorner.CornerRadius = UDim.new(0, 10)
            sliderCorner.Parent = sliderFrame
            
            local sliderFill = Instance.new("Frame")
            sliderFill.Size = UDim2.new((slider.Default - slider.Min) / (slider.Max - slider.Min), 0, 1, 0)
            sliderFill.BackgroundColor3 = Color3.fromRGB(0, 180, 120)
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderFrame
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.CornerRadius = UDim.new(0, 10)
            fillCorner.Parent = sliderFill
            
            slider.Value = slider.Default
            
            local dragging = false
            sliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local mouse = UserInputService:GetMouseLocation()
                    local sliderPos = sliderFrame.AbsolutePosition
                    local sliderSize = sliderFrame.AbsoluteSize
                    local relativeX = math.max(0, math.min(1, (mouse.X - sliderPos.X) / sliderSize.X))
                    
                    slider.Value = math.floor(slider.Min + (relativeX * (slider.Max - slider.Min)))
                    sliderFill.Size = UDim2.new(relativeX, 0, 1, 0)
                    valueLabel.Text = tostring(slider.Value)
                    slider.Callback(slider.Value)
                end
            end)
            
            table.insert(self.Elements, container)
            self:UpdateCanvasSize()
            return slider
        end
        
        function tab:CreateButton(config)
            config = config or {}
            local button = {
                Name = config.Name or "Button",
                Callback = config.Callback or function() end
            }
            
            local buttonElement = Instance.new("TextButton")
            buttonElement.Name = button.Name .. "Button"
            buttonElement.Size = UDim2.new(0, 120, 0, 30)
            buttonElement.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
            buttonElement.BorderSizePixel = 0
            buttonElement.Text = button.Name
            buttonElement.TextColor3 = Color3.fromRGB(255, 255, 255)
            buttonElement.TextSize = 12
            buttonElement.Font = Enum.Font.Gotham
            buttonElement.LayoutOrder = #self.Elements + 1
            buttonElement.Parent = self.ContentScroll
            
            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 4)
            buttonCorner.Parent = buttonElement
            
            buttonElement.MouseButton1Click:Connect(function()
                button.Callback()
            end)
            
            table.insert(self.Elements, buttonElement)
            self:UpdateCanvasSize()
            return button
        end
        
        function tab:CreateLabel(config)
            config = config or {}
            local label = {
                Text = config.Text or "Label"
            }
            
            local labelElement = Instance.new("TextLabel")
            labelElement.Name = "Label"
            labelElement.Size = UDim2.new(1, 0, 0, 20)
            labelElement.BackgroundTransparency = 1
            labelElement.Text = label.Text
            labelElement.TextColor3 = Color3.fromRGB(150, 150, 150)
            labelElement.TextSize = 10
            labelElement.Font = Enum.Font.Gotham
            labelElement.TextXAlignment = Enum.TextXAlignment.Left
            labelElement.LayoutOrder = #self.Elements + 1
            labelElement.Parent = self.ContentScroll
            
            function label:SetText(newText)
                self.Text = newText
                labelElement.Text = newText
            end
            
            table.insert(self.Elements, labelElement)
            self:UpdateCanvasSize()
            return label
        end
        
        function tab:UpdateCanvasSize()
            wait()
            self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y)
        end
        
        table.insert(self.Tabs, tab)
        
        -- Auto-select first tab
        if #self.Tabs == 1 then
            self:SelectTab(tab)
        end
        
        return tab
    end
    
    function window:SelectTab(tab)
        -- Hide all content
        for _, child in pairs(self.ContentFrame:GetChildren()) do
            if child:IsA("ScrollingFrame") then
                child.Visible = false
            end
        end
        
        -- Update tab colors
        for _, t in pairs(self.Tabs) do
            if t == tab then
                t.TabButton.BackgroundColor3 = Color3.fromRGB(0, 180, 120)
                t.ContentScroll.Visible = true
            else
                t.TabButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            end
        end
        
        self.CurrentTab = tab
    end
    
    function window:Destroy()
        self.ScreenGui:Destroy()
    end
    
    return window
end

return Library
