-- Fixed Complete Premium GUI Library - Enhanced Version with Float Button -----
local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Theme Colors
local Theme = {
    Background = Color3.fromRGB(25, 25, 35),
    Surface = Color3.fromRGB(35, 35, 45),
    Primary = Color3.fromRGB(138, 43, 226),
    Secondary = Color3.fromRGB(75, 0, 130),
    Accent = Color3.fromRGB(255, 20, 147),
    Text = Color3.fromRGB(255, 255, 255),
    TextDim = Color3.fromRGB(180, 180, 200),
    Success = Color3.fromRGB(46, 204, 113),
    Warning = Color3.fromRGB(241, 196, 15),
    Error = Color3.fromRGB(231, 76, 60),
    Border = Color3.fromRGB(60, 60, 75),
    Hover = Color3.fromRGB(45, 45, 55),
    FloatButton = Color3.fromRGB(138, 43, 226)
}

-- Animation Settings
local AnimationSpeed = 0.3

-- Settings
local Settings = {
    ToggleKey = Enum.KeyCode.Insert,
    FloatButtonEnabled = true,
    FloatButtonPosition = {0.95, 0.1}, -- {X, Y} as percentage
    FloatButtonSize = 50
}

-- Key Names for UI
local KeyNames = {
    [Enum.KeyCode.Insert] = "Insert",
    [Enum.KeyCode.Home] = "Home",
    [Enum.KeyCode.End] = "End",
    [Enum.KeyCode.PageUp] = "Page Up",
    [Enum.KeyCode.PageDown] = "Page Down",
    [Enum.KeyCode.Delete] = "Delete",
    [Enum.KeyCode.F1] = "F1",
    [Enum.KeyCode.F2] = "F2",
    [Enum.KeyCode.F3] = "F3",
    [Enum.KeyCode.F4] = "F4",
    [Enum.KeyCode.F5] = "F5",
    [Enum.KeyCode.F6] = "F6",
    [Enum.KeyCode.F7] = "F7",
    [Enum.KeyCode.F8] = "F8",
    [Enum.KeyCode.F9] = "F9",
    [Enum.KeyCode.F10] = "F10",
    [Enum.KeyCode.F11] = "F11",
    [Enum.KeyCode.F12] = "F12",
    [Enum.KeyCode.Tab] = "Tab",
    [Enum.KeyCode.BackSlash] = "\\",
    [Enum.KeyCode.Minus] = "-",
    [Enum.KeyCode.Equals] = "=",
    [Enum.KeyCode.RightBracket] = "]",
    [Enum.KeyCode.LeftBracket] = "[",
    [Enum.KeyCode.Semicolon] = ";",
    [Enum.KeyCode.Quote] = "'",
    [Enum.KeyCode.Comma] = ",",
    [Enum.KeyCode.Period] = ".",
    [Enum.KeyCode.Slash] = "/",
    [Enum.KeyCode.Tilde] = "~"
}

-- Utility Functions
local function CreateTween(object, properties, duration)
    duration = duration or AnimationSpeed
    local tween = TweenService:Create(object, TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), properties)
    return tween
end

local function CreateGradient(parent, colors, rotation)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new(colors)
    gradient.Rotation = rotation or 0
    gradient.Parent = parent
    return gradient
end

local function RippleEffect(button)
    local ripple = Instance.new("Frame")
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = Theme.Text
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.ZIndex = button.ZIndex + 1
    ripple.Parent = button
    
    local rippleCorner = Instance.new("UICorner")
    rippleCorner.CornerRadius = UDim.new(1, 0)
    rippleCorner.Parent = ripple
    
    local expandTween = CreateTween(ripple, {
        Size = UDim2.new(0, math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2, 0, math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2),
        BackgroundTransparency = 1
    }, 0.5)
    expandTween:Play()
    expandTween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

-- Float Button Creation
local function CreateFloatButton(window)
    local floatGui = Instance.new("ScreenGui")
    floatGui.Name = "FloatButton_" .. math.random(1000, 9999)
    floatGui.Parent = playerGui
    floatGui.ResetOnSpawn = false
    floatGui.IgnoreGuiInset = true
    floatGui.DisplayOrder = 1000
    
    local floatButton = Instance.new("TextButton")
    floatButton.Name = "FloatButton"
    floatButton.Size = UDim2.new(0, Settings.FloatButtonSize, 0, Settings.FloatButtonSize)
    floatButton.Position = UDim2.new(Settings.FloatButtonPosition[1], -Settings.FloatButtonSize/2, Settings.FloatButtonPosition[2], -Settings.FloatButtonSize/2)
    floatButton.BackgroundColor3 = Theme.FloatButton
    floatButton.BackgroundTransparency = 0.3
    floatButton.BorderSizePixel = 0
    floatButton.Text = "⚙️"
    floatButton.TextColor3 = Theme.Text
    floatButton.TextSize = 20
    floatButton.Font = Enum.Font.GothamBold
    floatButton.ZIndex = 10
    floatButton.Parent = floatGui
    
    local floatCorner = Instance.new("UICorner")
    floatCorner.CornerRadius = UDim.new(1, 0)
    floatCorner.Parent = floatButton
    
    local floatStroke = Instance.new("UIStroke")
    floatStroke.Color = Theme.Primary
    floatStroke.Thickness = 2
    floatStroke.Transparency = 0.5
    floatStroke.Parent = floatButton
    
    -- Float button animations
    local pulseAnimation = CreateTween(floatButton, {
        BackgroundTransparency = 0.1,
        Size = UDim2.new(0, Settings.FloatButtonSize + 5, 0, Settings.FloatButtonSize + 5)
    }, 1)
    pulseAnimation.Completed:Connect(function()
        local reversePulse = CreateTween(floatButton, {
            BackgroundTransparency = 0.3,
            Size = UDim2.new(0, Settings.FloatButtonSize, 0, Settings.FloatButtonSize)
        }, 1)
        reversePulse:Play()
        reversePulse.Completed:Connect(function()
            if floatButton.Parent then
                pulseAnimation:Play()
            end
        end)
    end)
    pulseAnimation:Play()
    
    -- Float button hover effects
    floatButton.MouseEnter:Connect(function()
        CreateTween(floatButton, {
            BackgroundTransparency = 0.1,
            Size = UDim2.new(0, Settings.FloatButtonSize + 8, 0, Settings.FloatButtonSize + 8)
        }, 0.2):Play()
        CreateTween(floatStroke, {Transparency = 0.2}, 0.2):Play()
    end)
    
    floatButton.MouseLeave:Connect(function()
        CreateTween(floatButton, {
            BackgroundTransparency = 0.3,
            Size = UDim2.new(0, Settings.FloatButtonSize, 0, Settings.FloatButtonSize)
        }, 0.2):Play()
        CreateTween(floatStroke, {Transparency = 0.5}, 0.2):Play()
    end)
    
    -- Float button click
    floatButton.MouseButton1Click:Connect(function()
        RippleEffect(floatButton)
        window.ScreenGui.Enabled = not window.ScreenGui.Enabled
    end)
    
    -- Float button dragging
    local floatDragging = false
    local floatDragStart = nil
    local floatStartPos = nil
    
    floatButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            floatDragging = true
            floatDragStart = input.Position
            floatStartPos = floatButton.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and floatDragging then
            local delta = input.Position - floatDragStart
            local newPosX = floatStartPos.X.Offset + delta.X
            local newPosY = floatStartPos.Y.Offset + delta.Y
            
            -- Keep within screen bounds
            local maxX = floatButton.Parent.AbsoluteSize.X - Settings.FloatButtonSize
            local maxY = floatButton.Parent.AbsoluteSize.Y - Settings.FloatButtonSize
            
            newPosX = math.max(0, math.min(newPosX, maxX))
            newPosY = math.max(0, math.min(newPosY, maxY))
            
            floatButton.Position = UDim2.new(0, newPosX, 0, newPosY)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            floatDragging = false
            -- Update settings position
            Settings.FloatButtonPosition = {
                floatButton.Position.X.Offset / floatButton.Parent.AbsoluteSize.X,
                floatButton.Position.Y.Offset / floatButton.Parent.AbsoluteSize.Y
            }
        end
    end)
    
    window.FloatGui = floatGui
    window.FloatButton = floatButton
    
    -- Hide float button when main window is visible
    local function updateFloatButtonVisibility()
        if window.ScreenGui.Enabled then
            floatButton.Visible = false
        else
            floatButton.Visible = Settings.FloatButtonEnabled
        end
    end
    
    -- Monitor main window visibility
    window.ScreenGui:GetPropertyChangedSignal("Enabled"):Connect(updateFloatButtonVisibility)
    updateFloatButtonVisibility()
end

-- Library Functions
function Library:CreateWindow(config)
    config = config or {}
    local window = {
        Title = config.Title or "Premium Menu",
        Size = config.Size or {700, 500},
        Position = config.Position or {0.5, 0.5},
        ToggleKey = config.ToggleKey or Settings.ToggleKey,
        Tabs = {},
        Elements = {},
        Callbacks = {},
        Minimized = false,
        SettingsTab = nil
    }
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PremiumLibrary_" .. math.random(1000, 9999)
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    screenGui.DisplayOrder = 999
    
    -- Background Blur
    local backgroundBlur = Instance.new("Frame")
    backgroundBlur.Name = "BackgroundBlur"
    backgroundBlur.Size = UDim2.new(1, 0, 1, 0)
    backgroundBlur.Position = UDim2.new(0, 0, 0, 0)
    backgroundBlur.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    backgroundBlur.BackgroundTransparency = 0.3
    backgroundBlur.BorderSizePixel = 0
    backgroundBlur.ZIndex = 1
    backgroundBlur.Parent = screenGui
    
    -- Main Container
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "MainContainer"
    mainContainer.Size = UDim2.new(0, window.Size[1], 0, window.Size[2])
    mainContainer.Position = UDim2.new(0.5, -window.Size[1]/2, 0.5, -window.Size[2]/2)
    mainContainer.BackgroundColor3 = Theme.Background
    mainContainer.BorderSizePixel = 0
    mainContainer.ZIndex = 2
    mainContainer.Parent = screenGui
    
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = mainContainer
    
    local mainStroke = Instance.new("UIStroke")
    mainStroke.Color = Theme.Primary
    mainStroke.Thickness = 2
    mainStroke.Transparency = 0.3
    mainStroke.Parent = mainContainer
    
    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 45)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = Theme.Surface
    titleBar.BorderSizePixel = 0
    titleBar.ZIndex = 3
    titleBar.Parent = mainContainer
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    local titleGradient = CreateGradient(titleBar, {
        ColorSequenceKeypoint.new(0, Theme.Primary),
        ColorSequenceKeypoint.new(1, Theme.Secondary)
    }, 90)
    
    -- Title Text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "TitleText"
    titleText.Size = UDim2.new(1, -150, 1, 0)
    titleText.Position = UDim2.new(0, 15, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = window.Title
    titleText.TextColor3 = Theme.Text
    titleText.TextSize = 16
    titleText.Font = Enum.Font.GothamBold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.ZIndex = 4
    titleText.Parent = titleBar
    
    -- Control Buttons Container
    local controlsContainer = Instance.new("Frame")
    controlsContainer.Name = "ControlsContainer"
    controlsContainer.Size = UDim2.new(0, 120, 0, 30)
    controlsContainer.Position = UDim2.new(1, -130, 0, 7.5)
    controlsContainer.BackgroundTransparency = 1
    controlsContainer.ZIndex = 4
    controlsContainer.Parent = titleBar
    
    local controlsLayout = Instance.new("UIListLayout")
    controlsLayout.FillDirection = Enum.FillDirection.Horizontal
    controlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    controlsLayout.Padding = UDim.new(0, 5)
    controlsLayout.Parent = controlsContainer
    
    -- Minimize Button
    local minimizeButton = Instance.new("TextButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 25, 0, 25)
    minimizeButton.BackgroundColor3 = Theme.Warning
    minimizeButton.BorderSizePixel = 0
    minimizeButton.Text = "−"
    minimizeButton.TextColor3 = Theme.Text
    minimizeButton.TextSize = 12
    minimizeButton.Font = Enum.Font.GothamBold
    minimizeButton.ZIndex = 5
    minimizeButton.Parent = controlsContainer
    
    local minimizeCorner = Instance.new("UICorner")
    minimizeCorner.CornerRadius = UDim.new(0, 6)
    minimizeCorner.Parent = minimizeButton
    
    -- Maximize Button
    local maximizeButton = Instance.new("TextButton")
    maximizeButton.Name = "MaximizeButton"
    maximizeButton.Size = UDim2.new(0, 25, 0, 25)
    maximizeButton.BackgroundColor3 = Theme.Success
    maximizeButton.BorderSizePixel = 0
    maximizeButton.Text = "□"
    maximizeButton.TextColor3 = Theme.Text
    maximizeButton.TextSize = 12
    maximizeButton.Font = Enum.Font.GothamBold
    maximizeButton.ZIndex = 5
    maximizeButton.Parent = controlsContainer
    
    local maximizeCorner = Instance.new("UICorner")
    maximizeCorner.CornerRadius = UDim.new(0, 6)
    maximizeCorner.Parent = maximizeButton
    
    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 25, 0, 25)
    closeButton.BackgroundColor3 = Theme.Error
    closeButton.BorderSizePixel = 0
    closeButton.Text = "✕"
    closeButton.TextColor3 = Theme.Text
    closeButton.TextSize = 12
    closeButton.Font = Enum.Font.GothamBold
    closeButton.ZIndex = 5
    closeButton.Parent = controlsContainer
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeButton
    
    -- Tab Navigation
    local tabNavigation = Instance.new("Frame")
    tabNavigation.Name = "TabNavigation"
    tabNavigation.Size = UDim2.new(0, 140, 1, -55)
    tabNavigation.Position = UDim2.new(0, 10, 0, 50)
    tabNavigation.BackgroundColor3 = Theme.Surface
    tabNavigation.BorderSizePixel = 0
    tabNavigation.ZIndex = 3
    tabNavigation.Parent = mainContainer
    
    local navCorner = Instance.new("UICorner")
    navCorner.CornerRadius = UDim.new(0, 10)
    navCorner.Parent = tabNavigation
    
    local navStroke = Instance.new("UIStroke")
    navStroke.Color = Theme.Border
    navStroke.Thickness = 1
    navStroke.Transparency = 0.5
    navStroke.Parent = tabNavigation
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.Parent = tabNavigation
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingTop = UDim.new(0, 10)
    tabPadding.PaddingLeft = UDim.new(0, 10)
    tabPadding.PaddingRight = UDim.new(0, 10)
    tabPadding.PaddingBottom = UDim.new(0, 10)
    tabPadding.Parent = tabNavigation
    
    -- Content Area
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.Size = UDim2.new(1, -165, 1, -55)
    contentArea.Position = UDim2.new(0, 155, 0, 50)
    contentArea.BackgroundColor3 = Theme.Surface
    contentArea.BorderSizePixel = 0
    contentArea.ZIndex = 3
    contentArea.Parent = mainContainer
    
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 10)
    contentCorner.Parent = contentArea
    
    local contentStroke = Instance.new("UIStroke")
    contentStroke.Color = Theme.Border
    contentStroke.Thickness = 1
    contentStroke.Transparency = 0.5
    contentStroke.Parent = contentArea
    
    -- Store references
    window.ScreenGui = screenGui
    window.MainContainer = mainContainer
    window.BackgroundBlur = backgroundBlur
    window.TabNavigation = tabNavigation
    window.ContentArea = contentArea
    window.CurrentTab = nil
    
    -- Create Float Button
    CreateFloatButton(window)
    
    -- Create Settings Tab
    window.SettingsTab = window:CreateTab({
        Name = "Settings",
        Icon = "⚙️"
    })
    
    -- Settings Tab Content
    window.SettingsTab:CreateSection("UI Settings")
    
    -- Toggle Key Setting
    local keySelectFrame = Instance.new("Frame")
    keySelectFrame.Name = "KeySelectFrame"
    keySelectFrame.Size = UDim2.new(1, 0, 0, 50)
    keySelectFrame.BackgroundColor3 = Theme.Background
    keySelectFrame.BorderSizePixel = 0
    keySelectFrame.LayoutOrder = #window.SettingsTab.Elements + 1
    keySelectFrame.ZIndex = 5
    keySelectFrame.Parent = window.SettingsTab.ContentScroll
    
    local keySelectCorner = Instance.new("UICorner")
    keySelectCorner.CornerRadius = UDim.new(0, 8)
    keySelectCorner.Parent = keySelectFrame
    
    local keySelectStroke = Instance.new("UIStroke")
    keySelectStroke.Color = Theme.Border
    keySelectStroke.Thickness = 1
    keySelectStroke.Transparency = 0.7
    keySelectStroke.Parent = keySelectFrame
    
    local keySelectLabel = Instance.new("TextLabel")
    keySelectLabel.Size = UDim2.new(1, -120, 1, 0)
    keySelectLabel.Position = UDim2.new(0, 10, 0, 0)
    keySelectLabel.BackgroundTransparency = 1
    keySelectLabel.Text = "Toggle Key"
    keySelectLabel.TextColor3 = Theme.Text
    keySelectLabel.TextSize = 12
    keySelectLabel.Font = Enum.Font.Gotham
    keySelectLabel.TextXAlignment = Enum.TextXAlignment.Left
    keySelectLabel.ZIndex = 6
    keySelectLabel.Parent = keySelectFrame
    
    local keySelectButton = Instance.new("TextButton")
    keySelectButton.Name = "KeySelectButton"
    keySelectButton.Size = UDim2.new(0, 100, 0, 30)
    keySelectButton.Position = UDim2.new(1, -110, 0.5, -15)
    keySelectButton.BackgroundColor3 = Theme.Primary
    keySelectButton.BorderSizePixel = 0
    keySelectButton.Text = KeyNames[Settings.ToggleKey] or "Insert"
    keySelectButton.TextColor3 = Theme.Text
    keySelectButton.TextSize = 11
    keySelectButton.Font = Enum.Font.Gotham
    keySelectButton.ZIndex = 6
    keySelectButton.Parent = keySelectFrame
    
    local keySelectButtonCorner = Instance.new("UICorner")
    keySelectButtonCorner.CornerRadius = UDim.new(0, 6)
    keySelectButtonCorner.Parent = keySelectButton
    
    local waitingForKey = false
    keySelectButton.MouseButton1Click:Connect(function()
        if not waitingForKey then
            waitingForKey = true
            keySelectButton.Text = "Press Key..."
            
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, processed)
                if not processed and input.UserInputType == Enum.UserInputType.Keyboard then
                    local keyCode = input.KeyCode
                    if KeyNames[keyCode] then
                        Settings.ToggleKey = keyCode
                        keySelectButton.Text = KeyNames[keyCode]
                        waitingForKey = false
                        connection:Disconnect()
                    end
                end
            end)
            
            -- Timeout after 5 seconds
            task.wait(5)
            if waitingForKey then
                waitingForKey = false
                keySelectButton.Text = KeyNames[Settings.ToggleKey] or "Insert"
                connection:Disconnect()
            end
        end
    end)
    
    -- Float Button Toggle
    window.SettingsTab:CreateToggle({
        Name = "Show Float Button",
        Default = Settings.FloatButtonEnabled,
        Callback = function(value)
            Settings.FloatButtonEnabled = value
            if window.FloatButton then
                if window.ScreenGui.Enabled then
                    window.FloatButton.Visible = false
                else
                    window.FloatButton.Visible = value
                end
            end
        end
    })
    
    table.insert(window.SettingsTab.Elements, keySelectFrame)
    window.SettingsTab:UpdateCanvasSize()
    
    -- Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            mainContainer.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Minimize functionality
    minimizeButton.MouseButton1Click:Connect(function()
        RippleEffect(minimizeButton)
        window.Minimized = not window.Minimized
        
        if window.Minimized then
            CreateTween(tabNavigation, {Size = UDim2.new(0, 140, 0, 0)}, 0.3):Play()
            CreateTween(contentArea, {Size = UDim2.new(1, -165, 0, 0)}, 0.3):Play()
            CreateTween(mainContainer, {Size = UDim2.new(0, window.Size[1], 0, 45)}, 0.3):Play()
            minimizeButton.Text = "+"
        else
            CreateTween(tabNavigation, {Size = UDim2.new(0, 140, 1, -55)}, 0.3):Play()
            CreateTween(contentArea, {Size = UDim2.new(1, -165, 1, -55)}, 0.3):Play()
            CreateTween(mainContainer, {Size = UDim2.new(0, window.Size[1], 0, window.Size[2])}, 0.3):Play()
            minimizeButton.Text = "−"
        end
    end)
    
    -- Maximize functionality
    maximizeButton.MouseButton1Click:Connect(function()
        RippleEffect(maximizeButton)
        -- Toggle between normal and maximized
        if mainContainer.Size.X.Offset == window.Size[1] then
            -- Maximize
            CreateTween(mainContainer, {
                Size = UDim2.new(0, 900, 0, 600),
                Position = UDim2.new(0.5, -450, 0.5, -300)
            }, 0.3):Play()
        else
            -- Restore
            CreateTween(mainContainer, {
                Size = UDim2.new(0, window.Size[1], 0, window.Size[2]),
                Position = UDim2.new(0.5, -window.Size[1]/2, 0.5, -window.Size[2]/2)
            }, 0.3):Play()
        end
    end)
    
    -- Close button functionality
    closeButton.MouseButton1Click:Connect(function()
        RippleEffect(closeButton)
        local closeTween = CreateTween(mainContainer, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.5)
        CreateTween(backgroundBlur, {BackgroundTransparency = 1}, 0.5):Play()
        closeTween:Play()
        closeTween.Completed:Connect(function()
            screenGui:Destroy()
            if window.FloatGui then
                window.FloatGui:Destroy()
            end
        end)
    end)
    
    -- Control button hover effects
    for _, button in pairs({minimizeButton, maximizeButton, closeButton}) do
        button.MouseEnter:Connect(function()
            CreateTween(button, {Size = UDim2.new(0, 27, 0, 27)}, 0.2):Play()
        end)
        
        button.MouseLeave:Connect(function()
            CreateTween(button, {Size = UDim2.new(0, 25, 0, 25)}, 0.2):Play()
        end)
    end
    
    -- Toggle functionality
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Settings.ToggleKey then
            screenGui.Enabled = not screenGui.Enabled
        end
    end)
    
    -- Window methods
    function window:SelectTab(tab)
        if self.CurrentTab then
            CreateTween(self.CurrentTab.TabButton, {BackgroundColor3 = Theme.Background}, 0.2):Play()
            CreateTween(self.CurrentTab.TabText, {TextColor3 = Theme.TextDim}, 0.2):Play()
            CreateTween(self.CurrentTab.TabIndicator, {Size = UDim2.new(0, 3, 0, 0)}, 0.2):Play()
            self.CurrentTab.ContentScroll.Visible = false
        end
        
        self.CurrentTab = tab
        CreateTween(tab.TabButton, {BackgroundColor3 = Theme.Primary}, 0.2):Play()
        CreateTween(tab.TabText, {TextColor3 = Theme.Text}, 0.2):Play()
        CreateTween(tab.TabIndicator, {Size = UDim2.new(0, 3, 0, 25)}, 0.2):Play()
        tab.ContentScroll.Visible = true
    end
    
    function window:CreateTab(config)
        config = config or {}
        local tab = {
            Name = config.Name or "Tab",
            Icon = config.Icon or "",
            Elements = {},
            Window = self
        }
        
        -- Tab Button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = tab.Name .. "Tab"
        tabButton.Size = UDim2.new(1, 0, 0, 35)
        tabButton.BackgroundColor3 = Theme.Background
        tabButton.BorderSizePixel = 0
        tabButton.Text = ""
        tabButton.LayoutOrder = #self.Tabs + 1
        tabButton.ZIndex = 4
        tabButton.Parent = self.TabNavigation
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 8)
        tabCorner.Parent = tabButton
        
        -- Tab Icon (if provided)
        if tab.Icon ~= "" then
            local tabIcon = Instance.new("TextLabel")
            tabIcon.Name = "TabIcon"
            tabIcon.Size = UDim2.new(0, 20, 0, 20)
            tabIcon.Position = UDim2.new(0, 8, 0.5, -10)
            tabIcon.BackgroundTransparency = 1
            tabIcon.Text = tab.Icon
            tabIcon.TextColor3 = Theme.TextDim
            tabIcon.TextSize = 14
            tabIcon.Font = Enum.Font.GothamBold
            tabIcon.TextXAlignment = Enum.TextXAlignment.Center
            tabIcon.ZIndex = 5
            tabIcon.Parent = tabButton
        end
        
        -- Tab Text
        local tabText = Instance.new("TextLabel")
        tabText.Name = "TabText"
        tabText.Size = UDim2.new(1, tab.Icon ~= "" and -35 or -15, 1, 0)
        tabText.Position = UDim2.new(0, tab.Icon ~= "" and 30 or 10, 0, 0)
        tabText.BackgroundTransparency = 1
        tabText.Text = tab.Name
        tabText.TextColor3 = Theme.TextDim
        tabText.TextSize = 13
        tabText.Font = Enum.Font.Gotham
        tabText.TextXAlignment = Enum.TextXAlignment.Left
        tabText.ZIndex = 5
        tabText.Parent = tabButton
        
        -- Tab Indicator
        local tabIndicator = Instance.new("Frame")
        tabIndicator.Name = "TabIndicator"
        tabIndicator.Size = UDim2.new(0, 3, 0, 0)
        tabIndicator.Position = UDim2.new(0, 0, 0.5, 0)
        tabIndicator.AnchorPoint = Vector2.new(0, 0.5)
        tabIndicator.BackgroundColor3 = Theme.Primary
        tabIndicator.BorderSizePixel = 0
        tabIndicator.ZIndex = 6
        tabIndicator.Parent = tabButton
        
        local indicatorCorner = Instance.new("UICorner")
        indicatorCorner.CornerRadius = UDim.new(0, 2)
        indicatorCorner.Parent = tabIndicator
        
        -- Content scroll for this tab
        local contentScroll = Instance.new("ScrollingFrame")
        contentScroll.Name = tab.Name .. "Content"
        contentScroll.Size = UDim2.new(1, -20, 1, -20)
        contentScroll.Position = UDim2.new(0, 10, 0, 10)
        contentScroll.BackgroundTransparency = 1
        contentScroll.BorderSizePixel = 0
        contentScroll.ScrollBarThickness = 6
        contentScroll.ScrollBarImageColor3 = Theme.Primary
        contentScroll.ScrollBarImageTransparency = 0.5
        contentScroll.ZIndex = 4
        contentScroll.Visible = false
        contentScroll.Parent = self.ContentArea
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 8)
        contentLayout.Parent = contentScroll
        
        tab.TabButton = tabButton
        tab.TabText = tabText
        tab.TabIndicator = tabIndicator
        tab.ContentScroll = contentScroll
        tab.ContentLayout = contentLayout
        
        -- Tab hover effects
        tabButton.MouseEnter:Connect(function()
            if self.CurrentTab ~= tab then
                CreateTween(tabButton, {BackgroundColor3 = Theme.Hover}, 0.2):Play()
                CreateTween(tabText, {TextColor3 = Theme.Text}, 0.2):Play()
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if self.CurrentTab ~= tab then
                CreateTween(tabButton, {BackgroundColor3 = Theme.Background}, 0.2):Play()
                CreateTween(tabText, {TextColor3 = Theme.TextDim}, 0.2):Play()
            end
        end)
        
        -- Tab selection
        tabButton.MouseButton1Click:Connect(function()
            RippleEffect(tabButton)
            self:SelectTab(tab)
        end)
        
        -- Tab methods
        function tab:UpdateCanvasSize()
            local totalHeight = 0
            for _, element in pairs(self.Elements) do
                if element.Parent and element.Visible then
                    totalHeight = totalHeight + element.Size.Y.Offset + 8
                end
            end
            self.ContentScroll.CanvasSize = UDim2.new(0, 0, 0, totalHeight + 20)
        end
        
        function tab:CreateSection(name)
            local sectionContainer = Instance.new("Frame")
            sectionContainer.Name = name .. "Section"
            sectionContainer.Size = UDim2.new(1, 0, 0, 30)
            sectionContainer.BackgroundTransparency = 1
            sectionContainer.LayoutOrder = #self.Elements + 1
            sectionContainer.ZIndex = 5
            sectionContainer.Parent = self.ContentScroll
            
            local sectionLine = Instance.new("Frame")
            sectionLine.Size = UDim2.new(0, 3, 0, 20)
            sectionLine.Position = UDim2.new(0, 0, 0, 5)
            sectionLine.BackgroundColor3 = Theme.Primary
            sectionLine.BorderSizePixel = 0
            sectionLine.ZIndex = 6
            sectionLine.Parent = sectionContainer
            
            local lineCorner = Instance.new("UICorner")
            lineCorner.CornerRadius = UDim.new(0, 2)
            lineCorner.Parent = sectionLine
            
            local sectionText = Instance.new("TextLabel")
            sectionText.Size = UDim2.new(1, -15, 1, 0)
            sectionText.Position = UDim2.new(0, 15, 0, 0)
            sectionText.BackgroundTransparency = 1
            sectionText.Text = name
            sectionText.TextColor3 = Theme.Text
            sectionText.TextSize = 14
            sectionText.Font = Enum.Font.GothamBold
            sectionText.TextXAlignment = Enum.TextXAlignment.Left
            sectionText.ZIndex = 6
            sectionText.Parent = sectionContainer
            
            table.insert(self.Elements, sectionContainer)
            self:UpdateCanvasSize()
            return sectionContainer
        end
        
        function tab:CreateToggle(config)
            config = config or {}
            local toggle = {
                Name = config.Name or "Toggle",
                Default = config.Default or false,
                Callback = config.Callback or function() end
            }
            
            local toggleContainer = Instance.new("Frame")
            toggleContainer.Name = toggle.Name .. "Container"
            toggleContainer.Size = UDim2.new(1, 0, 0, 40)
            toggleContainer.BackgroundColor3 = Theme.Background
            toggleContainer.BorderSizePixel = 0
            toggleContainer.LayoutOrder = #self.Elements + 1
            toggleContainer.ZIndex = 5
            toggleContainer.Parent = self.ContentScroll
            
            local containerCorner = Instance.new("UICorner")
            containerCorner.CornerRadius = UDim.new(0, 8)
            containerCorner.Parent = toggleContainer
            
            local containerStroke = Instance.new("UIStroke")
            containerStroke.Color = Theme.Border
            containerStroke.Thickness = 1
            containerStroke.Transparency = 0.7
            containerStroke.Parent = toggleContainer
            
            -- Toggle Switch
            local toggleSwitch = Instance.new("Frame")
            toggleSwitch.Size = UDim2.new(0, 45, 0, 22)
            toggleSwitch.Position = UDim2.new(1, -55, 0.5, -11)
            toggleSwitch.BackgroundColor3 = toggle.Default and Theme.Primary or Theme.Border
            toggleSwitch.BorderSizePixel = 0
            toggleSwitch.ZIndex = 6
            toggleSwitch.Parent = toggleContainer
            
            local switchCorner = Instance.new("UICorner")
            switchCorner.CornerRadius = UDim.new(0, 11)
            switchCorner.Parent = toggleSwitch
            
            local toggleKnob = Instance.new("Frame")
            toggleKnob.Size = UDim2.new(0, 18, 0, 18)
            toggleKnob.Position = toggle.Default and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
            toggleKnob.BackgroundColor3 = Theme.Text
            toggleKnob.BorderSizePixel = 0
            toggleKnob.ZIndex = 7
            toggleKnob.Parent = toggleSwitch
            
            local knobCorner = Instance.new("UICorner")
            knobCorner.CornerRadius = UDim.new(0, 9)
            knobCorner.Parent = toggleKnob
            
            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Size = UDim2.new(1, -65, 1, 0)
            toggleLabel.Position = UDim2.new(0, 10, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = toggle.Name
            toggleLabel.TextColor3 = Theme.Text
            toggleLabel.TextSize = 12
            toggleLabel.Font = Enum.Font.Gotham
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.ZIndex = 6
            toggleLabel.Parent = toggleContainer
            
            toggle.Value = toggle.Default
            
            local toggleButton = Instance.new("TextButton")
            toggleButton.Size = UDim2.new(1, 0, 1, 0)
            toggleButton.BackgroundTransparency = 1
            toggleButton.Text = ""
            toggleButton.ZIndex = 8
            toggleButton.Parent = toggleContainer
            
            -- Toggle functionality
            toggleButton.MouseButton1Click:Connect(function()
                toggle.Value = not toggle.Value
                
                local switchColor = toggle.Value and Theme.Primary or Theme.Border
                local knobPosition = toggle.Value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
                
                CreateTween(toggleSwitch, {BackgroundColor3 = switchColor}, 0.3):Play()
                CreateTween(toggleKnob, {Position = knobPosition}, 0.3):Play()
                
                RippleEffect(toggleSwitch)
                toggle.Callback(toggle.Value)
            end)
            
            -- Hover effects
            toggleButton.MouseEnter:Connect(function()
                CreateTween(toggleContainer, {BackgroundColor3 = Theme.Surface}, 0.2):Play()
                CreateTween(containerStroke, {Transparency = 0.4}, 0.2):Play()
            end)
            
            toggleButton.MouseLeave:Connect(function()
                CreateTween(toggleContainer, {BackgroundColor3 = Theme.Background}, 0.2):Play()
                CreateTween(containerStroke, {Transparency = 0.7}, 0.2):Play()
            end)
            
            table.insert(self.Elements, toggleContainer)
            self:UpdateCanvasSize()
            return toggle
        end
        
        function tab:CreateSlider(config)
            config = config or {}
            local slider = {
                Name = config.Name or "Slider",
                Min = config.Min or 0,
                Max = config.Max or 100,
                Default = config.Default or 50,
                Callback = config.Callback or function() end
            }
            
            local sliderContainer = Instance.new("Frame")
            sliderContainer.Name = slider.Name .. "Container"
            sliderContainer.Size = UDim2.new(1, 0, 0, 50)
            sliderContainer.BackgroundColor3 = Theme.Background
            sliderContainer.BorderSizePixel = 0
            sliderContainer.LayoutOrder = #self.Elements + 1
            sliderContainer.ZIndex = 5
            sliderContainer.Parent = self.ContentScroll
            
            local containerCorner = Instance.new("UICorner")
            containerCorner.CornerRadius = UDim.new(0, 8)
            containerCorner.Parent = sliderContainer
            
            local containerStroke = Instance.new("UIStroke")
            containerStroke.Color = Theme.Border
            containerStroke.Thickness = 1
            containerStroke.Transparency = 0.7
            containerStroke.Parent = sliderContainer
            
            local sliderLabel = Instance.new("TextLabel")
            sliderLabel.Size = UDim2.new(1, -80, 0, 20)
            sliderLabel.Position = UDim2.new(0, 10, 0, 5)
            sliderLabel.BackgroundTransparency = 1
            sliderLabel.Text = slider.Name
            sliderLabel.TextColor3 = Theme.Text
            sliderLabel.TextSize = 12
            sliderLabel.Font = Enum.Font.Gotham
            sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            sliderLabel.ZIndex = 6
            sliderLabel.Parent = sliderContainer
            
            local sliderValue = Instance.new("TextLabel")
            sliderValue.Size = UDim2.new(0, 60, 0, 20)
            sliderValue.Position = UDim2.new(1, -70, 0, 5)
            sliderValue.BackgroundTransparency = 1
            sliderValue.Text = tostring(slider.Default)
            sliderValue.TextColor3 = Theme.Primary
            sliderValue.TextSize = 12
            sliderValue.Font = Enum.Font.GothamBold
            sliderValue.TextXAlignment = Enum.TextXAlignment.Right
            sliderValue.ZIndex = 6
            sliderValue.Parent = sliderContainer
            
            local sliderTrack = Instance.new("Frame")
            sliderTrack.Size = UDim2.new(1, -20, 0, 6)
            sliderTrack.Position = UDim2.new(0, 10, 1, -15)
            sliderTrack.BackgroundColor3 = Theme.Border
            sliderTrack.BorderSizePixel = 0
            sliderTrack.ZIndex = 6
            sliderTrack.Parent = sliderContainer
            
            local trackCorner = Instance.new("UICorner")
            trackCorner.CornerRadius = UDim.new(0, 3)
            trackCorner.Parent = sliderTrack
            
            local sliderFill = Instance.new("Frame")
            sliderFill.Size = UDim2.new((slider.Default - slider.Min) / (slider.Max - slider.Min), 0, 1, 0)
            sliderFill.Position = UDim2.new(0, 0, 0, 0)
            sliderFill.BackgroundColor3 = Theme.Primary
            sliderFill.BorderSizePixel = 0
            sliderFill.ZIndex = 7
            sliderFill.Parent = sliderTrack
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.CornerRadius = UDim.new(0, 3)
            fillCorner.Parent = sliderFill
            
            local sliderKnob = Instance.new("Frame")
            sliderKnob.Size = UDim2.new(0, 14, 0, 14)
            sliderKnob.Position = UDim2.new((slider.Default - slider.Min) / (slider.Max - slider.Min), -7, 0.5, -7)
            sliderKnob.BackgroundColor3 = Theme.Text
            sliderKnob.BorderSizePixel = 0
            sliderKnob.ZIndex = 8
            sliderKnob.Parent = sliderTrack
            
            local knobCorner = Instance.new("UICorner")
            knobCorner.CornerRadius = UDim.new(0, 7)
            knobCorner.Parent = sliderKnob
            
            slider.Value = slider.Default
            
            local dragging = false
            
            local function updateSlider(input)
                local relativeX = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
                local newValue = math.round(slider.Min + (slider.Max - slider.Min) * relativeX)
                
                slider.Value = newValue
                sliderValue.Text = tostring(newValue)
                
                CreateTween(sliderFill, {Size = UDim2.new(relativeX, 0, 1, 0)}, 0.1):Play()
                CreateTween(sliderKnob, {Position = UDim2.new(relativeX, -7, 0.5, -7)}, 0.1):Play()
                
                slider.Callback(newValue)
            end
            
            sliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)
            
            -- Hover effects
            sliderContainer.MouseEnter:Connect(function()
                CreateTween(sliderContainer, {BackgroundColor3 = Theme.Surface}, 0.2):Play()
                CreateTween(containerStroke, {Transparency = 0.4}, 0.2):Play()
                CreateTween(sliderKnob, {Size = UDim2.new(0, 16, 0, 16)}, 0.2):Play()
            end)
            
            sliderContainer.MouseLeave:Connect(function()
                CreateTween(sliderContainer, {BackgroundColor3 = Theme.Background}, 0.2):Play()
                CreateTween(containerStroke, {Transparency = 0.7}, 0.2):Play()
                CreateTween(sliderKnob, {Size = UDim2.new(0, 14, 0, 14)}, 0.2):Play()
            end)
            
            table.insert(self.Elements, sliderContainer)
            self:UpdateCanvasSize()
            return slider
        end
        
        function tab:CreateButton(config)
            config = config or {}
            local button = {
                Name = config.Name or "Button",
                Callback = config.Callback or function() end
            }
            
            local buttonContainer = Instance.new("TextButton")
            buttonContainer.Name = button.Name .. "Container"
            buttonContainer.Size = UDim2.new(1, 0, 0, 35)
            buttonContainer.BackgroundColor3 = Theme.Primary
            buttonContainer.BorderSizePixel = 0
            buttonContainer.Text = button.Name
            buttonContainer.TextColor3 = Theme.Text
            buttonContainer.TextSize = 12
            buttonContainer.Font = Enum.Font.GothamBold
            buttonContainer.LayoutOrder = #self.Elements + 1
            buttonContainer.ZIndex = 5
            buttonContainer.Parent = self.ContentScroll
            
            local containerCorner = Instance.new("UICorner")
            containerCorner.CornerRadius = UDim.new(0, 8)
            containerCorner.Parent = buttonContainer
            
            local buttonGradient = CreateGradient(buttonContainer, {
                ColorSequenceKeypoint.new(0, Theme.Primary),
                ColorSequenceKeypoint.new(1, Theme.Secondary)
            }, 45)
            
            -- Button click
            buttonContainer.MouseButton1Click:Connect(function()
                RippleEffect(buttonContainer)
                button.Callback()
            end)
            
            -- Hover effects
            buttonContainer.MouseEnter:Connect(function()
                CreateTween(buttonContainer, {Size = UDim2.new(1, 0, 0, 37)}, 0.2):Play()
            end)
            
            buttonContainer.MouseLeave:Connect(function()
                CreateTween(buttonContainer, {Size = UDim2.new(1, 0, 0, 35)}, 0.2):Play()
            end)
            
            table.insert(self.Elements, buttonContainer)
            self:UpdateCanvasSize()
            return button
        end
        
        table.insert(self.Tabs, tab)
        
        -- Auto-select first tab
        if #self.Tabs == 1 then
            self:SelectTab(tab)
        end
        
        return tab
    end
    
    return window
end

return Library
