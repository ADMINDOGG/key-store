-- ‚úÖ Enhanced Lua Script with Ban Check and Better Error Handling
local webhookURL = "https://discord.com/api/webhooks/1375147331980099594/5758wuuuL-84m7Vw1u1Ztvi9iqlR-40CbS0UtbCTt56fknqZauFZ62AVZ27EX8xvGd2c"

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà script_key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not script_key then
    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà script_key ‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô Script!")
    return
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Executor
local function getExecutor()
    if identifyexecutor then return identifyexecutor() end
    if KRNL_LOADED then return "Krnl" end
    if isexecutorclosure then return "Script-Ware" end
    if fluxus then return "Fluxus" end
    if SENTINEL_LOADED then return "Sentinel" end
    if PROTOSMASHER_LOADED then return "ProtoSmasher" end
    return "Unknown"
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á HWID
local function getHWID()
    if syn and syn.crypt and syn.crypt.hash then
        return syn.crypt.hash("HWID_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId()))
    elseif gethwid then
        return gethwid()
    elseif identifyexecutor and identifyexecutor():lower():find("fluxus") then
        return "fluxus_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId())
    else
        return "fallback_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId())
    end
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Request
local function GetRequest()
    if syn and syn.request then return syn.request end
    if http and http.request then return http.request end
    if http_request then return http_request end
    if fluxus and fluxus.request then return fluxus.request end
    if request then return request end
    return nil
end

-- ‚úÖ ‡∏î‡∏∂‡∏á IP Address
local function getIP()
    local req = GetRequest()
    if not req then return "Unknown" end
    local success, res = pcall(function()
        return req({ Url = "https://api.ipify.org", Method = "GET" })
    end)
    return success and res and res.Body or "Unknown"
end

-- ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å IP
local function getCountry(ip)
    local req = GetRequest()
    if not req then return "Unknown" end
    local success, res = pcall(function()
        return req({ Url = "http://ip-api.com/json/" .. ip, Method = "GET" })
    end)
    if success and res and res.Body then
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        return data.country or "Unknown"
    end
    return "Unknown"
end

-- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Key ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
local function isKeyBanned(key)
    local success, bannedData = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/ADMINDOGG/key-store/refs/heads/main/banned_keys.txt")
    end)
    
    if not success then
        return false -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
    end
    
    for line in bannedData:gmatch("[^\r\n]+") do
        if line and line ~= "" then
            local bannedKey = line:match("([^:]+)")
            if bannedKey and bannedKey:gsub("^%s*(.-)%s*$", "%1") == key then
                local parts = {}
                for part in line:gmatch("[^:]+") do
                    table.insert(parts, part)
                end
                local reason = table.concat(parts, ":", 3) or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"
                return true, reason
            end
        end
    end
    
    return false
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function updateRunCounter(key, userId)
    local req = GetRequest()
    if not req then 
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return { count = 1, firstRun = os.date("!%Y-%m-%dT%H:%M:%SZ") } 
    end
    
    local apiUrl = "https://api.github.com/repos/ADMINDOGG/key-store/contents/run_counter.txt"
    local token = "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"
    
    local currentTime = os.date("!%Y-%m-%dT%H:%M:%SZ")
    local runCount = 1
    local firstRun = currentTime
    
    -- ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    local success, response = pcall(function()
        return req({
            Url = apiUrl,
            Method = "GET",
            Headers = {
                ["Authorization"] = "token " .. token,
                ["Accept"] = "application/vnd.github.v3+json"
            }
        })
    end)
    
    if success and response and response.StatusCode == 200 then
        local fileData = game:GetService("HttpService"):JSONDecode(response.Body)
        local sha = fileData.sha
        
        -- ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô text
        local content = ""
        pcall(function()
            content = game:GetService("Base64").decode(fileData.content:gsub("\n", ""))
        end)
        
        local lines = {}
        for line in content:gmatch("[^\r\n]+") do
            table.insert(lines, line)
        end
        
        local updated = false
        for i, line in ipairs(lines) do
            local parts = {}
            for part in line:gmatch("[^:]+") do
                table.insert(parts, part)
            end
            
            if #parts >= 4 and parts[1] == key and parts[2] == userId then
                updated = true
                runCount = tonumber(parts[3]) + 1
                firstRun = parts[4]
                lines[i] = key .. ":" .. userId .. ":" .. runCount .. ":" .. firstRun .. ":" .. currentTime
                break
            end
        end
        
        if not updated then
            table.insert(lines, key .. ":" .. userId .. ":1:" .. currentTime .. ":" .. currentTime)
        end
        
        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå
        local newContent = table.concat(lines, "\n")
        local encodedContent = ""
        pcall(function()
            encodedContent = game:GetService("Base64").encode(newContent)
        end)
        
        pcall(function()
            req({
                Url = apiUrl,
                Method = "PUT",
                Headers = {
                    ["Authorization"] = "token " .. token,
                    ["Accept"] = "application/vnd.github.v3+json",
                    ["Content-Type"] = "application/json"
                },
                Body = game:GetService("HttpService"):JSONEncode({
                    message = "Update run counter data",
                    content = encodedContent,
                    sha = sha
                })
            })
        end)
    else
        -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        local newContent = key .. ":" .. userId .. ":1:" .. currentTime .. ":" .. currentTime
        local encodedContent = ""
        pcall(function()
            encodedContent = game:GetService("Base64").encode(newContent)
        end)
        
        pcall(function()
            req({
                Url = apiUrl,
                Method = "PUT",
                Headers = {
                    ["Authorization"] = "token " .. token,
                    ["Accept"] = "application/vnd.github.v3+json",
                    ["Content-Type"] = "application/json"
                },
                Body = game:GetService("HttpService"):JSONEncode({
                    message = "Create run counter file",
                    content = encodedContent
                })
            })
        end)
    end
    
    return { count = runCount, firstRun = firstRun }
end

-- ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß)
local function sendToDiscord(status, key, hwid, playerInfo, executor, ip, country, message, keyOwnerDiscordId, runData)
    local HttpService = game:GetService("HttpService")
    
    local fields = {
        { name = "üë§ Username", value = playerInfo.username, inline = true },
        { name = "üìõ Display Name", value = playerInfo.displayName, inline = true },
        { name = "üÜî User ID", value = playerInfo.userId, inline = true },
        { name = "üîë Key Used", value = "```" .. key .. "```", inline = false },
        { name = "üíª HWID", value = "```" .. hwid .. "```", inline = false },
    }
    
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏° Discord ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á Key
    if keyOwnerDiscordId and keyOwnerDiscordId ~= "Unknown" then
        table.insert(fields, { name = "üë• Discord ID", value = "<@" .. keyOwnerDiscordId .. ">", inline = true })
    else
        table.insert(fields, { name = "üë• Discord ID", value = "Unknown", inline = true })
    end
    
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô
    if runData and status == "success" then
        table.insert(fields, { name = "üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô", value = "```‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà " .. runData.count .. "```", inline = true })
        table.insert(fields, { name = "üéØ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å", value = "```" .. runData.firstRun .. "```", inline = true })
        
        -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö milestone
        if runData.count == 1 then
            table.insert(fields, { name = "üéâ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©", value = "```üÜï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà!```", inline = true })
        elseif runData.count % 10 == 0 then
            table.insert(fields, { name = "üéâ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©", value = "```üèÜ " .. runData.count .. " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á!```", inline = true })
        elseif runData.count % 100 == 0 then
            table.insert(fields, { name = "üéâ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©", value = "```üíé " .. runData.count .. " ‡∏Ñ‡∏£‡∏±‡πâ‡∏á - ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ó‡∏û!```", inline = true })
        end
    end
    
    -- ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    table.insert(fields, { name = "üõ†Ô∏è Executor", value = executor, inline = true })
    table.insert(fields, { name = "üåç Country", value = country, inline = true })
    table.insert(fields, { name = "üåê IP Address", value = ip, inline = true })
    table.insert(fields, { name = "üìã Status", value = "```" .. message .. "```", inline = false })
    
    local embed = {
        ["username"] = status == "success" and "‚úÖ Key Success" or "‚ùå Key Failed",
        ["embeds"] = {{
            ["title"] = status == "success" and "‚úÖ Script Executed Successfully" or "‚ùå Script Execution Failed",
            ["color"] = status == "success" and 65280 or 16711680,
            ["fields"] = fields,
            ["footer"] = { text = "Script Logger System ‚Ä¢ " .. os.date("%Y-%m-%d %H:%M:%S") },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    pcall(function()
        GetRequest()({
            Url = webhookURL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(embed)
        })
    end)
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Key ‡πÅ‡∏•‡∏∞ HWID (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
local function verifyKeyAndHWID(inputKey, userHWID)
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Key ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local isBanned, banReason = isKeyBanned(inputKey)
    if isBanned then
        return false, "üö´ Key ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô!\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: " .. (banReason or "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"), nil
    end
    
    local success, keysData = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/ADMINDOGG/key-store/refs/heads/main/keys.txt")
    end)
    
    if not success then
        return false, "üåê ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï", nil
    end
    
    for line in keysData:gmatch("[^\r\n]+") do
        if line and line ~= "" then
            local key, hwid, userid = line:match("([^:]+):([^:]+):?(.*)")
            
            if key and hwid then
                key = key:gsub("^%s*(.-)%s*$", "%1")
                hwid = hwid:gsub("^%s*(.-)%s*$", "%1")
                userid = userid and userid:gsub("^%s*(.-)%s*$", "%1") or "Unknown"
                
                if key == inputKey then
                    if hwid == userHWID then
                        return true, "‚úÖ Key ‡πÅ‡∏•‡∏∞ HWID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Script...", userid
                    else
                        return false, "üîí HWID ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!\nüìã ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: " .. hwid .. "\nüíª ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " .. userHWID .. "\n\nüí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á /setup ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Reset HWID", userid
                    end
                end
            end
        end
    end
    
    return false, "‚ùå Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Staff ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ Key", nil
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
local function displayMessage(type, message)
    local border = "=" .. string.rep("=", 50) .. "="
    local spacer = "|" .. string.rep(" ", 50) .. "|"
    
    print(border)
    print(spacer)
    
    if type == "success" then
        print("| üéâ SUCCESS: " .. string.rep(" ", 35) .. "|")
    elseif type == "error" then
        print("| ‚ùå ERROR: " .. string.rep(" ", 37) .. "|")
    elseif type == "loading" then
        print("| ‚è≥ LOADING: " .. string.rep(" ", 35) .. "|")
    end
    
    print(spacer)
    
    -- ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    for line in message:gmatch("[^\n]+") do
        local padding = 50 - #line
        local leftPad = math.floor(padding / 2)
        local rightPad = padding - leftPad
        print("| " .. string.rep(" ", leftPad) .. line .. string.rep(" ", rightPad) .. "|")
    end
    
    print(spacer)
    print(border)
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î Script ‡∏´‡∏•‡∏±‡∏Å
local function loadMainScript()
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Script ‡∏´‡∏•‡∏±‡∏Å...")
    
    -- ‡πÉ‡∏™‡πà URL Script ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    local mainScriptUrl = "https://raw.githubusercontent.com/YOUR_USERNAME/YOUR_REPO/main/main_script.lua"
    
    local success, result = pcall(function()
        return loadstring(game:HttpGet(mainScriptUrl))()
    end)
    
    if success then
        print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î Script ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return true
    else
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î Script ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ: " .. tostring(result))
        return false
    end
end

-- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
print("\nüöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...")

local player = game:GetService("Players").LocalPlayer
local playerInfo = {
    username = player.Name,
    displayName = player.DisplayName,
    userId = tostring(player.UserId)
}

local userHWID = getHWID()
local executor = getExecutor()
local ip = getIP()
local country = getCountry(ip)

print("üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: " .. playerInfo.username)
print("üÜî User ID: " .. playerInfo.userId)
print("üíª HWID: " .. userHWID)
print("üõ†Ô∏è Executor: " .. executor)
print("üåç ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®: " .. country)
print("üîë Key: " .. script_key)
print("\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Key ‡πÅ‡∏•‡∏∞ HWID...")

local isValid, message, keyOwnerDiscordId = verifyKeyAndHWID(script_key, userHWID)

if isValid then
    displayMessage("success", "Key ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!")
    
    -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    print("\nüìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô...")
    local runData = updateRunCounter(script_key, keyOwnerDiscordId)
    
    print("üéØ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà: " .. runData.count)
    
    -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ Discord
    sendToDiscord("success", script_key, userHWID, playerInfo, executor, ip, country, message, keyOwnerDiscordId, runData)
    
    -- ‡πÇ‡∏´‡∏•‡∏î Script ‡∏´‡∏•‡∏±‡∏Å
    local mainLoaded = loadMainScript()
    
    if mainLoaded then
        displayMessage("success", "üéä ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!\nScript ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
    else
        displayMessage("error", "‚ö†Ô∏è Script ‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ\n‡πÅ‡∏ï‡πà Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    end
else
    displayMessage("error", message)
    
    -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÑ‡∏õ Discord
    sendToDiscord("failure", script_key, userHWID, playerInfo, executor, ip, country, message, keyOwnerDiscordId, nil)
end

-- ‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
script_key = nil
