--[DOGHUB]--

-- DOGHUB Advanced GUI Library
-- Enhanced version with more features and cleaner code

local DogHub = {}
DogHub.__index = DogHub

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Color Themes
local themes = {
    Dark = {
        MainColor = Color3.fromRGB(40, 50, 65),
        AccentColor = Color3.fromRGB(255, 140, 0), -- Orange
        SecondaryAccent = Color3.fromRGB(0, 191, 255), -- Blue
        BackgroundColor = Color3.fromRGB(25, 35, 45),
        TextColor = Color3.fromRGB(255, 255, 255),
        DisabledColor = Color3.fromRGB(100, 100, 100),
        SuccessColor = Color3.fromRGB(85, 255, 125),
        ErrorColor = Color3.fromRGB(255, 85, 85),
        OutlineColor = Color3.fromRGB(255, 140, 0),
        AnimationSpeed = 0.2
    },
    
    Light = {
        MainColor = Color3.fromRGB(240, 245, 250),
        AccentColor = Color3.fromRGB(70, 130, 255),
        SecondaryAccent = Color3.fromRGB(255, 95, 135),
        BackgroundColor = Color3.fromRGB(255, 255, 255),
        TextColor = Color3.fromRGB(30, 30, 30),
        DisabledColor = Color3.fromRGB(150, 150, 150),
        SuccessColor = Color3.fromRGB(85, 200, 125),
        ErrorColor = Color3.fromRGB(255, 100, 100),
        OutlineColor = Color3.fromRGB(70, 130, 255),
        AnimationSpeed = 0.2
    },
    
    Neon = {
        MainColor = Color3.fromRGB(20, 20, 35),
        AccentColor = Color3.fromRGB(255, 0, 255), -- Magenta
        SecondaryAccent = Color3.fromRGB(0, 255, 255), -- Cyan
        BackgroundColor = Color3.fromRGB(10, 10, 25),
        TextColor = Color3.fromRGB(255, 255, 255),
        DisabledColor = Color3.fromRGB(80, 80, 100),
        SuccessColor = Color3.fromRGB(0, 255, 150),
        ErrorColor = Color3.fromRGB(255, 50, 100),
        OutlineColor = Color3.fromRGB(255, 0, 255),
        AnimationSpeed = 0.15
    },
    
    Forest = {
        MainColor = Color3.fromRGB(45, 65, 55),
        AccentColor = Color3.fromRGB(85, 170, 85), -- Green
        SecondaryAccent = Color3.fromRGB(139, 195, 74), -- Light Green
        BackgroundColor = Color3.fromRGB(30, 50, 40),
        TextColor = Color3.fromRGB(255, 255, 255),
        DisabledColor = Color3.fromRGB(100, 120, 110),
        SuccessColor = Color3.fromRGB(76, 175, 80),
        ErrorColor = Color3.fromRGB(244, 67, 54),
        OutlineColor = Color3.fromRGB(85, 170, 85),
        AnimationSpeed = 0.2
    },
    
    Sunset = {
        MainColor = Color3.fromRGB(65, 45, 75),
        AccentColor = Color3.fromRGB(255, 165, 0), -- Orange
        SecondaryAccent = Color3.fromRGB(255, 105, 180), -- Pink
        BackgroundColor = Color3.fromRGB(50, 30, 60),
        TextColor = Color3.fromRGB(255, 255, 255),
        DisabledColor = Color3.fromRGB(120, 100, 130),
        SuccessColor = Color3.fromRGB(255, 193, 7),
        ErrorColor = Color3.fromRGB(231, 76, 60),
        OutlineColor = Color3.fromRGB(255, 165, 0),
        AnimationSpeed = 0.2
    }
}

-- Current theme
local config = themes.Dark

-- Settings Manager
local Settings = {
    FileName = "DogHub_Settings",
    Data = {
        Theme = "Dark",
        WindowPosition = {X = 0.5, Y = 0.5},
        WindowSize = {Width = 500, Height = 350},
        ToggleKey = "Insert",
        AutoSave = true,
        Notifications = true,
        AnimationsEnabled = true,
        ElementSettings = {}
    }
}

-- Save settings to file
function Settings:Save()
    if not self.Data.AutoSave then return end
    
    local success, result = pcall(function()
        writefile(self.FileName .. ".json", HttpService:JSONEncode(self.Data))
    end)
    
    if not success then
        warn("Failed to save DogHub settings:", result)
    end
end

-- Load settings from file
function Settings:Load()
    local success, result = pcall(function()
        if isfile(self.FileName .. ".json") then
            local data = HttpService:JSONDecode(readfile(self.FileName .. ".json"))
            for key, value in pairs(data) do
                self.Data[key] = value
            end
            return true
        end
        return false
    end)
    
    if success and result then
        config = themes[self.Data.Theme] or themes.Dark
        return true
    else
        self:Save() -- Create default settings file
        return false
    end
end

-- Update setting value
function Settings:Set(key, value)
    self.Data[key] = value
    if key == "Theme" then
        config = themes[value] or themes.Dark
    end
    self:Save()
end

-- Get setting value
function Settings:Get(key)
    return self.Data[key]
end

-- Initialize settings
Settings:Load()

-- Animation functions
local function fadeIn(object, duration)
    if not Settings:Get("AnimationsEnabled") then
        object.Visible = true
        return
    end
    
    object.Visible = true
    object.BackgroundTransparency = 1
    if object:IsA("TextLabel") or object:IsA("TextButton") then
        object.TextTransparency = 1
    end
    
    TweenService:Create(object, TweenInfo.new(duration or config.AnimationSpeed), {
        BackgroundTransparency = 0,
        TextTransparency = 0
    }):Play()
end

local function fadeOut(object, duration, callback)
    if not Settings:Get("AnimationsEnabled") then
        object.Visible = false
        if callback then callback() end
        return
    end
    
    local tween = TweenService:Create(object, TweenInfo.new(duration or config.AnimationSpeed), {
        BackgroundTransparency = 1,
        TextTransparency = 1
    })
    
    tween.Completed:Connect(function()
        object.Visible = false
        if callback then callback() end
    end)
    
    tween:Play()
end

-- Create main window
function DogHub:CreateWindow(title, options)
    options = options or {}
    
    -- Clean up existing GUI
    local existingGui = playerGui:FindFirstChild("DogHub")
    if existingGui then
        existingGui:Destroy()
    end
    
    local window = {
        Title = title or "DOGHUB",
        Tabs = {},
        CurrentTab = nil,
        Minimized = false,
        Destroyed = false,
        ToggleKey = Enum.KeyCode[Settings:Get("ToggleKey")] or Enum.KeyCode.Insert,
        Theme = Settings:Get("Theme"),
        Elements = {}
    }
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DogHub"
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, Settings:Get("WindowSize").Width, 0, Settings:Get("WindowSize").Height)
    mainFrame.Position = UDim2.new(Settings:Get("WindowPosition").X, -Settings:Get("WindowSize").Width/2, 
                                   Settings:Get("WindowPosition").Y, -Settings:Get("WindowSize").Height/2)
    mainFrame.BackgroundColor3 = config.MainColor
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    mainFrame.ClipsDescendants = true
    
    -- Add effects
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = config.OutlineColor
    stroke.Thickness = 2
    stroke.Parent = mainFrame
    
    -- Add shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxasset://textures/ui/Chat/9slice/ChatBubble_TailHidden_ShadowBottom.png"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(Vector2.new(8, 8), Vector2.new(64, 64))
    shadow.Parent = mainFrame
    shadow.ZIndex = -1
    
    -- Title Bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 35)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = config.AccentColor
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    -- Hide bottom corners of title bar
    local titleFix = Instance.new("Frame")
    titleFix.Size = UDim2.new(1, 0, 0, 12)
    titleFix.Position = UDim2.new(0, 0, 1, -12)
    titleFix.BackgroundColor3 = config.AccentColor
    titleFix.BorderSizePixel = 0
    titleFix.Parent = titleBar
    
    -- Control buttons container
    local controlsFrame = Instance.new("Frame")
    controlsFrame.Name = "Controls"
    controlsFrame.Size = UDim2.new(0, 120, 1, 0)
    controlsFrame.Position = UDim2.new(1, -120, 0, 0)
    controlsFrame.BackgroundTransparency = 1
    controlsFrame.Parent = titleBar
    
    -- Theme Selector
    local themeBtn = Instance.new("TextButton")
    themeBtn.Name = "ThemeBtn"
    themeBtn.Size = UDim2.new(0, 25, 0, 25)
    themeBtn.Position = UDim2.new(0, 5, 0, 5)
    themeBtn.BackgroundColor3 = config.SecondaryAccent
    themeBtn.BorderSizePixel = 0
    themeBtn.Text = "🎨"
    themeBtn.TextColor3 = config.TextColor
    themeBtn.TextScaled = true
    themeBtn.Font = Enum.Font.GothamBold
    themeBtn.Parent = controlsFrame
    
    local themeBtnCorner = Instance.new("UICorner")
    themeBtnCorner.CornerRadius = UDim.new(0, 6)
    themeBtnCorner.Parent = themeBtn
    
    -- Settings Button
    local settingsBtn = Instance.new("TextButton")
    settingsBtn.Name = "SettingsBtn"
    settingsBtn.Size = UDim2.new(0, 25, 0, 25)
    settingsBtn.Position = UDim2.new(0, 35, 0, 5)
    settingsBtn.BackgroundColor3 = config.SecondaryAccent
    settingsBtn.BorderSizePixel = 0
    settingsBtn.Text = "⚙️"
    settingsBtn.TextColor3 = config.TextColor
    settingsBtn.TextScaled = true
    settingsBtn.Font = Enum.Font.GothamBold
    settingsBtn.Parent = controlsFrame
    
    local settingsBtnCorner = Instance.new("UICorner")
    settingsBtnCorner.CornerRadius = UDim.new(0, 6)
    settingsBtnCorner.Parent = settingsBtn
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeBtn"
    minimizeBtn.Size = UDim2.new(0, 25, 0, 25)
    minimizeBtn.Position = UDim2.new(0, 65, 0, 5)
    minimizeBtn.BackgroundColor3 = config.SuccessColor
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Text = "−"
    minimizeBtn.TextColor3 = config.TextColor
    minimizeBtn.TextScaled = true
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.Parent = controlsFrame
    
    local minimizeBtnCorner = Instance.new("UICorner")
    minimizeBtnCorner.CornerRadius = UDim.new(0, 6)
    minimizeBtnCorner.Parent = minimizeBtn
    
    -- Close/Hide Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseBtn"
    closeBtn.Size = UDim2.new(0, 25, 0, 25)
    closeBtn.Position = UDim2.new(0, 95, 0, 5)
    closeBtn.BackgroundColor3 = config.ErrorColor
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = "×"
    closeBtn.TextColor3 = config.TextColor
    closeBtn.TextScaled = true
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Parent = controlsFrame
    
    local closeBtnCorner = Instance.new("UICorner")
    closeBtnCorner.CornerRadius = UDim.new(0, 6)
    closeBtnCorner.Parent = closeBtn
    
    -- Title Text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(1, -140, 1, 0)
    titleText.Position = UDim2.new(0, 15, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = "🐕 " .. window.Title
    titleText.TextColor3 = config.TextColor
    titleText.TextScaled = true
    titleText.Font = Enum.Font.GothamBold
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Sidebar
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.Size = UDim2.new(0, 160, 1, -35)
    sidebar.Position = UDim2.new(0, 0, 0, 35)
    sidebar.BackgroundColor3 = config.BackgroundColor
    sidebar.BorderSizePixel = 0
    sidebar.Parent = mainFrame
    
    local sidebarStroke = Instance.new("UIStroke")
    sidebarStroke.Color = config.OutlineColor
    sidebarStroke.Thickness = 1
    sidebarStroke.Transparency = 0.5
    sidebarStroke.Parent = sidebar
    
    -- Content Area
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.Size = UDim2.new(1, -160, 1, -35)
    contentArea.Position = UDim2.new(0, 160, 0, 35)
    contentArea.BackgroundColor3 = config.MainColor
    contentArea.BorderSizePixel = 0
    contentArea.Parent = mainFrame
    
    -- Sidebar ScrollingFrame
    local sidebarScroll = Instance.new("ScrollingFrame")
    sidebarScroll.Name = "SidebarScroll"
    sidebarScroll.Size = UDim2.new(1, 0, 1, 0)
    sidebarScroll.Position = UDim2.new(0, 0, 0, 0)
    sidebarScroll.BackgroundTransparency = 1
    sidebarScroll.BorderSizePixel = 0
    sidebarScroll.ScrollBarThickness = 6
    sidebarScroll.ScrollBarImageColor3 = config.AccentColor
    sidebarScroll.Parent = sidebar
    
    local sidebarLayout = Instance.new("UIListLayout")
    sidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sidebarLayout.Padding = UDim.new(0, 3)
    sidebarLayout.Parent = sidebarScroll
    
    local sidebarPadding = Instance.new("UIPadding")
    sidebarPadding.PaddingAll = UDim.new(0, 5)
    sidebarPadding.Parent = sidebarScroll
    
    -- Store GUI elements
    window.ScreenGui = screenGui
    window.MainFrame = mainFrame
    window.Sidebar = sidebarScroll
    window.ContentArea = contentArea
    window.TitleBar = titleBar
    window.Controls = {
        Theme = themeBtn,
        Settings = settingsBtn,
        Minimize = minimizeBtn,
        Close = closeBtn
    }
    
    -- Theme selector functionality
    local themeDropdown = nil
    themeBtn.MouseButton1Click:Connect(function()
        if themeDropdown then
            themeDropdown:Destroy()
            themeDropdown = nil
            return
        end
        
        -- Create theme selection dropdown
        themeDropdown = Instance.new("Frame")
        themeDropdown.Name = "ThemeDropdown"
        themeDropdown.Size = UDim2.new(0, 120, 0, #themes * 25)
        themeDropdown.Position = UDim2.new(0, 5, 1, 5)
        themeDropdown.BackgroundColor3 = config.MainColor
        themeDropdown.BorderSizePixel = 0
        themeDropdown.Parent = themeBtn
        
        local dropdownCorner = Instance.new("UICorner")
        dropdownCorner.CornerRadius = UDim.new(0, 6)
        dropdownCorner.Parent = themeDropdown
        
        local dropdownStroke = Instance.new("UIStroke")
        dropdownStroke.Color = config.OutlineColor
        dropdownStroke.Thickness = 1
        dropdownStroke.Parent = themeDropdown
        
        local dropdownLayout = Instance.new("UIListLayout")
        dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
        dropdownLayout.Parent = themeDropdown
        
        for themeName, _ in pairs(themes) do
            local themeOption = Instance.new("TextButton")
            themeOption.Name = themeName
            themeOption.Size = UDim2.new(1, 0, 0, 25)
            themeOption.BackgroundColor3 = (themeName == window.Theme) and config.AccentColor or Color3.new(0, 0, 0)
            themeOption.BackgroundTransparency = (themeName == window.Theme) and 0 or 1
            themeOption.BorderSizePixel = 0
            themeOption.Text = themeName
            themeOption.TextColor3 = config.TextColor
            themeOption.TextScaled = true
            themeOption.Font = Enum.Font.Gotham
            themeOption.Parent = themeDropdown
            
            themeOption.MouseEnter:Connect(function()
                if themeName ~= window.Theme then
                    themeOption.BackgroundTransparency = 0.5
                end
            end)
            
            themeOption.MouseLeave:Connect(function()
                if themeName ~= window.Theme then
                    themeOption.BackgroundTransparency = 1
                end
            end)
            
            themeOption.MouseButton1Click:Connect(function()
                window.Theme = themeName
                Settings:Set("Theme", themeName)
                DogHub:UpdateTheme(window)
                themeDropdown:Destroy()
                themeDropdown = nil
                DogHub:CreateNotification("Theme Changed", "Applied " .. themeName .. " theme", 2)
            end)
        end
    end)
    
    -- Settings button functionality
    settingsBtn.MouseButton1Click:Connect(function()
        DogHub:OpenSettingsMenu(window)
    end)
    
    -- Make draggable
    local dragging = false
    local dragInput, mousePos, framePos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = mainFrame.Position
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - mousePos
            local newPos = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
            mainFrame.Position = newPos
            
            -- Save position
            local viewport = workspace.CurrentCamera.ViewportSize
            Settings:Set("WindowPosition", {
                X = (newPos.X.Offset + Settings:Get("WindowSize").Width/2) / viewport.X,
                Y = (newPos.Y.Offset + Settings:Get("WindowSize").Height/2) / viewport.Y
            })
        end
    end)
    
    titleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Minimize functionality
    minimizeBtn.MouseButton1Click:Connect(function()
        window.Minimized = not window.Minimized
        local targetSize = window.Minimized and UDim2.new(0, Settings:Get("WindowSize").Width, 0, 35) or 
                          UDim2.new(0, Settings:Get("WindowSize").Width, 0, Settings:Get("WindowSize").Height)
        minimizeBtn.Text = window.Minimized and "+" or "−"
        
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(mainFrame, TweenInfo.new(config.AnimationSpeed), {Size = targetSize}):Play()
        else
            mainFrame.Size = targetSize
        end
    end)
    
    -- Close/Hide functionality
    closeBtn.MouseButton1Click:Connect(function()
        fadeOut(mainFrame, config.AnimationSpeed)
        if Settings:Get("Notifications") then
            DogHub:CreateNotification("UI Hidden", "Press " .. Settings:Get("ToggleKey") .. " to show", 2)
        end
    end)
    
    -- Toggle keybind
    local toggleConnection
    toggleConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed or window.Destroyed then
            if window.Destroyed then
                toggleConnection:Disconnect()
            end
            return
        end
        
        if input.KeyCode == window.ToggleKey then
            if mainFrame.Visible then
                fadeOut(mainFrame, config.AnimationSpeed)
            else
                fadeIn(mainFrame, config.AnimationSpeed)
                if Settings:Get("Notifications") then
                    DogHub:CreateNotification("UI Opened", "Welcome back! 🐕", 2)
                end
            end
        end
    end)
    
    -- Welcome notification
    spawn(function()
        wait(0.5)
        if Settings:Get("Notifications") then
            DogHub:CreateNotification("DOGHUB", "Welcome to DOGHUB! Press " .. Settings:Get("ToggleKey") .. " to toggle", 3)
        end
    end)
    
    return window
end

-- Update theme for existing window
function DogHub:UpdateTheme(window)
    if not window or window.Destroyed then return end
    
    config = themes[window.Theme] or themes.Dark
    
    -- Update main frame
    window.MainFrame.BackgroundColor3 = config.MainColor
    window.MainFrame.UIStroke.Color = config.OutlineColor
    
    -- Update title bar
    window.TitleBar.BackgroundColor3 = config.AccentColor
    window.TitleBar.Frame.BackgroundColor3 = config.AccentColor
    
    -- Update controls
    window.Controls.Theme.BackgroundColor3 = config.SecondaryAccent
    window.Controls.Settings.BackgroundColor3 = config.SecondaryAccent
    window.Controls.Minimize.BackgroundColor3 = config.SuccessColor
    window.Controls.Close.BackgroundColor3 = config.ErrorColor
    
    -- Update sidebar
    window.Sidebar.Parent.BackgroundColor3 = config.BackgroundColor
    window.Sidebar.Parent.UIStroke.Color = config.OutlineColor
    
    -- Update content area
    window.ContentArea.BackgroundColor3 = config.MainColor
    
    -- Update all tabs and elements
    for _, tab in pairs(window.Tabs) do
        if tab.Button then
            tab.Button.BackgroundColor3 = (tab == window.CurrentTab) and config.AccentColor or config.BackgroundColor
            tab.Button.TextColor3 = config.TextColor
        end
        
        -- Update all elements in the tab
        for _, element in pairs(tab.Elements) do
            DogHub:UpdateElementTheme(element)
        end
    end
end

-- Update element theme
function DogHub:UpdateElementTheme(element)
    if not element or not element.Frame then return end
    
    local frame = element.Frame
    frame.BackgroundColor3 = config.BackgroundColor
    
    -- Update based on element type
    if element.Type == "Toggle" then
        local toggleBtn = frame:FindFirstChild("ToggleBtn")
        if toggleBtn then
            toggleBtn.BackgroundColor3 = element.Value and config.AccentColor or config.DisabledColor
            toggleBtn.UIStroke.Color = config.SecondaryAccent
        end
    elseif element.Type == "Button" then
        frame.BackgroundColor3 = config.AccentColor
        frame.UIStroke.Color = config.SecondaryAccent
    elseif element.Type == "Slider" then
        local fill = frame:FindFirstChild("Track") and frame.Track:FindFirstChild("Fill")
        if fill then
            fill.BackgroundColor3 = config.AccentColor
        end
    end
    
    -- Update text colors
    for _, child in pairs(frame:GetDescendants()) do
        if child:IsA("TextLabel") or child:IsA("TextButton") then
            if child.Name == "ValueLabel" then
                child.TextColor3 = config.AccentColor
            else
                child.TextColor3 = config.TextColor
            end
        end
    end
end

-- Settings menu
function DogHub:OpenSettingsMenu(window)
    local settingsGui = playerGui:FindFirstChild("DogHubSettings")
    if settingsGui then
        settingsGui:Destroy()
        return
    end
    
    settingsGui = Instance.new("ScreenGui")
    settingsGui.Name = "DogHubSettings"
    settingsGui.Parent = playerGui
    
    local settingsFrame = Instance.new("Frame")
    settingsFrame.Name = "SettingsFrame"
    settingsFrame.Size = UDim2.new(0, 400, 0, 300)
    settingsFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    settingsFrame.BackgroundColor3 = config.MainColor
    settingsFrame.BorderSizePixel = 0
    settingsFrame.Parent = settingsGui
    
    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 10)
    settingsCorner.Parent = settingsFrame
    
    local settingsStroke = Instance.new("UIStroke")
    settingsStroke.Color = config.OutlineColor
    settingsStroke.Thickness = 2
    settingsStroke.Parent = settingsFrame
    
    -- Settings title
    local settingsTitle = Instance.new("TextLabel")
    settingsTitle.Name = "Title"
    settingsTitle.Size = UDim2.new(1, -50, 0, 30)
    settingsTitle.Position = UDim2.new(0, 10, 0, 10)
    settingsTitle.BackgroundTransparency = 1
    settingsTitle.Text = "⚙️ DogHub Settings"
    settingsTitle.TextColor3 = config.TextColor
    settingsTitle.TextScaled = true
    settingsTitle.Font = Enum.Font.GothamBold
    settingsTitle.TextXAlignment = Enum.TextXAlignment.Left
    settingsTitle.Parent = settingsFrame
    
    -- Close settings button
    local closeSettingsBtn = Instance.new("TextButton")
    closeSettingsBtn.Name = "CloseSettings"
    closeSettingsBtn.Size = UDim2.new(0, 30, 0, 30)
    closeSettingsBtn.Position = UDim2.new(1, -40, 0, 10)
    closeSettingsBtn.BackgroundColor3 = config.ErrorColor
    closeSettingsBtn.BorderSizePixel = 0
    closeSettingsBtn.Text = "×"
    closeSettingsBtn.TextColor3 = config.TextColor
    closeSettingsBtn.TextScaled = true
    closeSettingsBtn.Font = Enum.Font.GothamBold
    closeSettingsBtn.Parent = settingsFrame
    
    local closeSettingsCorner = Instance.new("UICorner")
    closeSettingsCorner.CornerRadius = UDim.new(0, 6)
    closeSettingsCorner.Parent = closeSettingsBtn
    
    -- Settings scroll frame
    local settingsScroll = Instance.new("ScrollingFrame")
    settingsScroll.Name = "SettingsScroll"
    settingsScroll.Size = UDim2.new(1, -20, 1, -60)
    settingsScroll.Position = UDim2.new(0, 10, 0, 50)
    settingsScroll.BackgroundTransparency = 1
    settingsScroll.BorderSizePixel = 0
    settingsScroll.ScrollBarThickness = 6
    settingsScroll.ScrollBarImageColor3 = config.AccentColor
    settingsScroll.Parent = settingsFrame
    
    local settingsLayout = Instance.new("UIListLayout")
    settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    settingsLayout.Padding = UDim.new(0, 5)
    settingsLayout.Parent = settingsScroll
    
    -- Auto Save Toggle
    DogHub:CreateSettingsToggle(settingsScroll, "Auto Save Settings", Settings:Get("AutoSave"), function(value)
        Settings:Set("AutoSave", value)
    end)
    
    -- Notifications Toggle
    DogHub:CreateSettingsToggle(settingsScroll, "Show Notifications", Settings:Get("Notifications"), function(value)
        Settings:Set("Notifications", value)
    end)
    
    -- Animations Toggle
    DogHub:CreateSettingsToggle(settingsScroll, "Enable Animations", Settings:Get("AnimationsEnabled"), function(value)
        Settings:Set("AnimationsEnabled", value)
    end)
    
    -- Toggle Key Selector
    DogHub:CreateSettingsDropdown(settingsScroll, "UI Toggle Key", {
        "Insert", "F1", "F2", "F3", "F4", "F5", "Home", "End", 
        "PageUp", "PageDown", "Delete", "Backspace", "Tab"
    }, Settings:Get("ToggleKey"), function(value)
        Settings:Set("ToggleKey", value)
        window.ToggleKey = Enum.KeyCode[value] or Enum.KeyCode.Insert
        DogHub:CreateNotification("Toggle Key Changed", "New key: " .. value, 2)
    end)
    
    -- Destroy UI Button
    DogHub:CreateSettingsButton(settingsScroll, "🗑️ Destroy UI Completely", config.ErrorColor, function()
        DogHub:DestroyUI(window)
        settingsGui:Destroy()
    end)
    
    -- Reset Settings Button
    DogHub:CreateSettingsButton(settingsScroll, "🔄 Reset All Settings", config.DisabledColor, function()
        Settings.Data = {
            Theme = "Dark",
            WindowPosition = {X = 0.5, Y = 0.5},
            WindowSize = {Width = 500, Height = 350},
            ToggleKey = "Insert",
            AutoSave = true,
            Notifications = true,
            AnimationsEnabled = true,
            ElementSettings = {}
        }
        Settings:Save()
        settingsGui:Destroy()
        DogHub:CreateNotification("Settings Reset", "All settings have been reset to default", 3)
    end)
    
    -- Close functionality
    closeSettingsBtn.MouseButton1Click:Connect(function()
        settingsGui:Destroy()
    end)
    
    -- Auto-resize settings scroll
    spawn(function()
        while settingsGui.Parent do
            wait(0.1)
            if settingsLayout then
                settingsScroll.CanvasSize = UDim2.new(0, 0, 0, settingsLayout.AbsoluteContentSize.Y + 10)
            end
        end
    end)
end

-- Create settings toggle
function DogHub:CreateSettingsToggle(parent, name, defaultValue, callback)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = name .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 40)
    toggleFrame.BackgroundColor3 = config.BackgroundColor
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = parent
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "Label"
    toggleLabel.Size = UDim2.new(1, -60, 1, 0)
    toggleLabel.Position = UDim2.new(0, 10, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = name
    toggleLabel.TextColor3 = config.TextColor
    toggleLabel.TextScaled = true
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Name = "ToggleBtn"
    toggleBtn.Size = UDim2.new(0, 40, 0, 25)
    toggleBtn.Position = UDim2.new(1, -45, 0.5, -12.5)
    toggleBtn.BackgroundColor3 = defaultValue and config.AccentColor or config.DisabledColor
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Text = ""
    toggleBtn.Parent = toggleFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 12)
    btnCorner.Parent = toggleBtn
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "Indicator"
    toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
    toggleIndicator.Position = defaultValue and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
    toggleIndicator.BackgroundColor3 = config.TextColor
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleBtn
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 10)
    indicatorCorner.Parent = toggleIndicator
    
    local value = defaultValue
    
    toggleBtn.MouseButton1Click:Connect(function()
        value = not value
        
        local targetColor = value and config.AccentColor or config.DisabledColor
        local targetPos = value and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
        
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(toggleBtn, TweenInfo.new(config.AnimationSpeed), {BackgroundColor3 = targetColor}):Play()
            TweenService:Create(toggleIndicator, TweenInfo.new(config.AnimationSpeed), {Position = targetPos}):Play()
        else
            toggleBtn.BackgroundColor3 = targetColor
            toggleIndicator.Position = targetPos
        end
        
        callback(value)
    end)
end

-- Create settings dropdown
function DogHub:CreateSettingsDropdown(parent, name, options, defaultValue, callback)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = name .. "Dropdown"
    dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
    dropdownFrame.BackgroundColor3 = config.BackgroundColor
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = parent
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdownFrame
    
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(0.5, 0, 1, 0)
    dropdownLabel.Position = UDim2.new(0, 10, 0, 0)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Text = name
    dropdownLabel.TextColor3 = config.TextColor
    dropdownLabel.TextScaled = true
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownFrame
    
    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Name = "DropdownBtn"
    dropdownBtn.Size = UDim2.new(0.45, 0, 0, 30)
    dropdownBtn.Position = UDim2.new(0.5, 5, 0.5, -15)
    dropdownBtn.BackgroundColor3 = config.MainColor
    dropdownBtn.BorderSizePixel = 0
    dropdownBtn.Text = defaultValue .. " ▼"
    dropdownBtn.TextColor3 = config.TextColor
    dropdownBtn.TextScaled = true
    dropdownBtn.Font = Enum.Font.Gotham
    dropdownBtn.Parent = dropdownFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 4)
    btnCorner.Parent = dropdownBtn
    
    local currentValue = defaultValue
    local isOpen = false
    
    dropdownBtn.MouseButton1Click:Connect(function()
        if isOpen then return end
        isOpen = true
        
        -- Create options frame
        local optionsFrame = Instance.new("Frame")
        optionsFrame.Name = "OptionsFrame"
        optionsFrame.Size = UDim2.new(0.45, 0, 0, #options * 25)
        optionsFrame.Position = UDim2.new(0.5, 5, 1, 5)
        optionsFrame.BackgroundColor3 = config.MainColor
        optionsFrame.BorderSizePixel = 0
        optionsFrame.Parent = dropdownFrame
        optionsFrame.ZIndex = 10
        
        local optionsCorner = Instance.new("UICorner")
        optionsCorner.CornerRadius = UDim.new(0, 4)
        optionsCorner.Parent = optionsFrame
        
        local optionsStroke = Instance.new("UIStroke")
        optionsStroke.Color = config.OutlineColor
        optionsStroke.Thickness = 1
        optionsStroke.Parent = optionsFrame
        
        local optionsLayout = Instance.new("UIListLayout")
        optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
        optionsLayout.Parent = optionsFrame
        
        for _, option in ipairs(options) do
            local optionBtn = Instance.new("TextButton")
            optionBtn.Name = "Option"
            optionBtn.Size = UDim2.new(1, 0, 0, 25)
            optionBtn.BackgroundColor3 = (option == currentValue) and config.AccentColor or Color3.new(0, 0, 0)
            optionBtn.BackgroundTransparency = (option == currentValue) and 0 or 1
            optionBtn.BorderSizePixel = 0
            optionBtn.Text = option
            optionBtn.TextColor3 = config.TextColor
            optionBtn.TextScaled = true
            optionBtn.Font = Enum.Font.Gotham
            optionBtn.ZIndex = 11
            optionBtn.Parent = optionsFrame
            
            optionBtn.MouseEnter:Connect(function()
                if option ~= currentValue then
                    optionBtn.BackgroundTransparency = 0.5
                end
            end)
            
            optionBtn.MouseLeave:Connect(function()
                if option ~= currentValue then
                    optionBtn.BackgroundTransparency = 1
                end
            end)
            
            optionBtn.MouseButton1Click:Connect(function()
                currentValue = option
                dropdownBtn.Text = option .. " ▼"
                optionsFrame:Destroy()
                isOpen = false
                callback(option)
            end)
        end
        
        -- Close dropdown when clicking outside
        spawn(function()
            wait(0.1)
            local connection
            connection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    optionsFrame:Destroy()
                    isOpen = false
                    connection:Disconnect()
                end
            end)
        end)
    end)
end

-- Create settings button
function DogHub:CreateSettingsButton(parent, text, color, callback)
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = "SettingsButton"
    buttonFrame.Size = UDim2.new(1, 0, 0, 40)
    buttonFrame.BackgroundColor3 = color
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Text = text
    buttonFrame.TextColor3 = config.TextColor
    buttonFrame.TextScaled = true
    buttonFrame.Font = Enum.Font.GothamBold
    buttonFrame.Parent = parent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 6)
    buttonCorner.Parent = buttonFrame
    
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = config.OutlineColor
    buttonStroke.Thickness = 1
    buttonStroke.Parent = buttonFrame
    
    buttonFrame.MouseEnter:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.new(color.R + 0.1, color.G + 0.1, color.B + 0.1)
            }):Play()
        end
    end)
    
    buttonFrame.MouseLeave:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {BackgroundColor3 = color}):Play()
        end
    end)
    
    buttonFrame.MouseButton1Click:Connect(callback)
end

-- Destroy UI completely
function DogHub:DestroyUI(window)
    if window and not window.Destroyed then
        window.Destroyed = true
        
        if window.ScreenGui then
            window.ScreenGui:Destroy()
        end
        
        -- Clear settings
        Settings.Data = {
            Theme = "Dark",
            WindowPosition = {X = 0.5, Y = 0.5},
            WindowSize = {Width = 500, Height = 350},
            ToggleKey = "Insert",
            AutoSave = true,
            Notifications = true,
            AnimationsEnabled = true,
            ElementSettings = {}
        }
        
        if Settings:Get("Notifications") then
            DogHub:CreateNotification("UI Destroyed", "DogHub has been completely removed", 3)
        end
    end
end

-- Set toggle key for window
function DogHub:SetToggleKey(window, keyCode)
    window.ToggleKey = keyCode
    local keyName = tostring(keyCode):match("Enum%.KeyCode%.(.+)")
    Settings:Set("ToggleKey", keyName)
    
    if Settings:Get("Notifications") then
        DogHub:CreateNotification("Toggle Key", "Changed to: " .. keyName, 2)
    end
end

-- Create Tab
function DogHub:CreateTab(window, name, icon)
    local tab = {
        Name = name,
        Icon = icon or "⚙️",
        Elements = {},
        Visible = false,
        ScrollingFrame = nil,
        Window = window
    }
    
    -- Tab Button
    local tabBtn = Instance.new("TextButton")
    tabBtn.Name = name .. "Tab"
    tabBtn.Size = UDim2.new(1, 0, 0, 40)
    tabBtn.BackgroundColor3 = config.BackgroundColor
    tabBtn.BorderSizePixel = 0
    tabBtn.Text = tab.Icon .. "  " .. name
    tabBtn.TextColor3 = config.TextColor
    tabBtn.TextScaled = true
    tabBtn.Font = Enum.Font.Gotham
    tabBtn.TextXAlignment = Enum.TextXAlignment.Left
    tabBtn.Parent = window.Sidebar
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tabBtn
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingLeft = UDim.new(0, 10)
    tabPadding.Parent = tabBtn
    
    -- Tab Content
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Name = name .. "Content"
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Position = UDim2.new(0, 0, 0, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.BorderSizePixel = 0
    tabContent.ScrollBarThickness = 6
    tabContent.ScrollBarImageColor3 = config.AccentColor
    tabContent.Visible = false
    tabContent.Parent = window.ContentArea
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 8)
    contentLayout.Parent = tabContent
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.PaddingAll = UDim.new(0, 15)
    contentPadding.Parent = tabContent
    
    tab.ScrollingFrame = tabContent
    tab.Button = tabBtn
    
    -- Tab animations
    tabBtn.MouseEnter:Connect(function()
        if tab ~= window.CurrentTab and Settings:Get("AnimationsEnabled") then
            TweenService:Create(tabBtn, TweenInfo.new(0.1), {
                BackgroundColor3 = Color3.new(
                    config.BackgroundColor.R + 0.1,
                    config.BackgroundColor.G + 0.1,
                    config.BackgroundColor.B + 0.1
                )
            }):Play()
        end
    end)
    
    tabBtn.MouseLeave:Connect(function()
        if tab ~= window.CurrentTab and Settings:Get("AnimationsEnabled") then
            TweenService:Create(tabBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.BackgroundColor}):Play()
        end
    end)
    
    -- Tab click event
    tabBtn.MouseButton1Click:Connect(function()
        -- Hide all tabs
        for _, otherTab in pairs(window.Tabs) do
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(otherTab.Button, TweenInfo.new(0.1), {BackgroundColor3 = config.BackgroundColor}):Play()
            else
                otherTab.Button.BackgroundColor3 = config.BackgroundColor
            end
            otherTab.ScrollingFrame.Visible = false
        end
        
        -- Show current tab
        tabContent.Visible = true
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(tabBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.AccentColor}):Play()
        else
            tabBtn.BackgroundColor3 = config.AccentColor
        end
        window.CurrentTab = tab
    end)
    
    -- Auto-select first tab
    if #window.Tabs == 0 then
        tabContent.Visible = true
        tabBtn.BackgroundColor3 = config.AccentColor
        window.CurrentTab = tab
    end
    
    table.insert(window.Tabs, tab)
    return tab
end

-- Create Toggle
function DogHub:CreateToggle(tab, name, defaultValue, callback)
    local toggle = {
        Name = name,
        Value = defaultValue or false,
        Callback = callback or function() end,
        Type = "Toggle"
    }
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = name .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, 40)
    toggleFrame.BackgroundColor3 = config.BackgroundColor
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = tab.ScrollingFrame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 8)
    toggleCorner.Parent = toggleFrame
    
    local toggleStroke = Instance.new("UIStroke")
    toggleStroke.Color = config.OutlineColor
    toggleStroke.Thickness = 1
    toggleStroke.Transparency = 0.7
    toggleStroke.Parent = toggleFrame
    
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "Label"
    toggleLabel.Size = UDim2.new(1, -70, 1, 0)
    toggleLabel.Position = UDim2.new(0, 15, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = name
    toggleLabel.TextColor3 = config.TextColor
    toggleLabel.TextScaled = true
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Name = "ToggleBtn"
    toggleBtn.Size = UDim2.new(0, 50, 0, 25)
    toggleBtn.Position = UDim2.new(1, -60, 0.5, -12.5)
    toggleBtn.BackgroundColor3 = toggle.Value and config.AccentColor or config.DisabledColor
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Text = ""
    toggleBtn.Parent = toggleFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 12)
    btnCorner.Parent = toggleBtn
    
    local btnStroke = Instance.new("UIStroke")
    btnStroke.Color = config.SecondaryAccent
    btnStroke.Thickness = 1
    btnStroke.Transparency = 0.5
    btnStroke.Parent = toggleBtn
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "Indicator"
    toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
    toggleIndicator.Position = toggle.Value and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
    toggleIndicator.BackgroundColor3 = config.TextColor
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleBtn
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 10)
    indicatorCorner.Parent = toggleIndicator
    
    -- Store references
    toggle.Frame = toggleFrame
    
    -- Toggle function
    local function updateToggle()
        toggle.Value = not toggle.Value
        
        local targetColor = toggle.Value and config.AccentColor or config.DisabledColor
        local targetPos = toggle.Value and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
        
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(toggleBtn, TweenInfo.new(config.AnimationSpeed), {BackgroundColor3 = targetColor}):Play()
            TweenService:Create(toggleIndicator, TweenInfo.new(config.AnimationSpeed), {Position = targetPos}):Play()
        else
            toggleBtn.BackgroundColor3 = targetColor
            toggleIndicator.Position = targetPos
        end
        
        -- Save setting
        Settings.Data.ElementSettings[tab.Name .. "_" .. name] = toggle.Value
        Settings:Save()
        
        toggle.Callback(toggle.Value)
    end
    
    toggleBtn.MouseButton1Click:Connect(updateToggle)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil and savedValue ~= toggle.Value then
        updateToggle()
    end
    
    table.insert(tab.Elements, toggle)
    return toggle
end

-- Create Slider
function DogHub:CreateSlider(tab, name, minValue, maxValue, defaultValue, callback)
    local slider = {
        Name = name,
        MinValue = minValue or 0,
        MaxValue = maxValue or 100,
        Value = defaultValue or minValue or 0,
        Callback = callback or function() end,
        Type = "Slider"
    }
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = name .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 60)
    sliderFrame.BackgroundColor3 = config.BackgroundColor
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = tab.ScrollingFrame
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 8)
    sliderCorner.Parent = sliderFrame
    
    local sliderStroke = Instance.new("UIStroke")
    sliderStroke.Color = config.OutlineColor
    sliderStroke.Thickness = 1
    sliderStroke.Transparency = 0.7
    sliderStroke.Parent = sliderFrame
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Name = "Label"
    sliderLabel.Size = UDim2.new(1, -70, 0, 25)
    sliderLabel.Position = UDim2.new(0, 15, 0, 5)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = name
    sliderLabel.TextColor3 = config.TextColor
    sliderLabel.TextScaled = true
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderFrame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(0, 60, 0, 25)
    valueLabel.Position = UDim2.new(1, -65, 0, 5)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(slider.Value)
    valueLabel.TextColor3 = config.AccentColor
    valueLabel.TextScaled = true
    valueLabel.Font = Enum.Font.GothamBold
    valueLabel.Parent = sliderFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Name = "Track"
    sliderTrack.Size = UDim2.new(1, -30, 0, 6)
    sliderTrack.Position = UDim2.new(0, 15, 1, -20)
    sliderTrack.BackgroundColor3 = config.DisabledColor
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 3)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new((slider.Value - slider.MinValue) / (slider.MaxValue - slider.MinValue), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = config.AccentColor
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 3)
    fillCorner.Parent = sliderFill
    
    local sliderHandle = Instance.new("Frame")
    sliderHandle.Name = "Handle"
    sliderHandle.Size = UDim2.new(0, 16, 0, 16)
    sliderHandle.Position = UDim2.new((slider.Value - slider.MinValue) / (slider.MaxValue - slider.MinValue), -8, 0.5, -8)
    sliderHandle.BackgroundColor3 = config.TextColor
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Parent = sliderTrack
    
    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(0, 8)
    handleCorner.Parent = sliderHandle
    
    local handleStroke = Instance.new("UIStroke")
    handleStroke.Color = config.AccentColor
    handleStroke.Thickness = 2
    handleStroke.Parent = sliderHandle
    
    -- Store references
    slider.Frame = sliderFrame
    
    -- Slider dragging
    local dragging = false
    
    local function updateSlider(input)
        local trackPos = sliderTrack.AbsolutePosition.X
        local trackSize = sliderTrack.AbsoluteSize.X
        local mousePos = input.Position.X
        
        local percent = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
        local newValue = math.floor(slider.MinValue + (slider.MaxValue - slider.MinValue) * percent)
        
        if newValue ~= slider.Value then
            slider.Value = newValue
            valueLabel.Text = tostring(slider.Value)
            
            local fillSize = UDim2.new(percent, 0, 1, 0)
            local handlePos = UDim2.new(percent, -8, 0.5, -8)
            
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(sliderFill, TweenInfo.new(0.1), {Size = fillSize}):Play()
                TweenService:Create(sliderHandle, TweenInfo.new(0.1), {Position = handlePos}):Play()
            else
                sliderFill.Size = fillSize
                sliderHandle.Position = handlePos
            end
            
            -- Save setting
            Settings.Data.ElementSettings[tab.Name .. "_" .. name] = slider.Value
            Settings:Save()
            
            slider.Callback(slider.Value)
        end
    end
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil and savedValue ~= slider.Value then
        slider.Value = savedValue
        valueLabel.Text = tostring(slider.Value)
        local percent = (slider.Value - slider.MinValue) / (slider.MaxValue - slider.MinValue)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        sliderHandle.Position = UDim2.new(percent, -8, 0.5, -8)
    end
    
    table.insert(tab.Elements, slider)
    return slider
end

-- Create Button
function DogHub:CreateButton(tab, name, callback)
    local button = {
        Name = name,
        Callback = callback or function() end,
        Type = "Button"
    }
    
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = name .. "Button"
    buttonFrame.Size = UDim2.new(1, 0, 0, 40)
    buttonFrame.BackgroundColor3 = config.AccentColor
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Text = name
    buttonFrame.TextColor3 = config.TextColor
    buttonFrame.TextScaled = true
    buttonFrame.Font = Enum.Font.GothamBold
    buttonFrame.Parent = tab.ScrollingFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = buttonFrame
    
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = config.SecondaryAccent
    buttonStroke.Thickness = 2
    buttonStroke.Parent = buttonFrame
    
    -- Store references
    button.Frame = buttonFrame
    
    -- Button animations
    buttonFrame.MouseEnter:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                BackgroundColor3 = config.SecondaryAccent,
                Size = UDim2.new(1, 0, 0, 42)
            }):Play()
        end
    end)
    
    buttonFrame.MouseLeave:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.1), {
                BackgroundColor3 = config.AccentColor,
                Size = UDim2.new(1, 0, 0, 40)
            }):Play()
        end
    end)
    
    buttonFrame.MouseButton1Down:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.05), {
                Size = UDim2.new(1, 0, 0, 38)
            }):Play()
        end
    end)
    
    buttonFrame.MouseButton1Up:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(buttonFrame, TweenInfo.new(0.05), {
                Size = UDim2.new(1, 0, 0, 42)
            }):Play()
        end
    end)
    
    buttonFrame.MouseButton1Click:Connect(function()
        button.Callback()
    end)
    
    table.insert(tab.Elements, button)
    return button
end

-- Create Dropdown
function DogHub:CreateDropdown(tab, name, options, defaultValue, callback)
    local dropdown = {
        Name = name,
        Options = options or {},
        Value = defaultValue or (options and options[1]) or "",
        Callback = callback or function() end,
        Open = false,
        Type = "Dropdown"
    }
    
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = name .. "Dropdown"
    dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
    dropdownFrame.BackgroundColor3 = config.BackgroundColor
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = tab.ScrollingFrame
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 8)
    dropdownCorner.Parent = dropdownFrame
    
    local dropdownStroke = Instance.new("UIStroke")
    dropdownStroke.Color = config.OutlineColor
    dropdownStroke.Thickness = 1
    dropdownStroke.Transparency = 0.7
    dropdownStroke.Parent = dropdownFrame
    
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(0.45, 0, 1, 0)
    dropdownLabel.Position = UDim2.new(0, 15, 0, 0)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Text = name
    dropdownLabel.TextColor3 = config.TextColor
    dropdownLabel.TextScaled = true
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownFrame
    
    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Name = "DropdownBtn"
    dropdownBtn.Size = UDim2.new(0.5, 0, 0, 30)
    dropdownBtn.Position = UDim2.new(0.45, 10, 0.5, -15)
    dropdownBtn.BackgroundColor3 = config.MainColor
    dropdownBtn.BorderSizePixel = 0
    dropdownBtn.Text = dropdown.Value .. " ▼"
    dropdownBtn.TextColor3 = config.TextColor
    dropdownBtn.TextScaled = true
    dropdownBtn.Font = Enum.Font.Gotham
    dropdownBtn.Parent = dropdownFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 6)
    btnCorner.Parent = dropdownBtn
    
    local btnStroke = Instance.new("UIStroke")
    btnStroke.Color = config.AccentColor
    btnStroke.Thickness = 1
    btnStroke.Transparency = 0.5
    btnStroke.Parent = dropdownBtn
    
    -- Store references
    dropdown.Frame = dropdownFrame
    
    -- Dropdown options container
    local optionsContainer = Instance.new("Frame")
    optionsContainer.Name = "OptionsContainer"
    optionsContainer.Size = UDim2.new(0.5, 0, 0, 0)
    optionsContainer.Position = UDim2.new(0.45, 10, 1, 5)
    optionsContainer.BackgroundColor3 = config.MainColor
    optionsContainer.BorderSizePixel = 0
    optionsContainer.Visible = false
    optionsContainer.Parent = dropdownFrame
    optionsContainer.ZIndex = 10
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsContainer
    
    local optionsStroke = Instance.new("UIStroke")
    optionsStroke.Color = config.OutlineColor
    optionsStroke.Thickness = 1
    optionsStroke.Parent = optionsContainer
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsContainer
    
    -- Create option buttons
    for i, option in ipairs(dropdown.Options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Name = "Option" .. i
        optionBtn.Size = UDim2.new(1, 0, 0, 30)
        optionBtn.BackgroundColor3 = config.MainColor
        optionBtn.BorderSizePixel = 0
        optionBtn.Text = option
        optionBtn.TextColor3 = config.TextColor
        optionBtn.TextScaled = true
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.ZIndex = 11
        optionBtn.Parent = optionsContainer
        
        if i == 1 then
            local topCorner = Instance.new("UICorner")
            topCorner.CornerRadius = UDim.new(0, 6)
            topCorner.Parent = optionBtn
        elseif i == #dropdown.Options then
            local bottomCorner = Instance.new("UICorner")
            bottomCorner.CornerRadius = UDim.new(0, 6)
            bottomCorner.Parent = optionBtn
        end
        
        optionBtn.MouseEnter:Connect(function()
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(optionBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.AccentColor}):Play()
            else
                optionBtn.BackgroundColor3 = config.AccentColor
            end
        end)
        
        optionBtn.MouseLeave:Connect(function()
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(optionBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.MainColor}):Play()
            else
                optionBtn.BackgroundColor3 = config.MainColor
            end
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            dropdown.Value = option
            dropdownBtn.Text = option .. " ▼"
            
            -- Close dropdown
            dropdown.Open = false
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(optionsContainer, TweenInfo.new(0.1), {Size = UDim2.new(0.5, 0, 0, 0)}):Play()
                wait(0.1)
            end
            optionsContainer.Visible = false
            dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
            
            -- Save setting
            Settings.Data.ElementSettings[tab.Name .. "_" .. name] = dropdown.Value
            Settings:Save()
            
            dropdown.Callback(option)
        end)
    end
    
    -- Toggle dropdown
    dropdownBtn.MouseButton1Click:Connect(function()
        dropdown.Open = not dropdown.Open
        
        if dropdown.Open then
            local targetHeight = #dropdown.Options * 30
            optionsContainer.Visible = true
            
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(optionsContainer, TweenInfo.new(0.1), {
                    Size = UDim2.new(0.5, 0, 0, targetHeight)
                }):Play()
                TweenService:Create(dropdownFrame, TweenInfo.new(0.1), {
                    Size = UDim2.new(1, 0, 0, 40 + targetHeight + 5)
                }):Play()
            else
                optionsContainer.Size = UDim2.new(0.5, 0, 0, targetHeight)
                dropdownFrame.Size = UDim2.new(1, 0, 0, 40 + targetHeight + 5)
            end
            
            dropdownBtn.Text = dropdown.Value .. " ▲"
        else
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(optionsContainer, TweenInfo.new(0.1), {Size = UDim2.new(0.5, 0, 0, 0)}):Play()
                TweenService:Create(dropdownFrame, TweenInfo.new(0.1), {Size = UDim2.new(1, 0, 0, 40)}):Play()
                wait(0.1)
            else
                optionsContainer.Size = UDim2.new(0.5, 0, 0, 0)
                dropdownFrame.Size = UDim2.new(1, 0, 0, 40)
            end
            optionsContainer.Visible = false
            dropdownBtn.Text = dropdown.Value .. " ▼"
        end
    end)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil and savedValue ~= dropdown.Value then
        for _, option in ipairs(dropdown.Options) do
            if option == savedValue then
                dropdown.Value = savedValue
                dropdownBtn.Text = savedValue .. " ▼"
                break
            end
        end
    end
    
    table.insert(tab.Elements, dropdown)
    return dropdown
end

-- Create Textbox
function DogHub:CreateTextbox(tab, name, placeholder, callback)
    local textbox = {
        Name = name,
        Value = "",
        Placeholder = placeholder or "Enter text...",
        Callback = callback or function() end,
        Type = "Textbox"
    }
    
    local textboxFrame = Instance.new("Frame")
    textboxFrame.Name = name .. "Textbox"
    textboxFrame.Size = UDim2.new(1, 0, 0, 40)
    textboxFrame.BackgroundColor3 = config.BackgroundColor
    textboxFrame.BorderSizePixel = 0
    textboxFrame.Parent = tab.ScrollingFrame
    
    local textboxCorner = Instance.new("UICorner")
    textboxCorner.CornerRadius = UDim.new(0, 8)
    textboxCorner.Parent = textboxFrame
    
    local textboxStroke = Instance.new("UIStroke")
    textboxStroke.Color = config.OutlineColor
    textboxStroke.Thickness = 1
    textboxStroke.Transparency = 0.7
    textboxStroke.Parent = textboxFrame
    
    local textboxLabel = Instance.new("TextLabel")
    textboxLabel.Name = "Label"
    textboxLabel.Size = UDim2.new(0.45, 0, 1, 0)
    textboxLabel.Position = UDim2.new(0, 15, 0, 0)
    textboxLabel.BackgroundTransparency = 1
    textboxLabel.Text = name
    textboxLabel.TextColor3 = config.TextColor
    textboxLabel.TextScaled = true
    textboxLabel.Font = Enum.Font.Gotham
    textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
    textboxLabel.Parent = textboxFrame
    
    local textboxInput = Instance.new("TextBox")
    textboxInput.Name = "Input"
    textboxInput.Size = UDim2.new(0.5, 0, 0, 30)
    textboxInput.Position = UDim2.new(0.45, 10, 0.5, -15)
    textboxInput.BackgroundColor3 = config.MainColor
    textboxInput.BorderSizePixel = 0
    textboxInput.Text = ""
    textboxInput.PlaceholderText = textbox.Placeholder
    textboxInput.TextColor3 = config.TextColor
    textboxInput.PlaceholderColor3 = config.DisabledColor
    textboxInput.TextScaled = true
    textboxInput.Font = Enum.Font.Gotham
    textboxInput.Parent = textboxFrame
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 6)
    inputCorner.Parent = textboxInput
    
    local inputStroke = Instance.new("UIStroke")
    inputStroke.Color = config.AccentColor
    inputStroke.Thickness = 1
    inputStroke.Transparency = 0.5
    inputStroke.Parent = textboxInput
    
    local inputPadding = Instance.new("UIPadding")
    inputPadding.PaddingLeft = UDim.new(0, 8)
    inputPadding.PaddingRight = UDim.new(0, 8)
    inputPadding.Parent = textboxInput
    
    -- Store references
    textbox.Frame = textboxFrame
    
    -- Focus animations
    textboxInput.Focused:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(inputStroke, TweenInfo.new(0.1), {Transparency = 0}):Play()
        else
            inputStroke.Transparency = 0
        end
    end)
    
    textboxInput.FocusLost:Connect(function()
        if Settings:Get("AnimationsEnabled") then
            TweenService:Create(inputStroke, TweenInfo.new(0.1), {Transparency = 0.5}):Play()
        else
            inputStroke.Transparency = 0.5
        end
        
        textbox.Value = textboxInput.Text
        
        -- Save setting
        Settings.Data.ElementSettings[tab.Name .. "_" .. name] = textbox.Value
        Settings:Save()
        
        textbox.Callback(textboxInput.Text)
    end)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil then
        textbox.Value = savedValue
        textboxInput.Text = savedValue
    end
    
    table.insert(tab.Elements, textbox)
    return textbox
end

-- Create Label
function DogHub:CreateLabel(tab, text)
    local label = {
        Name = "Label",
        Text = text or "Label",
        Type = "Label"
    }
    
    local labelFrame = Instance.new("TextLabel")
    labelFrame.Name = "Label"
    labelFrame.Size = UDim2.new(1, 0, 0, 30)
    labelFrame.BackgroundTransparency = 1
    labelFrame.Text = text
    labelFrame.TextColor3 = config.TextColor
    labelFrame.TextScaled = true
    labelFrame.Font = Enum.Font.Gotham
    labelFrame.TextXAlignment = Enum.TextXAlignment.Left
    labelFrame.Parent = tab.ScrollingFrame
    
    local labelPadding = Instance.new("UIPadding")
    labelPadding.PaddingLeft = UDim.new(0, 15)
    labelPadding.Parent = labelFrame
    
    -- Store references
    label.Frame = labelFrame
    
    table.insert(tab.Elements, label)
    return label
end

-- Create Keybind
function DogHub:CreateKeybind(tab, name, defaultKey, callback)
    local keybind = {
        Name = name,
        Key = defaultKey or Enum.KeyCode.F,
        Callback = callback or function() end,
        Listening = false,
        Type = "Keybind"
    }
    
    local keybindFrame = Instance.new("Frame")
    keybindFrame.Name = name .. "Keybind"
    keybindFrame.Size = UDim2.new(1, 0, 0, 40)
    keybindFrame.BackgroundColor3 = config.BackgroundColor
    keybindFrame.BorderSizePixel = 0
    keybindFrame.Parent = tab.ScrollingFrame
    
    local keybindCorner = Instance.new("UICorner")
    keybindCorner.CornerRadius = UDim.new(0, 8)
    keybindCorner.Parent = keybindFrame
    
    local keybindStroke = Instance.new("UIStroke")
    keybindStroke.Color = config.OutlineColor
    keybindStroke.Thickness = 1
    keybindStroke.Transparency = 0.7
    keybindStroke.Parent = keybindFrame
    
    local keybindLabel = Instance.new("TextLabel")
    keybindLabel.Name = "Label"
    keybindLabel.Size = UDim2.new(0.6, 0, 1, 0)
    keybindLabel.Position = UDim2.new(0, 15, 0, 0)
    keybindLabel.BackgroundTransparency = 1
    keybindLabel.Text = name
    keybindLabel.TextColor3 = config.TextColor
    keybindLabel.TextScaled = true
    keybindLabel.Font = Enum.Font.Gotham
    keybindLabel.TextXAlignment = Enum.TextXAlignment.Left
    keybindLabel.Parent = keybindFrame
    
    local keybindBtn = Instance.new("TextButton")
    keybindBtn.Name = "KeybindBtn"
    keybindBtn.Size = UDim2.new(0.35, 0, 0, 30)
    keybindBtn.Position = UDim2.new(0.6, 10, 0.5, -15)
    keybindBtn.BackgroundColor3 = config.MainColor
    keybindBtn.BorderSizePixel = 0
    keybindBtn.Text = keybind.Key.Name
    keybindBtn.TextColor3 = config.TextColor
    keybindBtn.TextScaled = true
    keybindBtn.Font = Enum.Font.GothamBold
    keybindBtn.Parent = keybindFrame
    
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 6)
    btnCorner.Parent = keybindBtn
    
    local btnStroke = Instance.new("UIStroke")
    btnStroke.Color = config.AccentColor
    btnStroke.Thickness = 1
    btnStroke.Transparency = 0.5
    btnStroke.Parent = keybindBtn
    
    -- Store references
    keybind.Frame = keybindFrame
    
    -- Keybind listening
    keybindBtn.MouseButton1Click:Connect(function()
        if not keybind.Listening then
            keybind.Listening = true
            keybindBtn.Text = "..."
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(keybindBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.AccentColor}):Play()
            else
                keybindBtn.BackgroundColor3 = config.AccentColor
            end
        end
    end)
    
    local keybindConnection
    keybindConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if keybind.Listening and input.UserInputType == Enum.UserInputType.Keyboard then
            keybind.Key = input.KeyCode
            keybindBtn.Text = input.KeyCode.Name
            if Settings:Get("AnimationsEnabled") then
                TweenService:Create(keybindBtn, TweenInfo.new(0.1), {BackgroundColor3 = config.MainColor}):Play()
            else
                keybindBtn.BackgroundColor3 = config.MainColor
            end
            keybind.Listening = false
            
            -- Save setting
            Settings.Data.ElementSettings[tab.Name .. "_" .. name] = input.KeyCode.Name
            Settings:Save()
        elseif not keybind.Listening and input.KeyCode == keybind.Key then
            keybind.Callback()
        end
    end)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil then
        keybind.Key = Enum.KeyCode[savedValue] or defaultKey
        keybindBtn.Text = keybind.Key.Name
    end
    
    table.insert(tab.Elements, keybind)
    return keybind
end

-- Create Section (Separator)
function DogHub:CreateSection(tab, name)
    local section = {
        Name = name,
        Type = "Section"
    }
    
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = name .. "Section"
    sectionFrame.Size = UDim2.new(1, 0, 0, 35)
    sectionFrame.BackgroundTransparency = 1
    sectionFrame.Parent = tab.ScrollingFrame
    
    local sectionLine = Instance.new("Frame")
    sectionLine.Name = "Line"
    sectionLine.Size = UDim2.new(1, -30, 0, 2)
    sectionLine.Position = UDim2.new(0, 15, 1, -10)
    sectionLine.BackgroundColor3 = config.AccentColor
    sectionLine.BorderSizePixel = 0
    sectionLine.Parent = sectionFrame
    
    local lineCorner = Instance.new("UICorner")
    lineCorner.CornerRadius = UDim.new(0, 1)
    lineCorner.Parent = sectionLine
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(0.5, config.AccentColor),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }
    gradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(0.5, 0),
        NumberSequenceKeypoint.new(1, 1)
    }
    gradient.Parent = sectionLine
    
    local sectionLabel = Instance.new("TextLabel")
    sectionLabel.Name = "SectionLabel"
    sectionLabel.Size = UDim2.new(1, -30, 1, -15)
    sectionLabel.Position = UDim2.new(0, 15, 0, 0)
    sectionLabel.BackgroundTransparency = 1
    sectionLabel.Text = "✦ " .. name
    sectionLabel.TextColor3 = config.SecondaryAccent
    sectionLabel.TextScaled = true
    sectionLabel.Font = Enum.Font.GothamBold
    sectionLabel.TextXAlignment = Enum.TextXAlignment.Left
    sectionLabel.Parent = sectionFrame
    
    -- Store references
    section.Frame = sectionFrame
    
    table.insert(tab.Elements, section)
    return section
end

-- Enhanced Notification System
function DogHub:CreateNotification(title, text, duration, notificationType)
    if not Settings:Get("Notifications") then return end
    
    duration = duration or 3
    notificationType = notificationType or "info" -- info, success, warning, error
    
    local colors = {
        info = config.AccentColor,
        success = config.SuccessColor,
        warning = Color3.fromRGB(255, 193, 7),
        error = config.ErrorColor
    }
    
    local icons = {
        info = "ℹ️",
        success = "✅",
        warning = "⚠️",
        error = "❌"
    }
    
    -- Clean up old notifications
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui.Name == "DogHubNotification" then
            gui:Destroy()
        end
    end
    
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "DogHubNotification"
    notificationGui.Parent = playerGui
    notificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Size = UDim2.new(0, 350, 0, 90)
    notificationFrame.Position = UDim2.new(1, 10, 1, -100)
    notificationFrame.BackgroundColor3 = config.MainColor
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Parent = notificationGui
    
    local notificationCorner = Instance.new("UICorner")
    notificationCorner.CornerRadius = UDim.new(0, 10)
    notificationCorner.Parent = notificationFrame
    
    local notificationStroke = Instance.new("UIStroke")
    notificationStroke.Color = colors[notificationType]
    notificationStroke.Thickness = 2
    notificationStroke.Parent = notificationFrame
    
    -- Progress bar
    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.Size = UDim2.new(1, 0, 0, 3)
    progressBar.Position = UDim2.new(0, 0, 1, -3)
    progressBar.BackgroundColor3 = colors[notificationType]
    progressBar.BorderSizePixel = 0
    progressBar.Parent = notificationFrame
    
    local progressCorner = Instance.new("UICorner")
    progressCorner.CornerRadius = UDim.new(0, 1.5)
    progressCorner.Parent = progressBar
    
    -- Icon
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Name = "Icon"
    iconLabel.Size = UDim2.new(0, 30, 0, 30)
    iconLabel.Position = UDim2.new(0, 10, 0, 10)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = icons[notificationType]
    iconLabel.TextScaled = true
    iconLabel.Font = Enum.Font.GothamBold
    iconLabel.Parent = notificationFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -50, 0, 25)
    titleLabel.Position = UDim2.new(0, 45, 0, 8)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = colors[notificationType]
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notificationFrame
    
    -- Text
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, -50, 0, 45)
    textLabel.Position = UDim2.new(0, 45, 0, 33)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = config.TextColor
    textLabel.TextScaled = true
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextWrapped = true
    textLabel.Parent = notificationFrame
    
    -- Animate in
    if Settings:Get("AnimationsEnabled") then
        notificationFrame:TweenPosition(
            UDim2.new(1, -360, 1, -100),
            "Out",
            "Quart",
            0.5,
            true
        )
        
        -- Progress bar animation
        TweenService:Create(progressBar, TweenInfo.new(duration), {
            Size = UDim2.new(0, 0, 0, 3)
        }):Play()
    else
        notificationFrame.Position = UDim2.new(1, -360, 1, -100)
    end
    
    -- Auto remove
    spawn(function()
        wait(duration)
        
        if Settings:Get("AnimationsEnabled") then
            notificationFrame:TweenPosition(
                UDim2.new(1, 10, 1, -100),
                "In",
                "Quart",
                0.5,
                true
            )
            wait(0.5)
        end
        
        notificationGui:Destroy()
    end)
end

-- Auto-resize content function
local function updateContentSize(scrollingFrame)
    if not scrollingFrame or not scrollingFrame.Parent then return end
    
    local layout = scrollingFrame:FindFirstChild("UIListLayout")
    if layout then
        scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 30)
    end
end

-- Connect auto-resize to all scrolling frames
RunService.Heartbeat:Connect(function()
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui.Name == "DogHub" then
            for _, frame in pairs(gui:GetDescendants()) do
                if frame:IsA("ScrollingFrame") then
                    updateContentSize(frame)
                end
            end
        end
    end
end)

-- Color Picker (Advanced Feature)
function DogHub:CreateColorPicker(tab, name, defaultColor, callback)
    local colorPicker = {
        Name = name,
        Color = defaultColor or Color3.fromRGB(255, 255, 255),
        Callback = callback or function() end,
        Type = "ColorPicker",
        Open = false
    }
    
    local colorFrame = Instance.new("Frame")
    colorFrame.Name = name .. "ColorPicker"
    colorFrame.Size = UDim2.new(1, 0, 0, 40)
    colorFrame.BackgroundColor3 = config.BackgroundColor
    colorFrame.BorderSizePixel = 0
    colorFrame.Parent = tab.ScrollingFrame
    
    local colorCorner = Instance.new("UICorner")
    colorCorner.CornerRadius = UDim.new(0, 8)
    colorCorner.Parent = colorFrame
    
    local colorStroke = Instance.new("UIStroke")
    colorStroke.Color = config.OutlineColor
    colorStroke.Thickness = 1
    colorStroke.Transparency = 0.7
    colorStroke.Parent = colorFrame
    
    local colorLabel = Instance.new("TextLabel")
    colorLabel.Name = "Label"
    colorLabel.Size = UDim2.new(0.7, 0, 1, 0)
    colorLabel.Position = UDim2.new(0, 15, 0, 0)
    colorLabel.BackgroundTransparency = 1
    colorLabel.Text = name
    colorLabel.TextColor3 = config.TextColor
    colorLabel.TextScaled = true
    colorLabel.Font = Enum.Font.Gotham
    colorLabel.TextXAlignment = Enum.TextXAlignment.Left
    colorLabel.Parent = colorFrame
    
    local colorDisplay = Instance.new("TextButton")
    colorDisplay.Name = "ColorDisplay"
    colorDisplay.Size = UDim2.new(0, 60, 0, 25)
    colorDisplay.Position = UDim2.new(1, -70, 0.5, -12.5)
    colorDisplay.BackgroundColor3 = colorPicker.Color
    colorDisplay.BorderSizePixel = 0
    colorDisplay.Text = ""
    colorDisplay.Parent = colorFrame
    
    local displayCorner = Instance.new("UICorner")
    displayCorner.CornerRadius = UDim.new(0, 6)
    displayCorner.Parent = colorDisplay
    
    local displayStroke = Instance.new("UIStroke")
    displayStroke.Color = config.AccentColor
    displayStroke.Thickness = 2
    displayStroke.Parent = colorDisplay
    
    -- Store references
    colorPicker.Frame = colorFrame
    
    -- Color picker functionality (simplified)
    colorDisplay.MouseButton1Click:Connect(function()
        if not colorPicker.Open then
            colorPicker.Open = true
            
            -- Create simple RGB sliders popup
            local colorPopup = Instance.new("Frame")
            colorPopup.Name = "ColorPopup"
            colorPopup.Size = UDim2.new(0, 200, 0, 150)
            colorPopup.Position = UDim2.new(1, 10, 0, 0)
            colorPopup.BackgroundColor3 = config.MainColor
            colorPopup.BorderSizePixel = 0
            colorPopup.Parent = colorFrame
            colorPopup.ZIndex = 10
            
            local popupCorner = Instance.new("UICorner")
            popupCorner.CornerRadius = UDim.new(0, 8)
            popupCorner.Parent = colorPopup
            
            local popupStroke = Instance.new("UIStroke")
            popupStroke.Color = config.OutlineColor
            popupStroke.Thickness = 1
            popupStroke.Parent = colorPopup
            
            -- RGB Values
            local r, g, b = math.floor(colorPicker.Color.R * 255), math.floor(colorPicker.Color.G * 255), math.floor(colorPicker.Color.B * 255)
            
            -- Red Slider
            local redSlider = DogHub:CreateMiniSlider(colorPopup, "R", 0, 255, r, UDim2.new(0, 10, 0, 10), function(value)
                r = value
                colorPicker.Color = Color3.fromRGB(r, g, b)
                colorDisplay.BackgroundColor3 = colorPicker.Color
                colorPicker.Callback(colorPicker.Color)
            end)
            
            -- Green Slider
            local greenSlider = DogHub:CreateMiniSlider(colorPopup, "G", 0, 255, g, UDim2.new(0, 10, 0, 50), function(value)
                g = value
                colorPicker.Color = Color3.fromRGB(r, g, b)
                colorDisplay.BackgroundColor3 = colorPicker.Color
                colorPicker.Callback(colorPicker.Color)
            end)
            
            -- Blue Slider
            local blueSlider = DogHub:CreateMiniSlider(colorPopup, "B", 0, 255, b, UDim2.new(0, 10, 0, 90), function(value)
                b = value
                colorPicker.Color = Color3.fromRGB(r, g, b)
                colorDisplay.BackgroundColor3 = colorPicker.Color
                colorPicker.Callback(colorPicker.Color)
            end)
            
            -- Close button
            local closeBtn = Instance.new("TextButton")
            closeBtn.Name = "Close"
            closeBtn.Size = UDim2.new(0, 20, 0, 20)
            closeBtn.Position = UDim2.new(1, -25, 0, 5)
            closeBtn.BackgroundColor3 = config.ErrorColor
            closeBtn.BorderSizePixel = 0
            closeBtn.Text = "×"
            closeBtn.TextColor3 = config.TextColor
            closeBtn.TextScaled = true
            closeBtn.Font = Enum.Font.GothamBold
            closeBtn.Parent = colorPopup
            
            local closeBtnCorner = Instance.new("UICorner")
            closeBtnCorner.CornerRadius = UDim.new(0, 4)
            closeBtnCorner.Parent = closeBtn
            
            closeBtn.MouseButton1Click:Connect(function()
                colorPopup:Destroy()
                colorPicker.Open = false
            end)
            
            -- Save setting
            Settings.Data.ElementSettings[tab.Name .. "_" .. name] = {r, g, b}
            Settings:Save()
        end
    end)
    
    -- Load saved value
    local savedValue = Settings.Data.ElementSettings[tab.Name .. "_" .. name]
    if savedValue ~= nil and type(savedValue) == "table" then
        colorPicker.Color = Color3.fromRGB(savedValue[1], savedValue[2], savedValue[3])
        colorDisplay.BackgroundColor3 = colorPicker.Color
    end
    
    table.insert(tab.Elements, colorPicker)
    return colorPicker
end

-- Mini slider for color picker
function DogHub:CreateMiniSlider(parent, label, min, max, default, position, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = label .. "Slider"
    sliderFrame.Size = UDim2.new(1, -20, 0, 30)
    sliderFrame.Position = position
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Size = UDim2.new(0, 15, 1, 0)
    sliderLabel.Position = UDim2.new(0, 0, 0, 0)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = label
    sliderLabel.TextColor3 = config.TextColor
    sliderLabel.TextScaled = true
    sliderLabel.Font = Enum.Font.GothamBold
    sliderLabel.Parent = sliderFrame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 30, 1, 0)
    valueLabel.Position = UDim2.new(1, -30, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(default)
    valueLabel.TextColor3 = config.AccentColor
    valueLabel.TextScaled = true
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.Parent = sliderFrame
    
    local track = Instance.new("Frame")
    track.Size = UDim2.new(1, -50, 0, 4)
    track.Position = UDim2.new(0, 20, 0.5, -2)
    track.BackgroundColor3 = config.DisabledColor
    track.BorderSizePixel = 0
    track.Parent = sliderFrame
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 2)
    trackCorner.Parent = track
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.Position = UDim2.new(0, 0, 0, 0)
    fill.BackgroundColor3 = config.AccentColor
    fill.BorderSizePixel = 0
    fill.Parent = track
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 2)
    fillCorner.Parent = fill
    
    local value = default
    local dragging = false
    
    local function updateSlider(input)
        local trackPos = track.AbsolutePosition.X
        local trackSize = track.AbsoluteSize.X
        local mousePos = input.Position.X
        
        local percent = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
        value = math.floor(min + (max - min) * percent)
        
        valueLabel.Text = tostring(value)
        fill.Size = UDim2.new(percent, 0, 1, 0)
        
        callback(value)
    end
    
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return {Value = value, Update = updateSlider}
end

-- Example Usage Function with ALL features
function DogHub:Example()
    -- Create main window
    local window = self:CreateWindow("DOGHUB Advanced")
    
    -- Create tabs with different icons
    local farmingTab = self:CreateTab(window, "Farming", "🌾")
    local visualsTab = self:CreateTab(window, "Visuals", "🎯")
    local playerTab = self:CreateTab(window, "Player", "👤")
    local funTab = self:CreateTab(window, "Fun", "🎮")
    local settingsTab = self:CreateTab(window, "Settings", "⚙️")
    
    -- === FARMING TAB ===
    self:CreateSection(farmingTab, "Auto Farm")
    
    self:CreateToggle(farmingTab, "Auto Farm Enabled", false, function(value)
        print("Auto Farm:", value)
        if value then
            self:CreateNotification("Auto Farm", "Auto farming enabled!", 2, "success")
        end
    end)
    
    self:CreateSlider(farmingTab, "Farm Speed", 1, 10, 5, function(value)
        print("Farm Speed:", value)
    end)
    
    self:CreateDropdown(farmingTab, "Farm Target", {"Coins", "XP", "Items", "All"}, "Coins", function(value)
        print("Farm Target:", value)
    end)
    
    self:CreateSection(farmingTab, "Auto Collect")
    
    self:CreateToggle(farmingTab, "Auto Collect Items", false, function(value)
        print("Auto Collect:", value)
    end)
    
    self:CreateKeybind(farmingTab, "Emergency Stop", Enum.KeyCode.X, function()
        print("Emergency stop activated!")
        self:CreateNotification("Emergency Stop", "All farming stopped!", 2, "warning")
    end)
    
    -- === VISUALS TAB ===
    self:CreateSection(visualsTab, "ESP Features")
    
    self:CreateToggle(visualsTab, "Player ESP", false, function(value)
        print("Player ESP:", value)
    end)
    
    self:CreateToggle(visualsTab, "Item ESP", false, function(value)
        print("Item ESP:", value)
    end)
    
    self:CreateColorPicker(visualsTab, "ESP Color", Color3.fromRGB(255, 0, 0), function(color)
        print("ESP Color:", color)
    end)
    
    self:CreateSection(visualsTab, "Environment")
    
    self:CreateToggle(visualsTab, "Full Bright", false, function(value)
        print("Full Bright:", value)
        game.Lighting.Brightness = value and 10 or 1
    end)
    
    self:CreateSlider(visualsTab, "FOV", 70, 120, 90, function(value)
        print("FOV:", value)
        workspace.CurrentCamera.FieldOfView = value
    end)
    
    -- === PLAYER TAB ===
    self:CreateSection(playerTab, "Movement")
    
    self:CreateSlider(playerTab, "Walk Speed", 16, 100, 16, function(value)
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.WalkSpeed = value
        end
    end)
    
    self:CreateSlider(playerTab, "Jump Power", 50, 200, 50, function(value)
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = value
        end
    end)
    
    self:CreateToggle(playerTab, "Infinite Jump", false, function(value)
        print("Infinite Jump:", value)
        -- Add infinite jump logic here
    end)
    
    self:CreateSection(playerTab, "Abilities")
    
    self:CreateToggle(playerTab, "No Clip", false, function(value)
        print("No Clip:", value)
        -- Add noclip logic here
    end)
    
    self:CreateKeybind(playerTab, "Fly Toggle", Enum.KeyCode.F, function()
        print("Fly toggled!")
        self:CreateNotification("Fly", "Flight mode toggled!", 2, "info")
    end)
    
    -- === FUN TAB ===
    self:CreateSection(funTab, "Trolling")
    
    self:CreateButton(funTab, "Dance Party", function()
        print("Starting dance party!")
        self:CreateNotification("Dance Party", "🕺 Let's dance! 💃", 3, "success")
    end)
    
    self:CreateButton(funTab, "Spam Chat", function()
        print("Spam chat activated!")
        self:CreateNotification("Spam Chat", "Spam mode activated!", 2, "warning")
    end)
    
    self:CreateTextbox(funTab, "Custom Message", "Type your message...", function(text)
        print("Custom Message:", text)
        if text ~= "" then
            self:CreateNotification("Message Set", "Custom message: " .. text, 2, "info")
        end
    end)
    
    self:CreateSection(funTab, "Effects")
    
    self:CreateDropdown(funTab, "Particle Effect", {"None", "Fire", "Smoke", "Sparkles", "Rainbow"}, "None", function(value)
        print("Particle Effect:", value)
    end)
    
    -- === SETTINGS TAB ===
    self:CreateSection(settingsTab, "UI Configuration")
    
    self:CreateDropdown(settingsTab, "UI Theme", {"Dark", "Light", "Neon", "Forest", "Sunset"}, window.Theme, function(value)
        window.Theme = value
        Settings:Set("Theme", value)
        self:UpdateTheme(window)
        self:CreateNotification("Theme Changed", "Applied " .. value .. " theme", 2, "success")
    end)
    
    self:CreateToggle(settingsTab, "Auto Save Settings", Settings:Get("AutoSave"), function(value)
        Settings:Set("AutoSave", value)
    end)
    
    self:CreateToggle(settingsTab, "Show Notifications", Settings:Get("Notifications"), function(value)
        Settings:Set("Notifications", value)
    end)
    
    self:CreateToggle(settingsTab, "Enable Animations", Settings:Get("AnimationsEnabled"), function(value)
        Settings:Set("AnimationsEnabled", value)
    end)
    
    self:CreateSection(settingsTab, "Controls")
    
    self:CreateDropdown(settingsTab, "UI Toggle Key", {
        "Insert", "F1", "F2", "F3", "F4", "F5", "Home", "End", 
        "PageUp", "PageDown", "Delete", "Backspace", "Tab"
    }, Settings:Get("ToggleKey"), function(value)
        Settings:Set("ToggleKey", value)
        window.ToggleKey = Enum.KeyCode[value] or Enum.KeyCode.Insert
        self:CreateNotification("Toggle Key", "Changed to: " .. value, 2, "info")
    end)
    
    self:CreateSection(settingsTab, "Actions")
    
    self:CreateButton(settingsTab, "🔄 Reset All Settings", function()
        Settings.Data = {
            Theme = "Dark",
            WindowPosition = {X = 0.5, Y = 0.5},
            WindowSize = {Width = 500, Height = 350},
            ToggleKey = "Insert",
            AutoSave = true,
            Notifications = true,
            AnimationsEnabled = true,
            ElementSettings = {}
        }
        Settings:Save()
        self:CreateNotification("Settings Reset", "All settings reset to default", 3, "success")
    end)
    
    self:CreateButton(settingsTab, "🗑️ Destroy UI", function()
        self:DestroyUI(window)
    end)
    
    self:CreateLabel(settingsTab, "")
    self:CreateLabel(settingsTab, "Made with ❤️ by DOGHUB Team")
    self:CreateLabel(settingsTab, "Version 2.0 - Advanced Edition")
    
    return window
end

return DogHub
