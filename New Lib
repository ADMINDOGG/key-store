-- UI Library Framework
local UILibrary = {}
UILibrary.__index = UILibrary

-- Storage for UI elements and configurations
local windows = {}
local tabs = {}
local elements = {}
local configurations = {}
local theme = {
    primary = {255, 255, 255},
    secondary = {200, 200, 200},
    accent = {100, 150, 255},
    background = {45, 45, 45},
    text = {255, 255, 255}
}

-- Utility functions
local function generateId()
    return tostring(math.random(100000, 999999))
end

local function validateElement(element)
    return element and type(element) == "table" and element.id
end

-- Window Functions
function UILibrary.CreateWindow(title, width, height, x, y)
    local window = {
        id = generateId(),
        title = title or "Window",
        width = width or 400,
        height = height or 300,
        x = x or 100,
        y = y or 100,
        visible = true,
        draggable = true,
        tabs = {},
        elements = {}
    }
    
    windows[window.id] = window
    return window
end

-- Tab Functions
function UILibrary.CreateTab(window, name)
    if not validateElement(window) then
        error("Invalid window provided")
    end
    
    local tab = {
        id = generateId(),
        name = name or "Tab",
        window_id = window.id,
        active = #window.tabs == 0, -- First tab is active by default
        sections = {},
        elements = {}
    }
    
    table.insert(window.tabs, tab)
    tabs[tab.id] = tab
    return tab
end

function UILibrary.CreateSection(tab, name)
    if not validateElement(tab) then
        error("Invalid tab provided")
    end
    
    local section = {
        id = generateId(),
        name = name or "Section",
        tab_id = tab.id,
        elements = {}
    }
    
    table.insert(tab.sections, section)
    return section
end

-- UI Elements
function UILibrary.CreateButton(parent, text, callback)
    local button = {
        id = generateId(),
        type = "button",
        text = text or "Button",
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, button)
    elements[button.id] = button
    return button
end

function UILibrary.CreateToggle(parent, text, default_value, callback)
    local toggle = {
        id = generateId(),
        type = "toggle",
        text = text or "Toggle",
        value = default_value or false,
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, toggle)
    elements[toggle.id] = toggle
    return toggle
end

function UILibrary.CreateSlider(parent, text, min_value, max_value, default_value, callback)
    local slider = {
        id = generateId(),
        type = "slider",
        text = text or "Slider",
        min = min_value or 0,
        max = max_value or 100,
        value = default_value or 50,
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, slider)
    elements[slider.id] = slider
    return slider
end

function UILibrary.CreateDropdown(parent, text, options, default_index, callback)
    local dropdown = {
        id = generateId(),
        type = "dropdown",
        text = text or "Dropdown",
        options = options or {"Option 1", "Option 2"},
        selected_index = default_index or 1,
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, dropdown)
    elements[dropdown.id] = dropdown
    return dropdown
end

function UILibrary.CreateInput(parent, text, placeholder, callback)
    local input = {
        id = generateId(),
        type = "input",
        text = text or "Input",
        placeholder = placeholder or "Enter text...",
        value = "",
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, input)
    elements[input.id] = input
    return input
end

function UILibrary.CreateParagraph(parent, text)
    local paragraph = {
        id = generateId(),
        type = "paragraph",
        text = text or "Paragraph text",
        parent_id = parent.id,
        visible = true
    }
    
    table.insert(parent.elements, paragraph)
    elements[paragraph.id] = paragraph
    return paragraph
end

function UILibrary.CreateLabel(parent, text)
    local label = {
        id = generateId(),
        type = "label",
        text = text or "Label",
        parent_id = parent.id,
        visible = true
    }
    
    table.insert(parent.elements, label)
    elements[label.id] = label
    return label
end

function UILibrary.CreateKeybind(parent, text, default_key, callback)
    local keybind = {
        id = generateId(),
        type = "keybind",
        text = text or "Keybind",
        key = default_key or "None",
        callback = callback or function() end,
        parent_id = parent.id,
        enabled = true,
        visible = true
    }
    
    table.insert(parent.elements, keybind)
    elements[keybind.id] = keybind
    return keybind
end

-- System / Utility Functions
function UILibrary.Notify(title, message, duration)
    local notification = {
        title = title or "Notification",
        message = message or "",
        duration = duration or 3000,
        timestamp = os.time()
    }
    
    -- Here you would implement the actual notification display logic
    print(string.format("[%s] %s", notification.title, notification.message))
    return notification
end

function UILibrary.Set(element, property, value)
    if not validateElement(element) then
        return false
    end
    
    if element[property] ~= nil then
        local old_value = element[property]
        element[property] = value
        
        -- Trigger callback if it's a value change
        if property == "value" and element.callback then
            element.callback(value, old_value)
        end
        
        return true
    end
    
    return false
end

function UILibrary.Get(element, property)
    if not validateElement(element) then
        return nil
    end
    
    return element[property]
end

function UILibrary.Destroy(element)
    if not validateElement(element) then
        return false
    end
    
    -- Remove from parent's elements list
    for _, window in pairs(windows) do
        for i, elem in ipairs(window.elements) do
            if elem.id == element.id then
                table.remove(window.elements, i)
                break
            end
        end
        
        for _, tab in ipairs(window.tabs) do
            for i, elem in ipairs(tab.elements) do
                if elem.id == element.id then
                    table.remove(tab.elements, i)
                    break
                end
            end
            
            for _, section in ipairs(tab.sections) do
                for i, elem in ipairs(section.elements) do
                    if elem.id == element.id then
                        table.remove(section.elements, i)
                        break
                    end
                end
            end
        end
    end
    
    -- Remove from global elements
    elements[element.id] = nil
    return true
end

-- Optional Functions
function UILibrary.SaveConfiguration(filename)
    filename = filename or "config.json"
    
    local config = {
        windows = windows,
        tabs = tabs,
        elements = elements,
        theme = theme,
        timestamp = os.time()
    }
    
    configurations[filename] = config
    
    -- In a real implementation, you would save to file
    print("Configuration saved to " .. filename)
    return true
end

function UILibrary.LoadConfiguration(filename)
    filename = filename or "config.json"
    
    if configurations[filename] then
        local config = configurations[filename]
        windows = config.windows or {}
        tabs = config.tabs or {}
        elements = config.elements or {}
        theme = config.theme or theme
        
        print("Configuration loaded from " .. filename)
        return true
    end
    
    print("Configuration file not found: " .. filename)
    return false
end

function UILibrary.SetThemeColor(color_name, r, g, b)
    if theme[color_name] then
        theme[color_name] = {r, g, b}
        return true
    end
    return false
end

function UILibrary.SetDraggable(window, draggable)
    if not validateElement(window) then
        return false
    end
    
    window.draggable = draggable
    return true
end

-- Helper function to get all elements
function UILibrary.GetAllElements()
    return elements
end

-- Helper function to get all windows
function UILibrary.GetAllWindows()
    return windows
end

-- Example usage
function UILibrary.Example()
    -- Create a window
    local mainWindow = UILibrary.CreateWindow("Main Window", 500, 400, 100, 100)
    
    -- Create tabs
    local homeTab = UILibrary.CreateTab(mainWindow, "Home")
    local settingsTab = UILibrary.CreateTab(mainWindow, "Settings")
    
    -- Create sections
    local generalSection = UILibrary.CreateSection(homeTab, "General")
    local controlsSection = UILibrary.CreateSection(settingsTab, "Controls")
    
    -- Create UI elements
    local button = UILibrary.CreateButton(generalSection, "Click Me!", function()
        UILibrary.Notify("Button Clicked", "The button was pressed!")
    end)
    
    local toggle = UILibrary.CreateToggle(generalSection, "Enable Feature", true, function(value)
        print("Toggle changed to:", value)
    end)
    
    local slider = UILibrary.CreateSlider(generalSection, "Volume", 0, 100, 50, function(value)
        print("Volume set to:", value)
    end)
    
    local dropdown = UILibrary.CreateDropdown(settingsTab, "Theme", {"Dark", "Light", "Auto"}, 1, function(index)
        print("Theme changed to:", index)
    end)
    
    local input = UILibrary.CreateInput(settingsTab, "Username", "Enter your name...", function(text)
        print("Username:", text)
    end)
    
    local keybind = UILibrary.CreateKeybind(controlsSection, "Jump", "SPACE", function()
        print("Jump key pressed!")
    end)
    
    -- Add some labels and paragraphs
    UILibrary.CreateLabel(generalSection, "Welcome to the UI Library!")
    UILibrary.CreateParagraph(generalSection, "This is an example of how to use the UI library functions.")
    
    -- Save configuration
    UILibrary.SaveConfiguration("example_config.json")
    
    return mainWindow
end

return UILibrary
