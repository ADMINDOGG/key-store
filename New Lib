-- DOGHUB GUI Library Enhanced v2.1
-- Premium GUI library with modern design and advanced features

local DogHub = {}
DogHub.__index = DogHub
DogHub.Version = "2.0.0"

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Debris = game:GetService("Debris")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Enhanced Configuration
local config = {
    -- Colors (Modern Dark Theme)
    Primary = Color3.fromRGB(30, 35, 50),           -- Main background
    Secondary = Color3.fromRGB(40, 45, 65),         -- Secondary background
    Accent = Color3.fromRGB(88, 166, 255),          -- Accent blue
    AccentDark = Color3.fromRGB(65, 145, 235),      -- Darker accent
    Success = Color3.fromRGB(85, 255, 125),         -- Success green
    Warning = Color3.fromRGB(255, 195, 85),         -- Warning orange
    Error = Color3.fromRGB(255, 95, 95),            -- Error red
    Text = Color3.fromRGB(255, 255, 255),           -- Primary text
    TextSecondary = Color3.fromRGB(180, 185, 195),  -- Secondary text
    TextDisabled = Color3.fromRGB(120, 125, 135),   -- Disabled text
    Border = Color3.fromRGB(70, 80, 100),           -- Border color
    Shadow = Color3.fromRGB(0, 0, 0),               -- Shadow
    
    -- Animation
    AnimationSpeed = 0.25,
    EasingStyle = Enum.EasingStyle.Quart,
    EasingDirection = Enum.EasingDirection.Out,
    
    -- Sizing
    WindowSize = Vector2.new(550, 400),
    SidebarWidth = 160,
    ElementHeight = 40,
    Padding = 12,
    CornerRadius = 8,
    
    -- Effects
    GlowIntensity = 0.8,
    ShadowTransparency = 0.6
}

-- Utility Functions
local function createCorner(radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or config.CornerRadius)
    return corner
end

local function createStroke(color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or config.Border
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    return stroke
end

local function createGradient(colorSequence, rotation)
    local gradient = Instance.new("UIGradient")
    if colorSequence then
        gradient.Color = colorSequence
    end
    gradient.Rotation = rotation or 0
    return gradient
end

local function createPadding(left, right, top, bottom)
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, left or config.Padding)
    padding.PaddingRight = UDim.new(0, right or config.Padding)
    padding.PaddingTop = UDim.new(0, top or config.Padding)
    padding.PaddingBottom = UDim.new(0, bottom or config.Padding)
    return padding
end

local function animateElement(element, properties, duration, style, direction)
    local tween = TweenService:Create(
        element,
        TweenInfo.new(
            duration or config.AnimationSpeed,
            style or config.EasingStyle,
            direction or config.EasingDirection
        ),
        properties
    )
    tween:Play()
    return tween
end

-- Create Window
function DogHub:CreateWindow(options)
    options = options or {}
    
    local window = {
        Title = options.Title or "DOGHUB",
        Subtitle = options.Subtitle or "Premium GUI Library",
        Size = options.Size or config.WindowSize,
        Theme = options.Theme or "Dark",
        Tabs = {},
        CurrentTab = nil,
        Minimized = false,
        Elements = {}
    }
    
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "DogHub_" .. tick()
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Main Container
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "MainContainer"
    mainContainer.Size = UDim2.new(0, window.Size.X, 0, window.Size.Y)
    mainContainer.Position = UDim2.new(0.5, -window.Size.X/2, 0.5, -window.Size.Y/2)
    mainContainer.BackgroundColor3 = config.Primary
    mainContainer.BorderSizePixel = 0
    mainContainer.ClipsDescendants = true
    mainContainer.Parent = screenGui
    
    createCorner(config.CornerRadius).Parent = mainContainer
    createStroke(config.Border, 1, 0.3).Parent = mainContainer
    
    -- Drop Shadow Effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.Position = UDim2.new(0, -20, 0, -20)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    shadow.ImageColor3 = config.Shadow
    shadow.ImageTransparency = config.ShadowTransparency
    shadow.ZIndex = -1
    shadow.Parent = mainContainer
    
    -- Header Bar
    local headerBar = Instance.new("Frame")
    headerBar.Name = "HeaderBar"
    headerBar.Size = UDim2.new(1, 0, 0, 50)
    headerBar.Position = UDim2.new(0, 0, 0, 0)
    headerBar.BackgroundColor3 = config.Secondary
    headerBar.BorderSizePixel = 0
    headerBar.Parent = mainContainer
    
    local headerGradient = createGradient(ColorSequence.new{
        ColorSequenceKeypoint.new(0, config.Accent),
        ColorSequenceKeypoint.new(1, config.AccentDark)
    }, 45)
    headerGradient.Parent = headerBar
    
    createCorner(config.CornerRadius).Parent = headerBar
    
    -- Title Section
    local titleContainer = Instance.new("Frame")
    titleContainer.Name = "TitleContainer"
    titleContainer.Size = UDim2.new(1, -100, 1, 0)
    titleContainer.Position = UDim2.new(0, 0, 0, 0)
    titleContainer.BackgroundTransparency = 1
    titleContainer.Parent = headerBar
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, 0, 0.6, 0)
    titleLabel.Position = UDim2.new(0, 15, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = window.Title
    titleLabel.TextColor3 = config.Text
    titleLabel.TextSize = 18
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleContainer
    
    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Name = "Subtitle"
    subtitleLabel.Size = UDim2.new(1, 0, 0.4, 0)
    subtitleLabel.Position = UDim2.new(0, 15, 0.6, 0)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = window.Subtitle
    subtitleLabel.TextColor3 = config.TextSecondary
    subtitleLabel.TextSize = 12
    subtitleLabel.Font = Enum.Font.Gotham
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.Parent = titleContainer
    
    -- Control Buttons
    local controlsContainer = Instance.new("Frame")
    controlsContainer.Name = "Controls"
    controlsContainer.Size = UDim2.new(0, 90, 0, 30)
    controlsContainer.Position = UDim2.new(1, -100, 0.5, -15)
    controlsContainer.BackgroundTransparency = 1
    controlsContainer.Parent = headerBar
    
    -- Minimize Button
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Name = "MinimizeBtn"
    minimizeBtn.Size = UDim2.new(0, 25, 0, 25)
    minimizeBtn.Position = UDim2.new(0, 0, 0, 0)
    minimizeBtn.BackgroundColor3 = Color3.fromRGB(255, 195, 85)
    minimizeBtn.BorderSizePixel = 0
    minimizeBtn.Text = "−"
    minimizeBtn.TextColor3 = config.Text
    minimizeBtn.TextSize = 16
    minimizeBtn.Font = Enum.Font.GothamBold
    minimizeBtn.Parent = controlsContainer
    
    createCorner(4).Parent = minimizeBtn
    
    -- Maximize Button (Future feature)
    local maximizeBtn = Instance.new("TextButton")
    maximizeBtn.Name = "MaximizeBtn"
    maximizeBtn.Size = UDim2.new(0, 25, 0, 25)
    maximizeBtn.Position = UDim2.new(0, 32, 0, 0)
    maximizeBtn.BackgroundColor3 = Color3.fromRGB(85, 255, 125)
    maximizeBtn.BorderSizePixel = 0
    maximizeBtn.Text = "□"
    maximizeBtn.TextColor3 = config.Text
    maximizeBtn.TextSize = 14
    maximizeBtn.Font = Enum.Font.GothamBold
    maximizeBtn.Parent = controlsContainer
    
    createCorner(4).Parent = maximizeBtn
    
    -- Close Button
    local closeBtn = Instance.new("TextButton")
    closeBtn.Name = "CloseBtn"
    closeBtn.Size = UDim2.new(0, 25, 0, 25)
    closeBtn.Position = UDim2.new(0, 64, 0, 0)
    closeBtn.BackgroundColor3 = config.Error
    closeBtn.BorderSizePixel = 0
    closeBtn.Text = "×"
    closeBtn.TextColor3 = config.Text
    closeBtn.TextSize = 16
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Parent = controlsContainer
    
    createCorner(4).Parent = closeBtn
    
    -- Sidebar
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.Size = UDim2.new(0, config.SidebarWidth, 1, -50)
    sidebar.Position = UDim2.new(0, 0, 0, 50)
    sidebar.BackgroundColor3 = config.Secondary
    sidebar.BorderSizePixel = 0
    sidebar.Parent = mainContainer
    
    createStroke(config.Border, 1, 0.5).Parent = sidebar
    
    -- Sidebar Content
    local sidebarScroll = Instance.new("ScrollingFrame")
    sidebarScroll.Name = "SidebarScroll"
    sidebarScroll.Size = UDim2.new(1, 0, 1, 0)
    sidebarScroll.Position = UDim2.new(0, 0, 0, 0)
    sidebarScroll.BackgroundTransparency = 1
    sidebarScroll.BorderSizePixel = 0
    sidebarScroll.ScrollBarThickness = 3
    sidebarScroll.ScrollBarImageColor3 = config.Accent
    sidebarScroll.Parent = sidebar
    
    local sidebarLayout = Instance.new("UIListLayout")
    sidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sidebarLayout.Padding = UDim.new(0, 4)
    sidebarLayout.Parent = sidebarScroll
    
    createPadding(8, 8, 8, 8).Parent = sidebarScroll
    
    -- Main Content Area
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.Size = UDim2.new(1, -config.SidebarWidth, 1, -50)
    contentArea.Position = UDim2.new(0, config.SidebarWidth, 0, 50)
    contentArea.BackgroundColor3 = config.Primary
    contentArea.BorderSizePixel = 0
    contentArea.Parent = mainContainer
    
    -- Store references
    window.ScreenGui = screenGui
    window.MainContainer = mainContainer
    window.Sidebar = sidebarScroll
    window.ContentArea = contentArea
    window.MinimizeBtn = minimizeBtn
    window.MaximizeBtn = maximizeBtn
    window.CloseBtn = closeBtn
    
    -- Welcome Animation & Notification
    spawn(function()
        mainContainer.Size = UDim2.new(0, 0, 0, 0)
        animateElement(mainContainer, {
            Size = UDim2.new(0, window.Size.X, 0, window.Size.Y)
        }, 0.5, Enum.EasingStyle.Back)
        
        wait(0.6)
        DogHub:CreateNotification({
            Title = "DOGHUB",
            Message = "Welcome to DOGHUB v" .. DogHub.Version .. "! 🐕✨",
            Type = "Success",
            Duration = 3
        })
    end)
    
    -- Dragging System
    local dragging = false
    local dragInput, mousePos, framePos
    
    headerBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = mainContainer.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - mousePos
            mainContainer.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Minimize Function
    minimizeBtn.MouseButton1Click:Connect(function()
        window.Minimized = not window.Minimized
        local targetSize = window.Minimized and 
            UDim2.new(0, window.Size.X, 0, 50) or 
            UDim2.new(0, window.Size.X, 0, window.Size.Y)
        
        minimizeBtn.Text = window.Minimized and "+" or "−"
        animateElement(mainContainer, {Size = targetSize})
        
        DogHub:CreateNotification({
            Title = "DOGHUB",
            Message = window.Minimized and "Window minimized" or "Window restored",
            Type = "Info",
            Duration = 1.5
        })
    end)
    
    -- Close Function
    closeBtn.MouseButton1Click:Connect(function()
        animateElement(mainContainer, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3)
        
        wait(0.3)
        screenGui:Destroy()
    end)
    
    -- Toggle Keybind
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.KeyCode == Enum.KeyCode.Insert then
            mainContainer.Visible = not mainContainer.Visible
            if mainContainer.Visible then
                DogHub:CreateNotification({
                    Title = "DOGHUB",
                    Message = "UI Toggled - Press Insert to hide/show",
                    Type = "Info",
                    Duration = 2
                })
            end
        end
    end)
    
    return window
end

-- Create Tab
function DogHub:CreateTab(window, options)
    options = options or {}
    
    local tab = {
        Name = options.Name or "Tab",
        Icon = options.Icon or "⚙️",
        Description = options.Description or "",
        Elements = {},
        Visible = false,
        Window = window
    }
    
    -- Tab Button
    local tabBtn = Instance.new("TextButton")
    tabBtn.Name = tab.Name .. "TabBtn"
    tabBtn.Size = UDim2.new(1, 0, 0, config.ElementHeight)
    tabBtn.BackgroundColor3 = config.Secondary
    tabBtn.BorderSizePixel = 0
    tabBtn.Text = ""
    tabBtn.Parent = window.Sidebar
    
    createCorner(6).Parent = tabBtn
    
    -- Tab Content Container
    local tabContainer = Instance.new("Frame")
    tabContainer.Name = "TabContainer"
    tabContainer.Size = UDim2.new(1, 0, 1, 0)
    tabContainer.BackgroundTransparency = 1
    tabContainer.Parent = tabBtn
    
    -- Tab Icon
    local tabIcon = Instance.new("TextLabel")
    tabIcon.Name = "Icon"
    tabIcon.Size = UDim2.new(0, 20, 0, 20)
    tabIcon.Position = UDim2.new(0, 12, 0.5, -10)
    tabIcon.BackgroundTransparency = 1
    tabIcon.Text = tab.Icon
    tabIcon.TextColor3 = config.TextSecondary
    tabIcon.TextSize = 16
    tabIcon.Font = Enum.Font.Gotham
    tabIcon.Parent = tabContainer
    
    -- Tab Label
    local tabLabel = Instance.new("TextLabel")
    tabLabel.Name = "Label"
    tabLabel.Size = UDim2.new(1, -40, 1, 0)
    tabLabel.Position = UDim2.new(0, 40, 0, 0)
    tabLabel.BackgroundTransparency = 1
    tabLabel.Text = tab.Name
    tabLabel.TextColor3 = config.TextSecondary
    tabLabel.TextSize = 14
    tabLabel.Font = Enum.Font.Gotham
    tabLabel.TextXAlignment = Enum.TextXAlignment.Left
    tabLabel.Parent = tabContainer
    
    -- Tab Content Area
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Name = tab.Name .. "Content"
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Position = UDim2.new(0, 0, 0, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.BorderSizePixel = 0
    tabContent.ScrollBarThickness = 3
    tabContent.ScrollBarImageColor3 = config.Accent
    tabContent.Visible = false
    tabContent.Parent = window.ContentArea
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 8)
    contentLayout.Parent = tabContent
    
    createPadding(config.Padding, config.Padding, config.Padding, config.Padding).Parent = tabContent
    
    tab.Button = tabBtn
    tab.Content = tabContent
    tab.Icon = tabIcon
    tab.Label = tabLabel
    
    -- Tab Selection
    tabBtn.MouseButton1Click:Connect(function()
        -- Deselect all tabs
        for _, otherTab in pairs(window.Tabs) do
            otherTab.Content.Visible = false
            animateElement(otherTab.Button, {BackgroundColor3 = config.Secondary})
            animateElement(otherTab.Icon, {TextColor3 = config.TextSecondary})
            animateElement(otherTab.Label, {TextColor3 = config.TextSecondary})
        end
        
        -- Select current tab
        tabContent.Visible = true
        animateElement(tabBtn, {BackgroundColor3 = config.Accent})
        animateElement(tabIcon, {TextColor3 = config.Text})
        animateElement(tabLabel, {TextColor3 = config.Text})
        window.CurrentTab = tab
    end)
    
    -- Hover Effects
    tabBtn.MouseEnter:Connect(function()
        if window.CurrentTab ~= tab then
            animateElement(tabBtn, {BackgroundColor3 = Color3.fromRGB(50, 55, 75)})
        end
    end)
    
    tabBtn.MouseLeave:Connect(function()
        if window.CurrentTab ~= tab then
            animateElement(tabBtn, {BackgroundColor3 = config.Secondary})
        end
    end)
    
    -- Auto-select first tab
    if #window.Tabs == 0 then
        tabContent.Visible = true
        tabBtn.BackgroundColor3 = config.Accent
        tabIcon.TextColor3 = config.Text
        tabLabel.TextColor3 = config.Text
        window.CurrentTab = tab
    end
    
    table.insert(window.Tabs, tab)
    return tab
end

-- Enhanced Notification System
function DogHub:CreateNotification(options)
    options = options or {}
    
    local notification = {
        Title = options.Title or "Notification",
        Message = options.Message or "No message provided",
        Type = options.Type or "Info", -- Info, Success, Warning, Error
        Duration = options.Duration or 3,
        Position = options.Position or "TopRight"
    }
    
    local colors = {
        Info = config.Accent,
        Success = config.Success,
        Warning = config.Warning,
        Error = config.Error
    }
    
    local icons = {
        Info = "ℹ️",
        Success = "✅",
        Warning = "⚠️",
        Error = "❌"
    }
    
    -- Create notification GUI
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "DogHubNotification"
    notificationGui.Parent = playerGui
    
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Name = "NotificationFrame"
    notificationFrame.Size = UDim2.new(0, 320, 0, 90)
    notificationFrame.Position = UDim2.new(1, 10, 0, 10)
    notificationFrame.BackgroundColor3 = config.Primary
    notificationFrame.BorderSizePixel = 0
    notificationFrame.Parent = notificationGui
    
    createCorner(config.CornerRadius).Parent = notificationFrame
    createStroke(colors[notification.Type], 2).Parent = notificationFrame
    
    -- Glow Effect
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.Size = UDim2.new(1, 20, 1, 20)
    glow.Position = UDim2.new(0, -10, 0, -10)
    glow.BackgroundTransparency = 1
    glow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    glow.ImageColor3 = colors[notification.Type]
    glow.ImageTransparency = 0.8
    glow.ZIndex = -1
    glow.Parent = notificationFrame
    
    -- Icon
    local iconLabel = Instance.new("TextLabel")
    iconLabel.Name = "Icon"
    iconLabel.Size = UDim2.new(0, 30, 0, 30)
    iconLabel.Position = UDim2.new(0, 15, 0, 15)
    iconLabel.BackgroundTransparency = 1
    iconLabel.Text = icons[notification.Type]
    iconLabel.TextColor3 = colors[notification.Type]
    iconLabel.TextSize = 20
    iconLabel.Font = Enum.Font.Gotham
    iconLabel.Parent = notificationFrame
    
    -- Title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, -60, 0, 25)
    titleLabel.Position = UDim2.new(0, 55, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = notification.Title
    titleLabel.TextColor3 = config.Text
    titleLabel.TextSize = 16
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notificationFrame
    
    -- Message
    local messageLabel = Instance.new("TextLabel")
    messageLabel.Name = "Message"
    messageLabel.Size = UDim2.new(1, -60, 0, 45)
    messageLabel.Position = UDim2.new(0, 55, 0, 35)
    messageLabel.BackgroundTransparency = 1
    messageLabel.Text = notification.Message
    messageLabel.TextColor3 = config.TextSecondary
    messageLabel.TextSize = 12
    messageLabel.Font = Enum.Font.Gotham
    messageLabel.TextXAlignment = Enum.TextXAlignment.Left
    messageLabel.TextWrapped = true
    messageLabel.Parent = notificationFrame
    
    -- Progress Bar
    local progressBar = Instance.new("Frame")
    progressBar.Name = "ProgressBar"
    progressBar.Size = UDim2.new(1, 0, 0, 3)
    progressBar.Position = UDim2.new(0, 0, 1, -3)
    progressBar.BackgroundColor3 = colors[notification.Type]
    progressBar.BorderSizePixel = 0
    progressBar.Parent = notificationFrame
    
    -- Animate in
    notificationFrame:TweenPosition(
        UDim2.new(1, -330, 0, 10),
        "Out",
        "Quart",
        0.5,
        true
    )
    
    -- Progress bar animation
    progressBar:TweenSize(
        UDim2.new(0, 0, 0, 3),
        "Out",
        "Linear",
        notification.Duration,
        true
    )
    
    -- Auto remove
    Debris:AddItem(notificationGui, notification.Duration + 1)
    
    wait(notification.Duration)
    
    -- Animate out
    notificationFrame:TweenPosition(
        UDim2.new(1, 10, 0, 10),
        "In",
        "Quart",
        0.5,
        true
    )
end

-- Enhanced Toggle
function DogHub:CreateToggle(tab, options, callback)
    options = options or {}
    
    local toggle = {
        Name = options.Name or "Toggle",
        Description = options.Description or "",
        Value = options.Default or false,
        Callback = callback or function() end
    }
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = toggle.Name .. "Toggle"
    toggleFrame.Size = UDim2.new(1, 0, 0, config.ElementHeight)
    toggleFrame.BackgroundColor3 = config.Secondary
    toggleFrame.BorderSizePixel = 0
    toggleFrame.Parent = tab.Content
    
    createCorner(6).Parent = toggleFrame
    createStroke(config.Border, 1, 0.7).Parent = toggleFrame
    
    -- Toggle Label
    local toggleLabel = Instance.new("TextLabel")
    toggleLabel.Name = "Label"
    toggleLabel.Size = UDim2.new(1, -70, 1, 0)
    toggleLabel.Position = UDim2.new(0, config.Padding, 0, 0)
    toggleLabel.BackgroundTransparency = 1
    toggleLabel.Text = toggle.Name
    toggleLabel.TextColor3 = config.Text
    toggleLabel.TextSize = 14
    toggleLabel.Font = Enum.Font.Gotham
    toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
    toggleLabel.Parent = toggleFrame
    
    -- Toggle Switch
    local toggleSwitch = Instance.new("Frame")
    toggleSwitch.Name = "Switch"
    toggleSwitch.Size = UDim2.new(0, 45, 0, 22)
    toggleSwitch.Position = UDim2.new(1, -55, 0.5, -11)
    toggleSwitch.BackgroundColor3 = toggle.Value and config.Accent or config.Border
    toggleSwitch.BorderSizePixel = 0
    toggleSwitch.Parent = toggleFrame
    
    createCorner(11).Parent = toggleSwitch
    
    -- Toggle Indicator
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "Indicator"
    toggleIndicator.Size = UDim2.new(0, 18, 0, 18)
    toggleIndicator.Position = toggle.Value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
    toggleIndicator.BackgroundColor3 = config.Text
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleSwitch
    
    createCorner(9).Parent = toggleIndicator
    
    -- Toggle Function
    local function updateToggle()
        toggle.Value = not toggle.Value
        
        local targetColor = toggle.Value and config.Accent or config.Border
        local targetPos = toggle.Value and UDim2.new(1, -20, 0.5, -9) or UDim2.new(0, 2, 0.5, -9)
        
        animateElement(toggleSwitch, {BackgroundColor3 = targetColor})
        animateElement(toggleIndicator, {Position = targetPos})
        
        toggle.Callback(toggle.Value)
    end
    
    -- Click Detection
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(1, 0, 1, 0)
    toggleButton.BackgroundTransparency = 1
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame
    
    toggleButton.MouseButton1Click:Connect(updateToggle)
    
    -- Hover Effects
    toggleButton.MouseEnter:Connect(function()
        animateElement(toggleFrame, {BackgroundColor3 = Color3.fromRGB(50, 55, 75)})
    end)
    
    toggleButton.MouseLeave:Connect(function()
        animateElement(toggleFrame, {BackgroundColor3 = config.Secondary})
    end)
    
    table.insert(tab.Elements, toggle)
    return toggle
end

-- Enhanced Slider
function DogHub:CreateSlider(tab, options, callback)
    options = options or {}
    
    local slider = {
        Name = options.Name or "Slider",
        Description = options.Description or "",
        Min = options.Min or 0,
        Max = options.Max or 100,
        Value = options.Default or options.Min or 0,
        Increment = options.Increment or 1,
        Suffix = options.Suffix or "",
        Callback = callback or function() end
    }
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = slider.Name .. "Slider"
    sliderFrame.Size = UDim2.new(1, 0, 0, 55)
    sliderFrame.BackgroundColor3 = config.Secondary
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = tab.Content
    
    createCorner(6).Parent = sliderFrame
    createStroke(config.Border, 1, 0.7).Parent = sliderFrame
    
    -- Slider Header
    local sliderHeader = Instance.new("Frame")
    sliderHeader.Name = "Header"
    sliderHeader.Size = UDim2.new(1, 0, 0, 25)
    sliderHeader.BackgroundTransparency = 1
    sliderHeader.Parent = sliderFrame
    
    -- Slider Label
    local sliderLabel = Instance.new("TextLabel")
    sliderLabel.Name = "Label"
    sliderLabel.Size = UDim2.new(0.7, 0, 1, 0)
    sliderLabel.Position = UDim2.new(0, config.Padding, 0, 0)
    sliderLabel.BackgroundTransparency = 1
    sliderLabel.Text = slider.Name
    sliderLabel.TextColor3 = config.Text
    sliderLabel.TextSize = 14
    sliderLabel.Font = Enum.Font.Gotham
    sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
    sliderLabel.Parent = sliderHeader
    
    -- Value Display
    local valueDisplay = Instance.new("TextLabel")
    valueDisplay.Name = "ValueDisplay"
    valueDisplay.Size = UDim2.new(0.3, 0, 1, 0)
    valueDisplay.Position = UDim2.new(0.7, 0, 0, 0)
    valueDisplay.BackgroundTransparency = 1
    valueDisplay.Text = tostring(slider.Value) .. slider.Suffix
    valueDisplay.TextColor3 = config.Accent
    valueDisplay.TextSize = 14
    valueDisplay.Font = Enum.Font.GothamBold
    valueDisplay.TextXAlignment = Enum.TextXAlignment.Right
    valueDisplay.Parent = sliderHeader
    
    -- Slider Track Container
    local trackContainer = Instance.new("Frame")
    trackContainer.Name = "TrackContainer"
    trackContainer.Size = UDim2.new(1, -24, 0, 20)
    trackContainer.Position = UDim2.new(0, 12, 0, 30)
    trackContainer.BackgroundTransparency = 1
    trackContainer.Parent = sliderFrame
    
    -- Slider Track
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Name = "Track"
    sliderTrack.Size = UDim2.new(1, 0, 0, 6)
    sliderTrack.Position = UDim2.new(0, 0, 0.5, -3)
    sliderTrack.BackgroundColor3 = config.Border
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = trackContainer
    
    createCorner(3).Parent = sliderTrack
    
    -- Slider Fill
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new((slider.Value - slider.Min) / (slider.Max - slider.Min), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = config.Accent
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    createCorner(3).Parent = sliderFill
    
    -- Slider Handle
    local sliderHandle = Instance.new("Frame")
    sliderHandle.Name = "Handle"
    sliderHandle.Size = UDim2.new(0, 16, 0, 16)
    sliderHandle.Position = UDim2.new((slider.Value - slider.Min) / (slider.Max - slider.Min), -8, 0.5, -8)
    sliderHandle.BackgroundColor3 = config.Text
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Parent = sliderTrack
    
    createCorner(8).Parent = sliderHandle
    createStroke(config.Accent, 2).Parent = sliderHandle
    
    -- Slider Logic
    local dragging = false
    
    local function updateSlider(input)
        local trackPos = sliderTrack.AbsolutePosition.X
        local trackSize = sliderTrack.AbsoluteSize.X
        local mousePos = input.Position.X
        
        local percent = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
        local rawValue = slider.Min + (slider.Max - slider.Min) * percent
        slider.Value = math.floor((rawValue / slider.Increment) + 0.5) * slider.Increment
        slider.Value = math.clamp(slider.Value, slider.Min, slider.Max)
        
        valueDisplay.Text = tostring(slider.Value) .. slider.Suffix
        
        local actualPercent = (slider.Value - slider.Min) / (slider.Max - slider.Min)
        animateElement(sliderFill, {Size = UDim2.new(actualPercent, 0, 1, 0)}, 0.1)
        animateElement(sliderHandle, {Position = UDim2.new(actualPercent, -8, 0.5, -8)}, 0.1)
        
        slider.Callback(slider.Value)
    end
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
            animateElement(sliderHandle, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            animateElement(sliderHandle, {Size = UDim2.new(0, 16, 0, 16)}, 0.1)
        end
    end)
    
    table.insert(tab.Elements, slider)
    return slider
end

-- Enhanced Button
function DogHub:CreateButton(tab, options, callback)
    options = options or {}
    
    local button = {
        Name = options.Name or "Button",
        Description = options.Description or "",
        Style = options.Style or "Primary", -- Primary, Secondary, Success, Warning, Error
        Callback = callback or function() end
    }
    
    local styles = {
        Primary = config.Accent,
        Secondary = config.Secondary,
        Success = config.Success,
        Warning = config.Warning,
        Error = config.Error
    }
    
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = button.Name .. "Button"
    buttonFrame.Size = UDim2.new(1, 0, 0, config.ElementHeight)
    buttonFrame.BackgroundColor3 = styles[button.Style]
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Text = ""
    buttonFrame.Parent = tab.Content
    
    createCorner(6).Parent = buttonFrame
    createStroke(styles[button.Style], 1, 0.7).Parent = buttonFrame
    
    -- Button Content
    local buttonContent = Instance.new("Frame")
    buttonContent.Name = "Content"
    buttonContent.Size = UDim2.new(1, 0, 1, 0)
    buttonContent.BackgroundTransparency = 1
    buttonContent.Parent = buttonFrame
    
    -- Button Label
    local buttonLabel = Instance.new("TextLabel")
    buttonLabel.Name = "Label"
    buttonLabel.Size = UDim2.new(1, 0, 1, 0)
    buttonLabel.BackgroundTransparency = 1
    buttonLabel.Text = button.Name
    buttonLabel.TextColor3 = config.Text
    buttonLabel.TextSize = 14
    buttonLabel.Font = Enum.Font.GothamBold
    buttonLabel.Parent = buttonContent
    
    -- Button Effects
    buttonFrame.MouseEnter:Connect(function()
        animateElement(buttonFrame, {BackgroundColor3 = Color3.fromRGB(
            math.min(255, styles[button.Style].R * 255 + 20),
            math.min(255, styles[button.Style].G * 255 + 20),
            math.min(255, styles[button.Style].B * 255 + 20)
        )}, 0.1)
    end)
    
    buttonFrame.MouseLeave:Connect(function()
        animateElement(buttonFrame, {BackgroundColor3 = styles[button.Style]}, 0.1)
    end)
    
    buttonFrame.MouseButton1Down:Connect(function()
        animateElement(buttonContent, {Size = UDim2.new(0.95, 0, 0.95, 0)}, 0.05)
    end)
    
    buttonFrame.MouseButton1Up:Connect(function()
        animateElement(buttonContent, {Size = UDim2.new(1, 0, 1, 0)}, 0.05)
        button.Callback()
    end)
    
    table.insert(tab.Elements, button)
    return button
end

-- Enhanced Dropdown
function DogHub:CreateDropdown(tab, options, callback)
    options = options or {}
    
    local dropdown = {
        Name = options.Name or "Dropdown",
        Description = options.Description or "",
        Options = options.Options or {"Option 1", "Option 2", "Option 3"},
        Value = options.Default or (options.Options and options.Options[1]) or "",
        Multi = options.Multi or false,
        Open = false,
        Callback = callback or function() end
    }
    
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = dropdown.Name .. "Dropdown"
    dropdownFrame.Size = UDim2.new(1, 0, 0, config.ElementHeight)
    dropdownFrame.BackgroundColor3 = config.Secondary
    dropdownFrame.BorderSizePixel = 0
    dropdownFrame.Parent = tab.Content
    
    createCorner(6).Parent = dropdownFrame
    createStroke(config.Border, 1, 0.7).Parent = dropdownFrame
    
    -- Dropdown Header
    local dropdownHeader = Instance.new("TextButton")
    dropdownHeader.Name = "Header"
    dropdownHeader.Size = UDim2.new(1, 0, 1, 0)
    dropdownHeader.BackgroundTransparency = 1
    dropdownHeader.Text = ""
    dropdownHeader.Parent = dropdownFrame
    
    -- Dropdown Label
    local dropdownLabel = Instance.new("TextLabel")
    dropdownLabel.Name = "Label"
    dropdownLabel.Size = UDim2.new(0.4, 0, 1, 0)
    dropdownLabel.Position = UDim2.new(0, config.Padding, 0, 0)
    dropdownLabel.BackgroundTransparency = 1
    dropdownLabel.Text = dropdown.Name
    dropdownLabel.TextColor3 = config.Text
    dropdownLabel.TextSize = 14
    dropdownLabel.Font = Enum.Font.Gotham
    dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
    dropdownLabel.Parent = dropdownHeader
    
    -- Current Value Display
    local valueDisplay = Instance.new("TextLabel")
    valueDisplay.Name = "ValueDisplay"
    valueDisplay.Size = UDim2.new(0.5, -30, 1, 0)
    valueDisplay.Position = UDim2.new(0.4, 5, 0, 0)
    valueDisplay.BackgroundTransparency = 1
    valueDisplay.Text = dropdown.Value
    valueDisplay.TextColor3 = config.TextSecondary
    valueDisplay.TextSize = 13
    valueDisplay.Font = Enum.Font.Gotham
    valueDisplay.TextXAlignment = Enum.TextXAlignment.Right
    valueDisplay.TextTruncate = Enum.TextTruncate.AtEnd
    valueDisplay.Parent = dropdownHeader
    
    -- Dropdown Arrow
    local dropdownArrow = Instance.new("TextLabel")
    dropdownArrow.Name = "Arrow"
    dropdownArrow.Size = UDim2.new(0, 20, 0, 20)
    dropdownArrow.Position = UDim2.new(1, -30, 0.5, -10)
    dropdownArrow.BackgroundTransparency = 1
    dropdownArrow.Text = "▼"
    dropdownArrow.TextColor3 = config.TextSecondary
    dropdownArrow.TextSize = 12
    dropdownArrow.Font = Enum.Font.Gotham
    dropdownArrow.Parent = dropdownHeader
    
    -- Options Container
    local optionsContainer = Instance.new("Frame")
    optionsContainer.Name = "OptionsContainer"
    optionsContainer.Size = UDim2.new(1, 0, 0, math.min(#dropdown.Options * 30, 150))
    optionsContainer.Position = UDim2.new(0, 0, 1, 5)
    optionsContainer.BackgroundColor3 = config.Primary
    optionsContainer.BorderSizePixel = 0
    optionsContainer.Visible = false
    optionsContainer.ZIndex = 10
    optionsContainer.Parent = dropdownFrame
    
    createCorner(6).Parent = optionsContainer
    createStroke(config.Border, 1).Parent = optionsContainer
    
    -- Options ScrollingFrame
    local optionsScroll = Instance.new("ScrollingFrame")
    optionsScroll.Name = "OptionsScroll"
    optionsScroll.Size = UDim2.new(1, 0, 1, 0)
    optionsScroll.BackgroundTransparency = 1
    optionsScroll.BorderSizePixel = 0
    optionsScroll.ScrollBarThickness = 3
    optionsScroll.ScrollBarImageColor3 = config.Accent
    optionsScroll.Parent = optionsContainer
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsScroll
    
    createPadding(4, 4, 4, 4).Parent = optionsScroll
    
    -- Create Option Buttons
    for i, option in ipairs(dropdown.Options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Name = "Option" .. i
        optionBtn.Size = UDim2.new(1, 0, 0, 26)
        optionBtn.BackgroundColor3 = config.Secondary
        optionBtn.BorderSizePixel = 0
        optionBtn.Text = option
        optionBtn.TextColor3 = config.Text
        optionBtn.TextSize = 12
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.Parent = optionsScroll
        
        createCorner(4).Parent = optionBtn
        
        optionBtn.MouseEnter:Connect(function()
            animateElement(optionBtn, {BackgroundColor3 = config.Accent}, 0.1)
        end)
        
        optionBtn.MouseLeave:Connect(function()
            animateElement(optionBtn, {BackgroundColor3 = config.Secondary}, 0.1)
        end)
        
        optionBtn.MouseButton1Click:Connect(function()
            dropdown.Value = option
            valueDisplay.Text = option
            optionsContainer.Visible = false
            dropdown.Open = false
            
            animateElement(dropdownArrow, {Rotation = 0}, 0.2)
            animateElement(dropdownFrame, {Size = UDim2.new(1, 0, 0, config.ElementHeight)}, 0.2)
            
            dropdown.Callback(option)
        end)
    end
    
    -- Toggle Dropdown
    dropdownHeader.MouseButton1Click:Connect(function()
        dropdown.Open = not dropdown.Open
        optionsContainer.Visible = dropdown.Open
        
        if dropdown.Open then
            animateElement(dropdownArrow, {Rotation = 180}, 0.2)
            animateElement(dropdownFrame, {
                Size = UDim2.new(1, 0, 0, config.ElementHeight + math.min(#dropdown.Options * 30, 150) + 5)
            }, 0.2)
        else
            animateElement(dropdownArrow, {Rotation = 0}, 0.2)
            animateElement(dropdownFrame, {Size = UDim2.new(1, 0, 0, config.ElementHeight)}, 0.2)
        end
    end)
    
    -- Hover Effects
    dropdownHeader.MouseEnter:Connect(function()
        animateElement(dropdownFrame, {BackgroundColor3 = Color3.fromRGB(50, 55, 75)}, 0.1)
    end)
    
    dropdownHeader.MouseLeave:Connect(function()
        animateElement(dropdownFrame, {BackgroundColor3 = config.Secondary}, 0.1)
    end)
    
    table.insert(tab.Elements, dropdown)
    return dropdown
end

-- Auto Content Sizing
RunService.Heartbeat:Connect(function()
    for _, gui in pairs(playerGui:GetChildren()) do
        if gui.Name:match("^DogHub_") then
            for _, frame in pairs(gui:GetDescendants()) do
                if frame:IsA("ScrollingFrame") then
                    local layout = frame:FindFirstChild("UIListLayout")
                    if layout then
                        frame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 20)
                    end
                end
            end
        end
    end
end)

-- Example Usage
function DogHub:Example()
    local window = self:CreateWindow({
        Title = "DOGHUB",
        Subtitle = "Enhanced GUI Library v2.0",
        Size = Vector2.new(600, 450)
    })
    
    -- Farming Tab
    local farmingTab = self:CreateTab(window, {
        Name = "Auto Farm",
        Icon = "🌾",
        Description = "Automated farming features"
    })
    
    self:CreateToggle(farmingTab, {
        Name = "Auto Farm",
        Description = "Enable automatic farming",
        Default = false
    }, function(value)
        print("Auto Farm:", value)
    end)
    
    self:CreateSlider(farmingTab, {
        Name = "Farm Speed",
        Min = 1,
        Max = 10,
        Default = 5,
        Increment = 1,
        Suffix = "x"
    }, function(value)
        print("Farm Speed:", value)
    end)
    
    -- Visuals Tab
    local visualsTab = self:CreateTab(window, {
        Name = "Visuals",
        Icon = "👁️",
        Description = "Visual enhancements"
    })
    
    self:CreateToggle(visualsTab, {
        Name = "ESP",
        Default = false
    }, function(value)
        print("ESP:", value)
    end)
    
    self:CreateDropdown(visualsTab, {
        Name = "ESP Type",
        Options = {"Box", "Name", "Distance", "Health"},
        Default = "Box"
    }, function(value)
        print("ESP Type:", value)
    end)
    
    -- Settings Tab
    local settingsTab = self:CreateTab(window, {
        Name = "Settings",
        Icon = "⚙️",
        Description = "Configuration options"
    })
    
    self:CreateButton(settingsTab, {
        Name = "Save Config",
        Style = "Success"
    }, function()
        self:CreateNotification({
            Title = "Success",
            Message = "Configuration saved successfully!",
            Type = "Success",
            Duration = 2
        })
    end)
    
    self:CreateButton(settingsTab, {
        Name = "Reset Settings",
        Style = "Error"
    }, function()
        self:CreateNotification({
            Title = "Warning",
            Message = "Settings have been reset to default",
            Type = "Warning",
            Duration = 3
        })
    end)
    
    return window
end

return DogHub
