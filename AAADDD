-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL
local webhookURL = "https://discord.com/api/webhooks/1375147331980099594/5758wuuuL-84m7Vw1u1Ztvi9iqlR-40CbS0UtbCTt56fknqZauFZ62AVZ27EX8xvGd2c"

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GitHub ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå usage
local GITHUB_TOKEN = "YOUR_GITHUB_TOKEN_HERE" -- ‡πÉ‡∏™‡πà GitHub Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
local REPO_OWNER = "ADMINDOGG"
local REPO_NAME = "key-store"
local USAGE_FILE_PATH = "usage_stats.txt" -- ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏™‡πà script_key ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not script_key then
    return
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á Executor
local function getExecutor()
    if identifyexecutor then return identifyexecutor() end
    if KRNL_LOADED then return "Krnl" end
    if isexecutorclosure then return "Script-Ware" end
    if fluxus then return "Fluxus" end
    return "Unknown"
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á HWID
local function getHWID()
    if syn and syn.crypt and syn.crypt.hash then
        return syn.crypt.hash("HWID_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId()))
    elseif gethwid then
        return gethwid()
    elseif identifyexecutor and identifyexecutor():lower():find("fluxus") then
        return "fluxus_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId())
    else
        return "fallback_" .. tostring(game:GetService("RbxAnalyticsService"):GetClientId())
    end
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Request
local function GetRequest()
    if syn and syn.request then return syn.request end
    if http and http.request then return http.request end
    if http_request then return http_request end
    if fluxus and fluxus.request then return fluxus.request end
    if request then return request end
    return nil
end

-- ‚úÖ ‡∏î‡∏∂‡∏á IP Address
local function getIP()
    local req = GetRequest()
    if not req then return "Unknown" end
    local success, res = pcall(function()
        return req({ Url = "https://api.ipify.org", Method = "GET" })
    end)
    return success and res and res.Body or "Unknown"
end

-- ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å IP
local function getCountry(ip)
    local req = GetRequest()
    if not req then return "Unknown" end
    local success, res = pcall(function()
        return req({ Url = "http://ip-api.com/json/" .. ip, Method = "GET" })
    end)
    if success and res and res.Body then
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        return data.country or "Unknown"
    end
    return "Unknown"
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå usage ‡∏à‡∏≤‡∏Å GitHub
local function getUsageFile()
    local req = GetRequest()
    if not req then return nil end
    
    local url = string.format("https://api.github.com/repos/%s/%s/contents/%s", REPO_OWNER, REPO_NAME, USAGE_FILE_PATH)
    local success, response = pcall(function()
        return req({
            Url = url,
            Method = "GET",
            Headers = {
                ["Authorization"] = "token " .. GITHUB_TOKEN,
                ["Accept"] = "application/vnd.github.v3+json"
            }
        })
    end)
    
    if success and response and response.Body then
        local data = game:GetService("HttpService"):JSONDecode(response.Body)
        if data.content then
            -- ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô text
            local content = ""
            local base64 = data.content:gsub("\n", "")
            
            -- Simple base64 decode for basic text
            local b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
            for i = 1, #base64, 4 do
                local a, b, c, d = base64:sub(i,i), base64:sub(i+1,i+1), base64:sub(i+2,i+2), base64:sub(i+3,i+3)
                if a and b and c and d then
                    local n1 = b64chars:find(a) - 1
                    local n2 = b64chars:find(b) - 1
                    local n3 = (c ~= "=") and (b64chars:find(c) - 1) or 0
                    local n4 = (d ~= "=") and (b64chars:find(d) - 1) or 0
                    
                    content = content .. string.char(bit32.bor(bit32.lshift(n1, 2), bit32.rshift(n2, 4)))
                    if c ~= "=" then
                        content = content .. string.char(bit32.bor(bit32.lshift(bit32.band(n2, 15), 4), bit32.rshift(n3, 2)))
                    end
                    if d ~= "=" then
                        content = content .. string.char(bit32.bor(bit32.lshift(bit32.band(n3, 3), 6), n4))
                    end
                end
            end
            
            return {content = content, sha = data.sha}
        end
    end
    return nil
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå usage ‡πÉ‡∏ô GitHub
local function updateUsageFile(newContent, sha)
    local req = GetRequest()
    if not req then return false end
    
    local url = string.format("https://api.github.com/repos/%s/%s/contents/%s", REPO_OWNER, REPO_NAME, USAGE_FILE_PATH)
    
    -- ‡πÅ‡∏õ‡∏•‡∏á content ‡πÄ‡∏õ‡πá‡∏ô base64
    local HttpService = game:GetService("HttpService")
    local base64Content = ""
    local b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    
    for i = 1, #newContent, 3 do
        local a, b, c = newContent:byte(i), newContent:byte(i+1) or 0, newContent:byte(i+2) or 0
        local bitmap = bit32.bor(bit32.lshift(a, 16), bit32.lshift(b, 8), c)
        
        base64Content = base64Content .. b64chars:sub(bit32.rshift(bitmap, 18) + 1, bit32.rshift(bitmap, 18) + 1)
        base64Content = base64Content .. b64chars:sub(bit32.band(bit32.rshift(bitmap, 12), 63) + 1, bit32.band(bit32.rshift(bitmap, 12), 63) + 1)
        base64Content = base64Content .. (i+1 <= #newContent and b64chars:sub(bit32.band(bit32.rshift(bitmap, 6), 63) + 1, bit32.band(bit32.rshift(bitmap, 6), 63) + 1) or "=")
        base64Content = base64Content .. (i+2 <= #newContent and b64chars:sub(bit32.band(bitmap, 63) + 1, bit32.band(bitmap, 63) + 1) or "=")
    end
    
    local body = {
        message = "Update usage stats",
        content = base64Content,
        sha = sha
    }
    
    local success, response = pcall(function()
        return req({
            Url = url,
            Method = "PUT",
            Headers = {
                ["Authorization"] = "token " .. GITHUB_TOKEN,
                ["Accept"] = "application/vnd.github.v3+json",
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(body)
        })
    end)
    
    return success and response and response.StatusCode and response.StatusCode == 200
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
local function updateUsageCounter(key, playerInfo)
    local usageFile = getUsageFile()
    local content = ""
    local sha = nil
    
    if usageFile then
        content = usageFile.content or ""
        sha = usageFile.sha
    end
    
    -- ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô table ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    local usageData = {}
    local totalRuns = 0
    
    -- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    for line in content:gmatch("[^\r\n]+") do
        if line and line ~= "" then
            if line:match("^TOTAL_RUNS:") then
                totalRuns = tonumber(line:match("TOTAL_RUNS:(%d+)")) or 0
            else
                local keyData, count, lastUser, lastTime = line:match("([^|]+)|(%d+)|([^|]*)|?(.*)")
                if keyData and count then
                    usageData[keyData] = {
                        count = tonumber(count) or 0,
                        lastUser = lastUser or "",
                        lastTime = lastTime or ""
                    }
                end
            end
        end
    end
    
    -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö key ‡∏ô‡∏µ‡πâ
    if not usageData[key] then
        usageData[key] = {count = 0, lastUser = "", lastTime = ""}
    end
    
    usageData[key].count = usageData[key].count + 1
    usageData[key].lastUser = playerInfo.username
    usageData[key].lastTime = os.date("%Y-%m-%d %H:%M:%S")
    totalRuns = totalRuns + 1
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà
    local newContent = "=== SCRIPT USAGE STATISTICS ===\n"
    newContent = newContent .. "TOTAL_RUNS:" .. totalRuns .. "\n"
    newContent = newContent .. "LAST_UPDATED:" .. os.date("%Y-%m-%d %H:%M:%S") .. "\n\n"
    newContent = newContent .. "=== KEY USAGE DETAILS ===\n"
    newContent = newContent .. "Format: KEY|COUNT|LAST_USER|LAST_TIME\n\n"
    
    for keyName, data in pairs(usageData) do
        newContent = newContent .. string.format("%s|%d|%s|%s\n", 
            keyName, data.count, data.lastUser, data.lastTime)
    end
    
    -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå
    return updateUsageFile(newContent, sha)
end

-- ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
local function sendToDiscord(status, key, hwid, playerInfo, executor, ip, country, message, usageCount)
    local HttpService = game:GetService("HttpService")
    local embed = {
        ["username"] = status == "success" and "‚úÖ Key Success" or "‚ùå Key Failed",
        ["embeds"] = {{
            ["title"] = status == "success" and "‚úÖ Script Executed Successfully" or "‚ùå Script Execution Failed",
            ["color"] = status == "success" and 65280 or 16711680,
            ["fields"] = {
                { name = "üë§ Username", value = playerInfo.username, inline = true },
                { name = "üìõ Display Name", value = playerInfo.displayName, inline = true },
                { name = "üÜî User ID", value = playerInfo.userId, inline = true },
                { name = "üîë Key Used", value = "```" .. key .. "```", inline = false },
                { name = "üíª HWID", value = "```" .. hwid .. "```", inline = false },
                { name = "üõ†Ô∏è Executor", value = executor, inline = true },
                { name = "üåç Country", value = country, inline = true },
                { name = "üåê IP Address", value = ip, inline = true },
                { name = "üìä Usage Count", value = "**" .. (usageCount or "N/A") .. "** times", inline = true },
                { name = "üìã Status", value = "```" .. message .. "```", inline = false },
            },
            ["footer"] = { text = "Script Logger System ‚Ä¢ Usage Tracking Enabled" },
            ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    pcall(function()
        GetRequest()({
            Url = webhookURL,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(embed)
        })
    end)
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Key ‡πÅ‡∏•‡∏∞ HWID
local function verifyKeyAndHWID(inputKey, userHWID)
    local success, keysData = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/ADMINDOGG/key-store/refs/heads/main/keys.txt")
    end)
    
    if not success then
        return false, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ"
    end
    
    for line in keysData:gmatch("[^\r\n]+") do
        if line and line ~= "" then
            local key, hwid, userid = line:match("([^:]+):([^:]+):?(.*)")
            
            if key and hwid then
                key = key:gsub("^%s*(.-)%s*$", "%1")
                hwid = hwid:gsub("^%s*(.-)%s*$", "%1")
                
                if key == inputKey then
                    if hwid == userHWID then
                        return true, "Key ‡πÅ‡∏•‡∏∞ HWID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
                    else
                        return false, "HWID ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô: " .. hwid .. " | ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " .. userHWID
                    end
                end
            end
        end
    end
    
    return false, "Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
local player = game:GetService("Players").LocalPlayer
local playerInfo = {
    username = player.Name,
    displayName = player.DisplayName,
    userId = tostring(player.UserId)
}

local userHWID = getHWID()
local executor = getExecutor()
local ip = getIP()
local country = getCountry(ip)

local isValid, message = verifyKeyAndHWID(script_key, userHWID)

if isValid then
    -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô GitHub
    local usageUpdated = updateUsageCounter(script_key, playerInfo)
    local usageStatus = usageUpdated and "Updated" or "Failed to update"
    
    -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ Discord
    sendToDiscord("success", script_key, userHWID, playerInfo, executor, ip, country, 
        message .. " | Usage tracking: " .. usageStatus, "Updated")
    
    -- ‡πÇ‡∏´‡∏•‡∏î script ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    pcall(function()
        -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô script ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        -- loadstring(game:HttpGet("https://raw.githubusercontent.com/YOUR_USERNAME/YOUR_REPO/main/main_script.lua"))()
        print("üéâ Script loaded successfully! Usage count updated.")
    end)
else
    -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÑ‡∏õ Discord
    sendToDiscord("failure", script_key, userHWID, playerInfo, executor, ip, country, message, "N/A")
end
